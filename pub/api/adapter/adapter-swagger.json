{
    "openapi": "3.0.0",
    "info": {
        "title": "Adapter Runtime Administrative API",
        "description": "Adapter Runtime Administrative API",
        "version": "1.0",
        "contact": {
            "name": "Software AG Global Support",
            "url": "https://softwareag.com/support",
            "email": "support@softwareag.com"
        },
        "license": {
            "name": "Software AG License",
            "url": "https://softwareag.com/license"
        }
    },
    "servers": [
        {
            "url": "http://localhost:5555",
            "description": "Adapter Runtime URL",
            "variables": {
                "host": {
                    "default": "grayfoot.local",
                    "description": "Host name for Adapter Runtime Administrative API"
                },
                "port": {
                    "default": "5555",
                    "description": "Adapter Runtime Administrative API port number"
                }
            }
        }
    ],
    "paths": {
        "/admin/adapters/connection/{adapterTypeName}/{connectionAlias}/": {
            "get": {
                "summary": "Retrieves a connection",
                "tags": [
                    "connections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "connectionAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "description": "Indicate whether links in the response should be expanded",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/describe/{adapterTypeName}/connection/{connectionFactoryTypeName}/": {
            "get": {
                "summary": "Describe connection details of given adapter type",
                "tags": [
                    "connections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "connectionFactoryTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/describe/{adapterTypeName}/listener/": {
            "get": {
                "summary": "Describe listener template details of given adapter type",
                "tags": [
                    "listeners"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/connection/{connectionAlias}": {
            "put": {
                "summary": "Enable or disable given connection",
                "tags": [
                    "connections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "connectionAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": false,
                        "schema": {
                            "description": "The action to identify enable or disable connection.",
                            "type": "string",
                            "enum": [
                                "enable",
                                "disable"
                            ]
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Updates connection",
                "tags": [
                    "connections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "connectionAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a connection",
                "tags": [
                    "connections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "connectionAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/listener/{listenerAlias}": {
            "put": {
                "summary": "Enable or disable given listener",
                "tags": [
                    "listeners"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "listenerAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": false,
                        "schema": {
                            "description": "The action to identify enable or disable listener.",
                            "type": "string",
                            "enum": [
                                "enable",
                                "disable"
                            ]
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a listener",
                "tags": [
                    "listeners"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "listenerAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/listener/": {
            "post": {
                "summary": "Creates a listener",
                "tags": [
                    "listeners"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/describe/{adapterTypeName}/listener/{listenerTemplate}/": {
            "get": {
                "summary": "Describe listener details of given adapter type",
                "tags": [
                    "listeners"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listenerTemplate",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/notification/{adapterTypeName}/{notificationAlias}/": {
            "get": {
                "summary": "Retrieves a notification",
                "tags": [
                    "notifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "notificationAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "description": "Indicate whether links in the response should be expanded",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "node",
                        "required": false,
                        "schema": {
                            "description": "node to be deleted either listener or polling.",
                            "type": "string",
                            "enum": [
                                "listener",
                                "polling"
                            ]
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/describe/{adapterTypeName}/connection/": {
            "get": {
                "summary": "Describe connection details of given adapter type",
                "tags": [
                    "connections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/notification/{adapterTypeName}/": {
            "get": {
                "summary": "Retrieves all notifications of given adapter type",
                "tags": [
                    "notifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "description": "Indicate whether links in the response should be expanded",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "node",
                        "required": false,
                        "schema": {
                            "description": "node to be listed either listener or polling.",
                            "type": "string",
                            "enum": [
                                "listener",
                                "polling"
                            ]
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/listener/{listenerName}": {
            "patch": {
                "summary": "Updates listener",
                "tags": [
                    "listeners"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "listenerName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/connection/{adapterTypeName}/": {
            "get": {
                "summary": "Retrieves all connections of given adapter type",
                "tags": [
                    "connections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "description": "Indicate whether links in the response should be expanded",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/": {
            "get": {
                "summary": "Retrieves a list of Adapters installed",
                "tags": [
                    "adapters"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "description": "Indicate whether links in the response should be expanded",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/connection/": {
            "post": {
                "summary": "Creates a connection",
                "tags": [
                    "connections"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/listener/{adapterTypeName}/{listenerAlias}/": {
            "get": {
                "summary": "Retrieves a listener",
                "tags": [
                    "listeners"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listenerAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "description": "Indicate whether links in the response should be expanded",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/notification/{notificationAlias}": {
            "put": {
                "summary": "Enable or disable given notification",
                "tags": [
                    "notifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "notificationAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": false,
                        "schema": {
                            "description": "The action to identify enable or disable notification.",
                            "type": "string",
                            "enum": [
                                "enable",
                                "disable"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "node",
                        "required": false,
                        "schema": {
                            "description": "node to be listed either listener or polling.",
                            "type": "string",
                            "enum": [
                                "listener",
                                "polling"
                            ]
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes notification",
                "tags": [
                    "notifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "notificationAlias",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "node",
                        "required": false,
                        "schema": {
                            "description": "node to be deleted either listener or polling.",
                            "type": "string",
                            "enum": [
                                "listener",
                                "polling"
                            ]
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/adapters/listener/{adapterTypeName}/": {
            "get": {
                "summary": "Retrieves a list of listener",
                "tags": [
                    "listeners"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "adapterTypeName",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "description": "Indicate whether links in the response should be expanded",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-CSRF-TOKEN",
                        "required": false,
                        "schema": {
                            "description": "When CSRF Guard is enabled in Integration Server, all requests must contain this header.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "operation succeeded"
                    },
                    "4XX": {
                        "description": "client error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ResourceAccess": {
                "type": "object",
                "properties": {
                    "accessMode": {
                        "description": "The access mode is used to determine which folder and services may be accessed through the port. \"allowByDefault\" allows access to all resources except those in the denyList. \"denyByDefault\" prevents access to all resources except those in the allowList. If you do not assign access settings to a port or delete the access settings for a port, the port uses the the default access settings, which has an accessMode of \"denyByDefault\" and a few core services in the allowList.",
                        "type": "string",
                        "enum": [
                            "allowByDefault",
                            "denyByDefault"
                        ]
                    },
                    "allowList": {
                        "description": "An allow list to specify which folders and services can be accessed through this port when accessMode is \"denyByDefault\".",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "denyList": {
                        "description": "A deny list to specify which folders and services cannot be accessed through this port when accessMode is \"allowByDefault\".",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebSocketPortInOut": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "An unique name that identifies the port.",
                        "type": "string"
                    },
                    "number": {
                        "description": "The port number.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "packageName": {
                        "description": "The package associated with the port.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "bindAddress": {
                        "description": "IP address to which to bind this port. Use a bind address if your machine has multiple IP addresses and you want the port to use this specific address.",
                        "type": "string"
                    },
                    "backlog": {
                        "description": "The number of requests that can remain in the queue for an enabled port before Integration Server begins rejecting requests.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "minThread": {
                        "description": "The minimum number of threads Integration Server maintains in the thread pool for this port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxThread": {
                        "description": "The maximum number of threads Integration Server maintains in the thread pool for this port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadPriority": {
                        "description": "Priority with which the Java treats threads from this thread pool. The larger the number, the higher the priority.",
                        "type": "integer",
                        "format": "int32",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ]
                    },
                    "idleTimeout": {
                        "description": "When to close the WebSocket client connection if the server has not received a request from the client within this timeout value.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "clientAuth": {
                        "description": "The type of client authentication you want Integration Server to perform for requests that arrive on this WebSocket or WebSocketSecure port. Integration Server uses user name and password.",
                        "type": "string",
                        "enum": [
                            "basic"
                        ]
                    },
                    "secure": {
                        "description": "Whether this port uses TLS for secure communications. This must be set to true for a WebSocketSecure port",
                        "type": "boolean"
                    },
                    "keystoreAlias": {
                        "description": "Name of the keystoreAlias used by the WebSocketSecure port where the keystore contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
                        "type": "string"
                    },
                    "keyAlias": {
                        "description": "Name of the keyAlias within a keyStoreAlias used by the WebSocketSecure port.",
                        "type": "string"
                    }
                }
            },
            "SystemInfo": {
                "type": "object",
                "properties": {
                    "architecture": {
                        "description": "CPU chip architecture",
                        "type": "string"
                    },
                    "cpuCores": {
                        "description": "Number of CPU cores",
                        "type": "string"
                    },
                    "cpuType": {
                        "description": "Type of CPU",
                        "type": "string"
                    },
                    "hwMemory": {
                        "description": "Amount of computer memory in gigabytes",
                        "type": "string"
                    },
                    "hostname": {
                        "description": "Host computer name",
                        "type": "string"
                    },
                    "osName": {
                        "description": "Operating system name",
                        "type": "string"
                    },
                    "osRelease": {
                        "description": "Operating system version",
                        "type": "string"
                    },
                    "osServicePack": {
                        "description": "Operating system service pack",
                        "type": "string"
                    }
                }
            },
            "MQTTConnectionAliasOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the MQTT connection alias.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of common messaging provider. Currently, Integration Server supports MQTT version 3.1.1 only which is returned as MQTT3.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the MQTT connection alias.",
                        "type": "string"
                    },
                    "packageName": {
                        "description": "Package in which the MQTT connection alias information is stored.",
                        "type": "string"
                    },
                    "clientId": {
                        "description": "Connection client ID of the MQTT connection alias.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Whether or not the MQTT connection alias is enabled. ",
                        "type": "boolean"
                    },
                    "lastError": {
                        "description": "The most recent error related to the MQTT connection alias.",
                        "type": "string"
                    },
                    "hasTriggers": {
                        "description": "Whether any MQTT triggers currenntly use this alias.",
                        "type": "boolean"
                    },
                    "status": {
                        "description": "The status of the MQTT connection which can be \"Running\", \"Starting\", or \"Not Running\".",
                        "type": "string"
                    },
                    "host": {
                        "description": "URL containing the protocol, domain, and port of the MQTT server to which connections created using the MQTT connection alias will connect.",
                        "type": "string"
                    },
                    "cleanSessionEnabled": {
                        "description": "Indicates if clean sessions are used for subscriptions.",
                        "type": "boolean"
                    },
                    "timeout": {
                        "description": "Maximum number of seconds that Integration Server waits for a network connection to the MQTT server to be established.",
                        "type": "string"
                    },
                    "keepAlive": {
                        "description": "Maximum number of seconds that can elapse between messages being sent to or received from the MQTT server using a connection created for this MQTT connection alias.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "willEnabled": {
                        "description": "Whether the MQTT server sends a last will message on behalf of Integration Server if Integration Server disconnects abruptly from the MQTT server.",
                        "type": "boolean"
                    },
                    "willQos": {
                        "description": "Quality of Service for the last will message. Inputting '0' will create an \"At most once\" QoS. Inputting '1' will create an \"At least once\" QoS. Inputting '2' will create an \"Exactly once\" QoS.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "willRetain": {
                        "description": "Whether the MQTT server retains the last will message. ",
                        "type": "boolean"
                    },
                    "willTopic": {
                        "description": "Topic to which the last will message is published. All subscribers to this topic will receive the last will message",
                        "type": "string"
                    },
                    "willPayload": {
                        "description": "Contents of the last will message.",
                        "type": "string"
                    },
                    "willOnConnectPayload": {
                        "description": "Message to send upon successful connection to the MQTT server.",
                        "type": "string"
                    },
                    "willOnDisconnectPayload": {
                        "description": "Message to send upon disconnecting from the MQTT server.",
                        "type": "string"
                    },
                    "user": {
                        "description": "User name for client authentication.",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password for client authentication. Password will be masked.",
                        "type": "string"
                    },
                    "useSSL": {
                        "description": "Whether SSL is used to connect to the MQTT server.",
                        "type": "boolean"
                    },
                    "truststoreAlias": {
                        "description": "Truststore alias to be used if SSL is enabled.",
                        "type": "string"
                    },
                    "keystoreAlias": {
                        "description": "Keystore alias to be used if SSL is enabled.",
                        "type": "string"
                    },
                    "keyAlias": {
                        "description": "Key alias associated with the keystore.",
                        "type": "string"
                    },
                    "clientIdPrefix": {
                        "description": "Prefix set by Integration Server that is added to the beginning of a user-specified clientId.",
                        "type": "string"
                    }
                }
            },
            "RestartStatus": {
                "type": "object",
                "properties": {
                    "restartNeeded": {
                        "description": "Whether restart is needed.",
                        "type": "boolean"
                    },
                    "restartReasons": {
                        "description": "Reasons why restart is needed.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ClientCertificateOut": {
                "type": "object",
                "properties": {
                    "user": {
                        "description": "User mapped to the certificate.",
                        "type": "string"
                    },
                    "usage": {
                        "description": "Purpose of the certificate.",
                        "type": "string"
                    },
                    "certifcateInfo": {
                        "$ref": "#/components/schemas/CertificateInfo"
                    }
                }
            },
            "ProxyServerData": {
                "type": "object",
                "properties": {
                    "proxyAlias": {
                        "description": "Name of the alias.",
                        "type": "string"
                    },
                    "host": {
                        "description": "Host Name or IP address of the proxy server. ",
                        "type": "string"
                    },
                    "port": {
                        "description": "Port number of the proxy server. ",
                        "type": "integer",
                        "format": "int32"
                    },
                    "username": {
                        "description": "User name Integration Server must use to access the proxy server. ",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password Integration Server must use to access the proxy server. ",
                        "type": "string"
                    },
                    "isDefault": {
                        "description": "Whether the proxy server alias is the default proxy server alias for a particular protocol. ",
                        "type": "boolean"
                    },
                    "protocol": {
                        "description": "Protocol for communicating with the proxy server. Supported protocols are: HTTP, HTTPS, FTP, or SOCKS. ",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "FTP",
                            "SOCKS"
                        ]
                    },
                    "ftpType": {
                        "description": "If FTP is used, specifies the type of command Integration Server must use to issue an outbound request to the FTP proxy server. Valid values are 0-7 where the values are mapped as follows: 0:No proxy, 1:ftp_user@ftp_host no proxy auth, 2:ftp_user@ftp_host proxy auth, 3:site command, 4:open command, 5:ftp_user@proxy_user@ftp_host, 6:proxy_user@ftp_host, 7:ftp_user@ftp_host proxy_user",
                        "type": "integer",
                        "format": "int32"
                    },
                    "socksVersion": {
                        "description": "If SOCKS is used, specifies the version of SOCKS protocol Integration Server will use to connect to the proxy server. Valid values are 4 and 5 where the values are mapped as follows:  4:SOCKS v4, 5:SOCKS v5",
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "JMSTriggerOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the JMS trigger.",
                        "type": "string"
                    },
                    "lastError": {
                        "description": "Last error reported for this JMS trigger.",
                        "type": "string"
                    },
                    "state": {
                        "description": "Whether the JMS trigger is enabled, disabled, or suspended.",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the JMS trigger, which can be: Running or Not Running (reason), where reason identifies why the trigger is not running, such as Not Running (trigger disabled).",
                        "type": "string"
                    },
                    "aliasName": {
                        "description": "JMS connection alias that the JMS trigger uses to retreive messages. ",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of JMS trigger, which can be: standard SOAP (SOAP-JMS).",
                        "type": "string"
                    },
                    "acknowledgmentMode": {
                        "description": "How Integration Server acknowledges messages received on behalf of a JMS trigger.",
                        "type": "string"
                    },
                    "executionUser": {
                        "description": "The user whose credentials Integration Server uses when invoking services associated with the JMS trigger.",
                        "type": "string"
                    },
                    "joinExpires": {
                        "description": "Whether the join expires after the time period specified in field expireAfter.",
                        "type": "boolean"
                    },
                    "expiresAfter": {
                        "description": "How long Integration Server waits for the remaining documents in the join. The default join time-out is 1 day. (displayed in milliseconds)",
                        "type": "integer",
                        "format": "int32"
                    },
                    "reuse": {
                        "description": "Whether this element can be dragged from the CentraSite Registry Explorer view to a BPM process or CAF project When this property is set to public, you can drag the asset to a BPM process or CAF project.",
                        "type": "string"
                    },
                    "processingMode": {
                        "description": "Whether the JMS trigger uses a serial or concurrent processing mode.",
                        "type": "string"
                    },
                    "maxExecutionThreads": {
                        "description": "Maximum number of messages that Integration Server can process for the trigger at concurrently.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "connectionCount": {
                        "description": "Nnumber of connections this trigger makes to the JMS provider.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxBatchMessages": {
                        "description": "Maximum number of messages that the trigger service can receive at one time.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxRetryAttempts": {
                        "description": "Maximum number of times Integration Server attempts to re-execute the trigger service.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "retryInterval": {
                        "description": "Number of milliseconds that Integration Server waits between retry attempts.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "onRetryFailure": {
                        "description": "Action that Integration Server uses upon retry failure for an JMS trigger, where 0 specifies \"Throw service exception\" and 1 specifies \"Suspend and retry later\".",
                        "type": "string"
                    },
                    "resourceMonitoringService": {
                        "description": "Service that programmatically checks the availability of resources used by a trigger.",
                        "type": "string"
                    },
                    "exactlyOnceDetectDuplicates": {
                        "description": "Whether exactly-once processing is enabled for the JMS trigger. When enabled, Integration Server checks a message's redelivery count to determine whether the trigger has received the message before.",
                        "type": "boolean"
                    },
                    "exactlyOnceUseHistory": {
                        "description": "Whether a document history database is maintained and used to determine whether a message is a duplicate.",
                        "type": "string"
                    },
                    "exactlyOnceUseHistoryTimeToLive": {
                        "description": "Length of time the document history database maintains an entry for a message processed by the JMS trigger.",
                        "type": "string"
                    },
                    "documentResolverService": {
                        "description": "Service that determines if the message status is New, Duplicate, or In Doubt.",
                        "type": "string"
                    },
                    "maxPrefetchSize": {
                        "description": "Maximum number of messages that are retrieved and cache per request for this trigger. Using pre-fetch cache can speed up the retrieval of messages from webMethods Broker or Universal Messaging.",
                        "type": "string"
                    },
                    "joinType": {
                        "description": "The type of join for a JMS trigger that receives messages from multiple destinations.",
                        "type": "string"
                    },
                    "destinations": {
                        "description": "The list of destinations from which the trigger will receive messages.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JMSDestinationOut"
                        }
                    },
                    "routingRules": {
                        "description": "The list of routing rules that the trigger uses.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JMSRoutingRuleOut"
                        }
                    }
                }
            },
            "CacheOut": {
                "type": "object",
                "properties": {
                    "cacheManagerName": {
                        "description": "Name of the cache manager to which the cache belongs.",
                        "type": "string"
                    },
                    "cacheName": {
                        "description": "Name of the cache.",
                        "type": "string"
                    },
                    "timeToIdleSeconds": {
                        "description": "Seconds an unmodified and unaccessed element will remain in the cache.",
                        "type": "string"
                    },
                    "timeToLiveSeconds": {
                        "description": "Seconds an element will remain in the cache.",
                        "type": "string"
                    },
                    "maxElementsInMemory": {
                        "description": "Maximum number of elements the cache will hold in memory.",
                        "type": "string"
                    },
                    "maxEntriesLocalDisk": {
                        "description": "Maximum number of elements the cache will hold in the local file system.",
                        "type": "string"
                    },
                    "logging": {
                        "description": "Ehcache logging setting.",
                        "type": "boolean"
                    },
                    "clearOnFlush": {
                        "description": "Ehcache clearOnFlush setting.",
                        "type": "boolean"
                    },
                    "copyOnRead": {
                        "description": "Ehcache copyOnRead setting.",
                        "type": "boolean"
                    },
                    "copyOnWrite": {
                        "description": "Ehcache copyOnWrite setting.",
                        "type": "boolean"
                    },
                    "overflowToDisk": {
                        "description": "Whether the cache uses local file system when maxElementsInMemory is exceeded.",
                        "type": "boolean"
                    },
                    "overflowToOffHeap": {
                        "description": "Whether cache uses off-heap memory when maxElementsInMemory is exceeded.",
                        "type": "boolean"
                    },
                    "maxMemoryOffHeap": {
                        "description": "Maximum off-heap memory the cache will use.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "memoryStoreEvictionPolicy": {
                        "description": "Policy to determine which elements are evicted from cache.",
                        "type": "string",
                        "enum": [
                            "LRU",
                            "LFU"
                        ]
                    },
                    "diskExpiryThreadIntervalSeconds": {
                        "description": "The interval between runs of the cache's expiry thread.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "diskPersistent": {
                        "description": "Whether to persist the cache to disk between JVM restarts.",
                        "type": "boolean",
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "diskSpoolBufferSizeMB": {
                        "description": "The amount of memory in megabytes to allocate for the write buffer to the disk.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "eternal": {
                        "description": "Whether the elements in the cache never expire.",
                        "type": "boolean",
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "diskAccessStripes": {
                        "description": "The number of disk access stripes.",
                        "type": "string"
                    },
                    "cacheLoaderTimeoutMillis": {
                        "description": "Timeout in milliseconds for cache loader related calls.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "maxEntriesInCache": {
                        "description": "Maximum number of entries to be held in the cache.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "isInternal": {
                        "description": "Whether cache is used internally by Integration Server. Care should be taken before modifying the configuration of an internal cache.",
                        "type": "boolean"
                    },
                    "cacheManagerAlive": {
                        "description": "Whether cache's cache manager is alive.",
                        "type": "boolean",
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "terracottaConfiguration": {
                        "$ref": "#/components/schemas/TerracottaConfig"
                    }
                }
            },
            "SecurityProviders": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Security provider name",
                        "type": "string"
                    },
                    "version": {
                        "description": "Security provider version",
                        "type": "number",
                        "format": "float"
                    },
                    "KeyStoreTypes": {
                        "description": "Types of keystores used by the security provider",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "UserOut": {
                "type": "object",
                "properties": {
                    "username": {
                        "description": "Username",
                        "type": "string"
                    },
                    "groups": {
                        "description": "Groups to which the user belongs.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enabled": {
                        "description": "Whether the user account is enabled.",
                        "type": "boolean"
                    },
                    "password": {
                        "description": "Password",
                        "type": "string"
                    },
                    "openIDProvider": {
                        "description": "OpenID Provider that authenticates an OpenID Provider user. ",
                        "type": "string"
                    },
                    "allowDigestAuth": {
                        "description": "Whether password digest is allowed as an authentication option.",
                        "type": "boolean"
                    }
                }
            },
            "EmailPortInOut": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "An alias for the port that is unique for this Integration Server.",
                        "type": "string"
                    },
                    "packageName": {
                        "description": "Package with which this port is associated.",
                        "type": "string"
                    },
                    "host": {
                        "description": "Name of the machine on which the IMAP or POP3 mail server is running.",
                        "type": "string"
                    },
                    "user": {
                        "description": "User name that Integration Server must use to log on to the mail server.",
                        "type": "string"
                    },
                    "interval": {
                        "description": "Frequency, in seconds, with which Integration Server checks the mail server for incoming email messages.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of mail server from which the email port will receive requests. Specify IMAP or POP3.",
                        "type": "string",
                        "enum": [
                            "IMAP",
                            "POP3",
                            "imap",
                            "pop3"
                        ]
                    },
                    "serverPort": {
                        "description": "The port on which the mail server listens for requests.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "authentication": {
                        "description": "The type of authentication that Integration Server should use to connect to the specified e-mail server. Select Basic Authentication or OAuth",
                        "type": "string",
                        "enum": [
                            "Basic",
                            "OAuth"
                        ]
                    },
                    "password": {
                        "description": "The password the user name used to log on to the mail server.This field applies only to Basic Authentication.",
                        "type": "string"
                    },
                    "authURL": {
                        "description": "The URL of the endpoint that Integration Server must use to request authorization code.This field applies only to OAuth.",
                        "type": "string"
                    },
                    "clientID": {
                        "description": "The unique public identifier that the OAuth server generates for Integration Server during registration.This field applies only to OAuth.",
                        "type": "string"
                    },
                    "clientSecret": {
                        "description": "The unique string that the OAuth server provides to Integration Server during registration.This field applies only to OAuth.",
                        "type": "string"
                    },
                    "scope": {
                        "description": "The e-mail server access permissions configured for Integration Server during registration. You can specify multiple scopes separated by a space.This field applies only to OAuth.",
                        "type": "string"
                    },
                    "accessTokenURL": {
                        "description": "The URL of the endpoint that Integration Server must use to request an access token from the OAuth server.This field applies only to OAuth.",
                        "type": "string"
                    },
                    "redirectURL": {
                        "description": "The URL that the OAuth server must use to send authentication responses to Integration Server.This field applies only to OAuth.",
                        "type": "string"
                    },
                    "tlsSettings": {
                        "description": "The type of SSL encryption that Integration Server uses when communicating with an email server. You can configure the port to use None , Explicit, or Implicit.",
                        "type": "string",
                        "enum": [
                            "None",
                            "Explicit",
                            "Implicit"
                        ]
                    },
                    "trustStore": {
                        "description": "Alias for the truststore that contains certificates presented by the email server to Integration Server.",
                        "type": "string"
                    },
                    "logout": {
                        "description": "For use with IMAP and multi-threading only. Whether you want your server to log out after checking for mail.",
                        "type": "boolean"
                    },
                    "runAsUser": {
                        "description": "The user name under which requested services are to run.",
                        "type": "string"
                    },
                    "authenticateWithMessage": {
                        "description": "When set to true, Integration Server checks for $user and $pass parameters in the Subject line of the email. The user name is the user under which the service is to run on Integration Server. When set to false, specify the user in the runAsUser field.",
                        "type": "boolean"
                    },
                    "useJSSE": {
                        "description": "Whether the port will be created using the Java Secure Socket Extension.",
                        "type": "boolean"
                    },
                    "globalService": {
                        "description": "The service that you want Integration Server to execute for every email request.",
                        "type": "string"
                    },
                    "defaultService": {
                        "description": "The service that you want Integration Server to execute if the email message does not supply a valid service in the subject line and the globalService field is blank.",
                        "type": "string"
                    },
                    "reply": {
                        "description": "Whether you want Integration Server to send any output that the service generates to the original sender in an email attachment.",
                        "type": "boolean"
                    },
                    "replyOnError": {
                        "description": "Whether you want Integration Server to report errors to the original sender in the body portion of an email.",
                        "type": "boolean"
                    },
                    "remove": {
                        "description": "Whether you want Integration Server to delete a valid email from the IMAP server once Integration Server has successfully received the email.",
                        "type": "boolean"
                    },
                    "deleteInvalid": {
                        "description": "Whether you want Integration Server to delete invalid emails from the IMAP server.",
                        "type": "boolean"
                    },
                    "multiThreaded": {
                        "description": "Whether you want Integration Server to use multiple threads for this port.",
                        "type": "boolean"
                    },
                    "numThreads": {
                        "description": "The number of threads you want Integration Server to use for this port. This field is applicable only if multiThreaded is true.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "invokePerPart": {
                        "description": "Whether Integration Server invokes the service for each part of a multipart message or just once for the entire message.",
                        "type": "boolean"
                    },
                    "includeHeaders": {
                        "description": "Whether Integration Server includes the email headers when passing an email message to the content handler.",
                        "type": "boolean"
                    },
                    "urlEncodedBody": {
                        "description": "Whether the email body contains URL-encoded input parameters to be decoded into IData, placed in the pipeline, and passed to the service.",
                        "type": "boolean"
                    }
                }
            },
            "Terracotta": {
                "type": "object",
                "properties": {
                    "terracottaLicenseFileSet": {
                        "description": "The location of the Terracotta file.",
                        "type": "string"
                    },
                    "isBigMemoryLicensed": {
                        "description": "Whether BigMemory is licensed.",
                        "type": "boolean"
                    },
                    "expirationDate": {
                        "description": "The license expiration date.",
                        "type": "string"
                    },
                    "actionRequired": {
                        "description": "Instructs the user to restart the server when the Terracotta license file is changed.",
                        "type": "string"
                    }
                }
            },
            "CertificateInfo": {
                "type": "object",
                "required": [
                    "subjectCN",
                    "issuerCN",
                    "issuer",
                    "serialNum"
                ],
                "properties": {
                    "subjectCN": {
                        "description": "SubjectCN of the certificate.",
                        "type": "string"
                    },
                    "issuerCN": {
                        "description": "IssuerCN of the certificate.",
                        "type": "string"
                    },
                    "issuer": {
                        "description": "Issuer of the certificate.",
                        "type": "string"
                    },
                    "serialNum": {
                        "description": "Serial number of the certificate.",
                        "type": "string"
                    }
                }
            },
            "List": {
                "type": "object",
                "properties": {
                    
                }
            },
            "MessagingConnectionAliasOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the webMethods messaging connection alias..",
                        "type": "string"
                    },
                    "connected": {
                        "description": "Whether the webMethods messaging connection alias is connected.",
                        "type": "boolean"
                    },
                    "enabled": {
                        "description": "Whether the webMethods messaging connection alias is enabled.",
                        "type": "boolean"
                    },
                    "csqCount": {
                        "description": "The number of messages in the client side queue (CSQ) for this alias.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "description": "The type of webMethods messaging connection alias.",
                        "type": "string"
                    },
                    "hasTriggers": {
                        "description": "Whether the webMethods messaging connection alias has triggers associated with it.",
                        "type": "boolean"
                    },
                    "isUpdated": {
                        "description": "Whether the alias is updated. This is only applicable to an alias of type BROKER.",
                        "type": "boolean"
                    },
                    "lastError": {
                        "description": "The most recent error related to the webMethods messaging connection alias.",
                        "type": "string"
                    },
                    "isDefault": {
                        "description": "Whether this webMethods messaging  connection alias is the default alias.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "A description of this alias.",
                        "type": "string"
                    },
                    "clientPrefix": {
                        "description": "A string that identifies the Integration Server to the webMethods messaging provider (Universal Messaging or Broker).",
                        "type": "string"
                    },
                    "clientPrefixShared": {
                        "description": "Whether Integration Server shares the client prefix with multiple Integration Servers and you want to prevent automatic updates, including deletions, to shared objects associated with this alias on Universal Messaging server or Broker.",
                        "type": "boolean"
                    },
                    "brokerHost": {
                        "description": "Name (DNSname: port or ipaddress: port) of the machine on which the Broker Server resides. Applicable for alias of type BROKER only.",
                        "type": "string"
                    },
                    "brokerName": {
                        "description": "Name of the Broker as defined on the Broker Server. The default name is Broker #1. Applicable for alias of type BROKER only.",
                        "type": "string"
                    },
                    "clientGroup": {
                        "description": "Broker client group to which this Integration Server belongs. Applicable for type BROKER only.",
                        "type": "string"
                    },
                    "clientAuth": {
                        "description": "The type of authentication an Integration Server client will use to connect to the Broker.The value SSL is only applicable for an alias of type BROKER. The value CERTIFICATE_BASED is only applicable for aliases of type UM.",
                        "type": "string"
                    },
                    "user": {
                        "description": "Username for basic authentication.",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password for basic authentication.",
                        "type": "string"
                    },
                    "useCsq": {
                        "description": "Whether a client side queue is used with this Universal Messaging connection alias.Applicable for alias of type UM only.",
                        "type": "boolean"
                    },
                    "csqSize": {
                        "description": "The maximum number of documents (messages) that can exist in the client side queue for this Universal Messaging connection alias.  Leave empty for a value of UNLIMITED. Applicable for alias of type UM only.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "csqDrainInOrder": {
                        "description": "Whether Integration Server drains the client side queue for this alias by sending the messages to the Universal Messaging server in the same order in which Integration Server placed the messages in the client side queue. Applicable for alias of type UM only.",
                        "type": "boolean"
                    },
                    "publishWaitTime": {
                        "description": "Number of milliseconds that a publishing service using this Universal Messaging connection alias will wait for a connection to the Universal Messaging server to be re-established after the connection fails. Applicable for alias of type UM only.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "followTheMasterProducers": {
                        "description": "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to send messages. Applicable for alias of type UM only.",
                        "type": "boolean"
                    },
                    "enableRequestReply": {
                        "description": "Whether a request/reply channel is created for this Universal Messaging connection alias on Universal Messaging and whether a listener for replies is created on Integration Server. Applicable for alias of type UM only.",
                        "type": "boolean"
                    },
                    "followTheMasterConsumers": {
                        "description": "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to retrieve messages. Applicable for alias of type UM only.",
                        "type": "boolean"
                    },
                    "realmUrl": {
                        "description": "The URL for the Universal Messaging server in the format nsp:// UM_host: UM_port (for example, nsp://127.0.0.1:9000 or nsp://localhost:9000). Applicable for type UM only.",
                        "type": "string"
                    },
                    "maxRetryAttempts": {
                        "description": "Maximum number of reconnection attempts that Integration Server makes if the connection to Universal Messaging fails. The default is 5 attempts. Applicable for alias of type UM only.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "loggingType": {
                        "description": "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this messaging connection alias to send and/or receive documents. Applicable for alias of type UM only.",
                        "type": "string"
                    },
                    "enableProducerMessageTracking": {
                        "description": "When set to true, indicates that Integration Server writes additional log messages when a message producer uses this connection alias to publish documents that are instances of the publishable document types listed in producerIncludedStrings. Applicable for alias of type UM only.",
                        "type": "boolean"
                    },
                    "producerIncludedStrings": {
                        "description": "Name of each channel that corresponds to a publishable document type for which Integration Server performs additional logging during publication. Use a semicolon (;) to separate each destination name. A value of [ALL] indicates that Integration Server performs enhanced logging for every channel to which this connection alias sends messages. Applicable for alias of type UM only.",
                        "type": "string"
                    },
                    "enableConsumerMessageTracking": {
                        "description": "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this messaging connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerIncludedStrings. Applicable for alias of type UM only.",
                        "type": "boolean"
                    },
                    "consumerIncludedStrings": {
                        "description": "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this connection alias to receive messages. Applicable for alias of type UM only.",
                        "type": "string"
                    },
                    "keystore": {
                        "description": "The full path to the keystore file for this Integration Server. Applicable for alias of type BROKER only.",
                        "type": "string"
                    },
                    "keystoreType": {
                        "description": "The file type of the keystore file for Integration Server. The file type can be either PKCS12. Applicable for alias of type BROKER only.",
                        "type": "string"
                    },
                    "keystorePassword": {
                        "description": "Password required to access the SSL certificate in the keystore file for Integration Server. Applicable for alias of type BROKER only.",
                        "type": "string"
                    },
                    "encrypted": {
                        "description": "Specifies whether or not to encrypt the connection between the Integration Server and the Broker. Applicable for alias of type BROKER only.",
                        "type": "string"
                    },
                    "truststore": {
                        "description": "The full path to the truststore file for the Integration Server client. Applicable if encrypted is true. Applicable for alias of type BROKER only.",
                        "type": "string"
                    },
                    "truststoreType": {
                        "description": "The file type of the truststore file for Integration Server. The file type is JKS. Applicable if encrypted is true. Applicable for alias of type BROKER only.",
                        "type": "string"
                    },
                    "keystoreAlias": {
                        "description": "The alias for the keystore that contains the client certificates that you want Integration Server to use when connecting to the Universal Messaging port. You must set a keystoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. Applicable for alias of type UM only.",
                        "type": "string"
                    },
                    "keyAlias": {
                        "description": "The alias to the key that contains the private key for connecting to the Universal Messaging port securely. The key alias must be in the keystore specified in field keystoreAlias. Applicable alias of for type UM only.",
                        "type": "string"
                    },
                    "truststoreAlias": {
                        "description": "The alias for the truststore that contains the certificate authority (CA) certificates for the Universal Messaging server. You must set a truststoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. You must also set a truststoreAlias if the protocol specified for Realm URL is nsps or nhps. Applicable for alias of type UM only.",
                        "type": "string"
                    }
                }
            },
            "JDBCDriverAlias": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Alias for the JDBC driver.",
                        "type": "string"
                    },
                    "className": {
                        "description": "Java class name for the JDBC driver.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the JDBC driver alias.",
                        "type": "string"
                    }
                }
            },
            "SalesInformation": {
                "type": "object",
                "properties": {
                    "serialNumber": {
                        "description": "License serial number. ",
                        "type": "integer",
                        "format": "int64"
                    },
                    "licenseKey": {
                        "description": "License key for the license. ",
                        "type": "string"
                    },
                    "customerID": {
                        "description": "Customer ID associated with the license.",
                        "type": "string"
                    },
                    "customerName": {
                        "description": "Customer name on the license.",
                        "type": "string"
                    },
                    "contractDetails": {
                        "description": "Contract details used for delivery.",
                        "type": "string"
                    },
                    "licenseTypeDetails": {
                        "description": "License type, either external or internal.",
                        "type": "string"
                    },
                    "autoCallHome": {
                        "description": "Whether auto call home is activated.",
                        "type": "boolean"
                    }
                }
            },
            "JournalLoggerData": {
                "type": "object",
                "properties": {
                    "CompCode": {
                        "description": "Server logger component code",
                        "type": "string"
                    },
                    "CompDesc": {
                        "description": "Server logger component description",
                        "type": "string"
                    },
                    "Facs": {
                        "description": "Server logger facility codes for the component",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JournalLoggerFacCode"
                        }
                    }
                }
            },
            "HttpPort": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "A unique name that identifies the port.",
                        "type": "string"
                    },
                    "number": {
                        "description": "The port number.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "diagnostic": {
                        "description": "Indicates whether this port is the diagnostic port for Integration Server. Field is present only when true.",
                        "type": "boolean"
                    },
                    "protocol": {
                        "description": "The protocol for the port.",
                        "type": "string",
                        "enum": [
                            "HTTP"
                        ]
                    },
                    "packageName": {
                        "description": "The package associated with the port.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "bindAddress": {
                        "description": "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
                        "type": "string"
                    },
                    "clientAuth": {
                        "description": "The type of authentication used by this port",
                        "type": "string",
                        "enum": [
                            "basic",
                            "digest",
                            "requestKerberos",
                            "requireKerberos"
                        ]
                    },
                    "backlog": {
                        "description": "When the port receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "keepAliveTimeout": {
                        "description": "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
                        "type": "string"
                    },
                    "threadPool": {
                        "description": "Whether the port has its own pool of threads.",
                        "type": "boolean"
                    },
                    "minThread": {
                        "description": "If threadPool is true, the minimum number of threads in the thread pool for the port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxThread": {
                        "description": "If threadPool is true, the maximum number of threads in the thread pool for the port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadPriority": {
                        "description": "If threadPool is true, the priority of the threads in the thread pool.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadsInUse": {
                        "description": "If threadPool is true, the number of threads from the pool that are currently in use.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "delay": {
                        "description": "The number of milliseconds to delay before processing each request received on the port.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "suspended": {
                        "description": "Indicates whether the port is suspended. If false, the port is accepting requests.",
                        "type": "boolean"
                    },
                    "kerberos": {
                        "$ref": "#/components/schemas/KerberosSettings"
                    },
                    "ipAccess": {
                        "$ref": "#/components/schemas/IPAccess"
                    },
                    "resourceAccess": {
                        "$ref": "#/components/schemas/ResourceAccess"
                    },
                    "message": {
                        "description": "Information about the operation that just completed.",
                        "type": "string"
                    }
                }
            },
            "CertificateDetail": {
                "type": "object",
                "properties": {
                    "version": {
                        "description": "Version of the certificate.",
                        "type": "string"
                    },
                    "serialNum": {
                        "description": "Serial number of the certificate.",
                        "type": "string"
                    },
                    "signature": {
                        "description": "Signature used in the certificate.",
                        "type": "string"
                    },
                    "subjectPublicKeyAlgorithm": {
                        "description": "Public-key algorithm used in the certificate.",
                        "type": "string"
                    },
                    "issuer": {
                        "$ref": "#/components/schemas/Map"
                    },
                    "validity": {
                        "$ref": "#/components/schemas/Map"
                    },
                    "subject": {
                        "$ref": "#/components/schemas/Map"
                    }
                }
            },
            "HealthIndicatorProperty": {
                "type": "object",
                "properties": {
                    "propertyName": {
                        "description": "Property name.",
                        "type": "string",
                        "enum": [
                            "threshold"
                        ]
                    },
                    "displayName": {
                        "description": "Descriptive, display name of the property.",
                        "type": "string"
                    },
                    "value": {
                        "description": "Property value. For the threshold property for the health indicator \"Cluster\", use a positive integer as the value. For all other health indicators, use an integer value from 1 to 99.",
                        "type": "string"
                    }
                }
            },
            "LoginAttemptFrequency": {
                "type": "object",
                "properties": {
                    "loginCount": {
                        "description": "Number of incorrect login attempts allowed during the specified timeDuration before Integration Server locks the account.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "timeDuration": {
                        "$ref": "#/components/schemas/TimeDuration"
                    }
                }
            },
            "PackageInfoOut": {
                "type": "object",
                "properties": {
                    "packageName": {
                        "description": "Name of the package.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Indicates whether the package is enabled.",
                        "type": "boolean"
                    },
                    "loadok": {
                        "description": "Number of elements that loaded successfully.",
                        "type": "string"
                    },
                    "loaderr": {
                        "description": "Number of elements that generated errors and could not be loaded when the package was installed or relaoded. ",
                        "type": "string"
                    },
                    "loadwarning": {
                        "description": "Number of elements that generated warnings when the package was installed or reloaded.",
                        "type": "string"
                    },
                    "startupServices": {
                        "description": "A list of startup services.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "shutdownServices": {
                        "description": "A list of shutdown services.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "replicationServices": {
                        "description": "A list of replication services.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "version": {
                        "description": "Version of the package.",
                        "type": "string"
                    },
                    "build": {
                        "description": "Build number of the package.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the package.",
                        "type": "string"
                    },
                    "patch_nums": {
                        "description": " A list of patches that have been applied to this release of the package, if this information was provided by the package publisher.",
                        "type": "string"
                    },
                    "jvm_version": {
                        "description": "Minimum version of the JVM required to run this package.",
                        "type": "string"
                    },
                    "publisher": {
                        "description": "Publisher of the package.",
                        "type": "string"
                    },
                    "time": {
                        "description": "Time that the package release was created.",
                        "type": "string"
                    },
                    "listACL": {
                        "description": "Access Control List assigned to the package.",
                        "type": "string"
                    },
                    "patchlist": {
                        "$ref": "#/components/schemas/PackagePatchList"
                    },
                    "loadedWithWarnings": {
                        "description": "A list of services that generated warnings when the package was installed.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notLoaded": {
                        "description": "A list of services that generated errors and could not be loaded onto the server when the package was installed.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "successors": {
                        "description": "Packages that depend on this package.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "predecessors": {
                        "description": "Packages on which this package depends.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subscribers": {
                        "description": "List of other webMethods Integration Servers that subscribe to this package.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "message": {
                        "description": "Status response message returned from internal service that retrieves package information.",
                        "type": "string"
                    },
                    "code": {
                        "description": "Status response code returned from internal service that retrieves package information.",
                        "type": "string"
                    }
                }
            },
            "KerberosSettings": {
                "type": "object",
                "properties": {
                    "jaasContext": {
                        "description": "The custom JAAS context used for Kerberos authentication.",
                        "type": "string"
                    },
                    "clientPrincipal": {
                        "description": "The principal to use for Kerberos authentication.",
                        "type": "string"
                    },
                    "clientPassword": {
                        "description": "The password for the principal used for Kerberos authentication.",
                        "type": "string"
                    },
                    "servicePrincipalForm": {
                        "description": "Displays username, which indicates that the principal name of the service is represented as a named user defined in the LDAP or central user directory used for authentication.",
                        "type": "string"
                    },
                    "servicePrincipal": {
                        "description": "Specifies the service that the Kerberos client wants to access.",
                        "type": "string"
                    }
                }
            },
            "RemoteServerData": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "Name of the alias.",
                        "type": "string"
                    },
                    "host": {
                        "description": "Host Name or IP address of the remote server. ",
                        "type": "string"
                    },
                    "port": {
                        "description": "Port number to which requests will be sent on the remote server. ",
                        "type": "integer",
                        "format": "int32"
                    },
                    "user": {
                        "description": "User name for submitting requests. ",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password for user account. ",
                        "type": "string"
                    },
                    "ssl": {
                        "description": "Whether to use SSL to connect to the remote server. ",
                        "type": "boolean"
                    },
                    "keystoreAlias": {
                        "description": "Keystore alias for the keystore containing the private keys and certificates used for authentication with the remote server. ",
                        "type": "string"
                    },
                    "keyAlias": {
                        "description": "Key alias for a private key and associated certificate chain. ",
                        "type": "string"
                    },
                    "acl": {
                        "description": "Execute ACL that determines which user groups can use the remote server alias. ",
                        "type": "string"
                    },
                    "keepAlive": {
                        "description": "Maximum number of client keep alive connections that can be retained for reuse with the remote server. ",
                        "type": "integer",
                        "format": "int32"
                    },
                    "timeout": {
                        "description": "Keep alive timeout (minutes) for an idle connection to the remote server.",
                        "type": "number",
                        "format": "float"
                    },
                    "retryServer": {
                        "description": "Host name or IP address of a remote server to connect to if the local Integration Server cannot connect to primary remote server. ",
                        "type": "string"
                    }
                }
            },
            "JournalLoggerFacCode": {
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Facility code.",
                        "type": "string"
                    },
                    "id": {
                        "description": "Facility code ID used in server log, such as ISS, ISP, or ISC.",
                        "type": "string"
                    },
                    "desc": {
                        "description": "Facility code description.",
                        "type": "string"
                    },
                    "threshold": {
                        "description": "Facility code logging level.",
                        "type": "string"
                    }
                }
            },
            "TerracottaConfig": {
                "type": "object",
                "properties": {
                    "clustered": {
                        "description": "Whether the cache is clustered.",
                        "type": "boolean"
                    },
                    "consistency": {
                        "description": "The cache's consistency policy",
                        "type": "string",
                        "enum": [
                            "EVENTUAL",
                            "STRONG"
                        ]
                    },
                    "synchronousWrites": {
                        "description": "Whether writes to the cache are performed synchronously.",
                        "type": "boolean"
                    },
                    "nonStopConfiguration": {
                        "$ref": "#/components/schemas/NonStopConfiguration"
                    }
                }
            },
            "InternalServerPortPostOut": {
                "type": "object",
                "properties": {
                    "packageName": {
                        "description": "The packages associated with the port.",
                        "type": "string"
                    },
                    "portID": {
                        "description": "A unique ID for the port created by Integration Server by combining enterpriseGatewayHost and enterpriseGatewayPort.",
                        "type": "string"
                    },
                    "alias": {
                        "description": "An alias for the port that is unique for this Integration Server.",
                        "type": "string"
                    },
                    "protocol": {
                        "description": "Port protocol.",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Whether this Internal Server port is enabled.",
                        "type": "boolean"
                    },
                    "enterpriseGatewayHost": {
                        "description": "The host name or IP address of the machine on which\r\nEnterprise Gateway Server is running.",
                        "type": "string"
                    },
                    "enterpriseGatewayPort": {
                        "description": "The registration port on Enterprise Gateway Server.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxConnection": {
                        "description": "The number of connections maintained between Enterprise\r\nGateway Server and the Internal Server.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "clientAuth": {
                        "description": "basic, digest, requestKerberos, requireKerberos, requestClientCertification, requireClientCertification",
                        "type": "string"
                    },
                    "threadPool": {
                        "description": "Whether the port has its own pool of threads.",
                        "type": "boolean"
                    },
                    "minimumThreads": {
                        "description": "if threadpool is true, the minimum number of threads in the thread pool for the port. ",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maximumThreads": {
                        "description": "if threadpool is true, the maximum number of threads in the thread pool for the port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadPriority": {
                        "description": "if threadpool is true, the priority of threads in the thread pool.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "username": {
                        "description": "The name of the user on Enterprise Gateway Server that\r\nthe Internal Server should connect as.",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password of the user on Enterprise Gateway Server\r\nthat the Internal Server should connect as.",
                        "type": "string"
                    },
                    "useJSSE": {
                        "description": "Whether the port will be created using the Java Secure Socket Extension.",
                        "type": "boolean"
                    },
                    "keyAlias": {
                        "description": "Key alias for the private key associated with the keystore alias.",
                        "type": "string"
                    },
                    "keyStore": {
                        "description": "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
                        "type": "string"
                    },
                    "trustStore": {
                        "description": "Truststore alias for the truststore that contains the trusted root of a certificate or\r\n\r\nsigning authority (CA).",
                        "type": "string"
                    },
                    "kerberosSettings": {
                        "description": "The Kerberos settings for the port. This field is present when clientAuth is \"requestKerberos\" or \"requireKerberos\".",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KerberosSettings"
                        }
                    },
                    "resourceAccess": {
                        "$ref": "#/components/schemas/ResourceAccess"
                    }
                }
            },
            "ProductInformation": {
                "type": "object",
                "properties": {
                    "expirationDate": {
                        "description": "The date the license expires.",
                        "type": "string"
                    },
                    "operatingSystem": {
                        "description": "Operating systems on which Integration Server is licensed to run .",
                        "type": "string"
                    },
                    "productCode": {
                        "description": "Software AG code for the product: PIE.",
                        "type": "string"
                    },
                    "productName": {
                        "description": "Name of product.",
                        "type": "string"
                    },
                    "productVersion": {
                        "description": "Version of product.",
                        "type": "number",
                        "format": "float"
                    },
                    "usage": {
                        "description": "The environment on which the licensed server will be used. For example Production.",
                        "type": "string"
                    },
                    "renewalDate": {
                        "description": "Renewal date which is the expirationDate minus 28 days.",
                        "type": "string"
                    },
                    "higherLevPosNr": {
                        "description": "Higher level Pos. Nr., if license key is for bundled component.",
                        "type": "string"
                    },
                    "higherLevProdCode": {
                        "description": "Higher level product code, if license key is for bundled component.",
                        "type": "string"
                    },
                    "higherLevProdName": {
                        "description": "Name of bundle, if license key is for bundled component.",
                        "type": "string"
                    }
                }
            },
            "MQTTTriggerOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the MQTT trigger.",
                        "type": "string"
                    },
                    "packageName": {
                        "description": "Package to which the MQTT trigger belongs.",
                        "type": "string"
                    },
                    "aliasName": {
                        "description": "The MQTT connection alias that the MQTT trigger uses to retrieve messages.",
                        "type": "string"
                    },
                    "topic": {
                        "description": "The topic to which the MQTT trigger is subscribed.",
                        "type": "string"
                    },
                    "qos": {
                        "description": "Descriptive value of the quality of service of the MQTT trigger.",
                        "type": "string"
                    },
                    "serviceName": {
                        "description": "Service that is invoked when the MQTT trigger receives a message.",
                        "type": "string"
                    },
                    "decodingType": {
                        "description": "Type indicating how Integration Server decodes the payload of the MQTT message when placing it in the input pipeline for the trigger service.",
                        "type": "string"
                    },
                    "state": {
                        "description": "Whether the MQTT trigger is enabled, disabled, or suspended.",
                        "type": "string"
                    },
                    "acknowledgmentMode": {
                        "description": "How Integration Server acknowledges messages received on behalf of a MQTT trigger.",
                        "type": "string"
                    },
                    "executionUser": {
                        "description": "Descriptor that indicates which credentials Integration Server should use when invoking services associated with the MQTT trigger.",
                        "type": "string"
                    },
                    "maxExecutionThreads": {
                        "description": "Maximum number of messages that Integration Server can process for the trigger concurrently.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "queueCapacity": {
                        "description": "Maximum number of messages that the MQTT trigger queue can contain.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxRetryAttempts": {
                        "description": "Maximum number of times Integration Server attempts to re-execute the trigger service.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "retryInterval": {
                        "description": "Number of milliseconds that Integration Server waits between retry attempts.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "onRetryFailure": {
                        "description": "Action that Integration Server takes upon retry failure for an MQTT trigger, where 0 specifies \"Throw service exception\" and 1 specifies \"Suspend and retry later\".",
                        "type": "string"
                    },
                    "resourceMonitoringService": {
                        "description": "A service that checks the availability of resources used by a trigger.",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the MQTT trigger, which can be Running or Not Running (reason) where reason identifies why the trigger is not running, such as Not Running (Connection Alias Not Running).",
                        "type": "string"
                    },
                    "currentQueueSize": {
                        "description": "Current number of messages in the local trigger queue.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "currentThreadCount": {
                        "description": "Current number of server threads processing messages for this MQTT trigger.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "lastError": {
                        "description": "The most recent error associated with the MQTT trigger.",
                        "type": "string"
                    }
                }
            },
            "MessagingConditionOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the condition in the webMethods messaging trigger.",
                        "type": "string"
                    },
                    "service": {
                        "description": "Name of the service that Integration Server invokes when it receives documents that satisfy the trigger condition.",
                        "type": "string"
                    },
                    "joinType": {
                        "description": "The join type for the trigger condition. This field displays N/A if the trigger condition specifies only one publishable document type.",
                        "type": "string"
                    },
                    "documentTypes": {
                        "description": "All the publishable document types used within this condition.",
                        "type": "string"
                    },
                    "conditionDetails": {
                        "description": "The details for this condition.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingConditionDetailsOut"
                        }
                    }
                }
            },
            "AuditLoggerCategories": {
                "type": "object",
                "properties": {
                    "categoryName": {
                        "description": "Security category name.",
                        "type": "string"
                    },
                    "isEnable": {
                        "description": "Whether the security logger will log security-related events for the category. ",
                        "type": "boolean"
                    }
                }
            },
            "JWTIssuer": {
                "type": "object",
                "properties": {
                    "issuer": {
                        "description": "Name of trusted issuer.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description for trusted issuer.",
                        "type": "string"
                    },
                    "maxIssuerSkew": {
                        "description": "Maximum number of seconds by which the JWT issuer and Integration Server clocks can differ and still allow JWT expiry (exp) and not before (nbf) validations to succeed.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "issuerCertificateMappings": {
                        "description": "List of all issuer-certificate mappings.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuerCertMappingsData"
                        }
                    }
                }
            },
            "EnterpriseGatewayPortOut": {
                "type": "object",
                "properties": {
                    "externalPort": {
                        "$ref": "#/components/schemas/EGExternalPortOut"
                    },
                    "registrationPort": {
                        "$ref": "#/components/schemas/EGRegPortOut"
                    }
                }
            },
            "LicenseInformation": {
                "type": "object",
                "properties": {
                    "priceUnit": {
                        "description": "The number of core processors per CPU that this Integration Server is licensed to run on.",
                        "type": "string"
                    },
                    "priceQuantity": {
                        "description": "The number of CPUs that this Integration Server is licensed to run on.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "typeOfInstallation": {
                        "description": "Environment used for the installation. For example, Production. ",
                        "type": "string"
                    },
                    "licenseType": {
                        "description": "Whether the license type is Standard or Limited.",
                        "type": "string"
                    },
                    "extendedRights": {
                        "description": "Shows what the extnded right are. For example, Virtual Machine",
                        "type": "string"
                    },
                    "licenseVersion": {
                        "description": "Version number of the license.",
                        "type": "number",
                        "format": "float"
                    },
                    "metering": {
                        "description": "Indicates if license is metered, and if yes, what kind of metering.",
                        "type": "string"
                    }
                }
            },
            "EGExternalPortOut": {
                "type": "object",
                "properties": {
                    "backlog": {
                        "description": "When the port receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "keepAliveTimeout": {
                        "description": "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "threadPool": {
                        "description": "Indicates whether the port has its own pool of threads.",
                        "type": "boolean"
                    },
                    "minThread": {
                        "description": "If threadPool is true, the minimum number of threads in the thread pool for the port. ",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxThread": {
                        "description": "If threadPool is true, the maximum number of threads in the thread pool for the port. ",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadPriority": {
                        "description": "If threadPool is true, the priority of the threads in the thread pool.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadsInUse": {
                        "description": "If threadPool is true, the number of threads from the pool that are currently in use.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "kerberosSettings": {
                        "$ref": "#/components/schemas/KerberosSettings"
                    },
                    "alias": {
                        "description": "A unique name that identifies the port",
                        "type": "string"
                    },
                    "number": {
                        "description": "The port number",
                        "type": "integer",
                        "format": "int32"
                    },
                    "packageName": {
                        "description": "The package the port is associated with",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "protocol": {
                        "description": "The port's protocol",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "HTTPS"
                        ]
                    },
                    "enabled": {
                        "description": "Indicates whether the port is enabled, that is, currently accepting requests.",
                        "type": "boolean"
                    },
                    "bindAddress": {
                        "description": "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
                        "type": "string"
                    },
                    "clientAuth": {
                        "description": "The type of authentication used by this port",
                        "type": "string"
                    },
                    "useJSSE": {
                        "description": "Whether the port will be created using the Java Secure Socket Extension.",
                        "type": "boolean"
                    },
                    "keyAlias": {
                        "description": "Specifies a text identifier for the keystore, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component",
                        "type": "string"
                    },
                    "keyStore": {
                        "description": "Specifies a text identifier for the private key associated with the keystore alias",
                        "type": "string"
                    },
                    "trustStore": {
                        "description": "Specifies a text identifier for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
                        "type": "string"
                    },
                    "ipAccess": {
                        "$ref": "#/components/schemas/IPAccess"
                    }
                }
            },
            "InternalServerPortLink": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "The port alias.",
                        "type": "string"
                    },
                    "portID": {
                        "description": "A unique ID for the port created by Integration Server by combining enterpriseGatewayHost and enterpriseGatewayPort.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL for the port.",
                        "type": "string"
                    }
                }
            },
            "Map": {
                "type": "object",
                "properties": {
                    
                }
            },
            "Link": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the link",
                        "type": "string"
                    },
                    "url": {
                        "description": "URL of the link",
                        "type": "string"
                    }
                }
            },
            "JMSDestinationOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the destination from which the JMS trigger receives messages.",
                        "type": "string"
                    },
                    "destinationType": {
                        "description": "Type of destination.",
                        "type": "string"
                    },
                    "messageSelector": {
                        "description": "An expression used to receive a subset of messages from this destination.",
                        "type": "string"
                    },
                    "durableSubscriberName": {
                        "description": "Name of the durable subscriber associated with this destination.",
                        "type": "string"
                    },
                    "ignoreLocallyPublished": {
                        "description": "Whether the JMS the trigger ignores messages sent using the same JMS connection alias as the JMS trigger.",
                        "type": "boolean"
                    }
                }
            },
            "AuditLoggerData": {
                "type": "object",
                "properties": {
                    "loggerName": {
                        "description": "Name of audit logger.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Whether the audit logger is enabled.",
                        "type": "boolean"
                    },
                    "licensed": {
                        "description": "Whether the audit logger is licensed for this Integration Server/",
                        "type": "boolean"
                    },
                    "database": {
                        "description": "Whether the audit logger writes to a database instead of a file.",
                        "type": "boolean"
                    },
                    "asynchronous": {
                        "description": "Whether the audit Logger is asynchronous.",
                        "type": "boolean"
                    },
                    "guaranteed": {
                        "description": "Whether the audit logger keeps the internal queue on disk.",
                        "type": "boolean"
                    },
                    "maxQueueSize": {
                        "description": "Maximum number of log entries for the internal queue.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxRetries": {
                        "description": "Maximum times the audit logger should retry writing the entry to the destination if the first attempt fails because of a transient error.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "retryWait": {
                        "description": "Number of seconds the audit logger waits between tries to connect to the database. ",
                        "type": "integer",
                        "format": "int64"
                    },
                    "hasLevel": {
                        "description": "Whether the audit logger has a log level that can be updated.",
                        "type": "boolean"
                    },
                    "level": {
                        "description": "The log level for the audit logger. This applies to the messaging audit logger. ",
                        "type": "string"
                    },
                    "hasSecurity": {
                        "description": "Whether the audit logger is the security audit logger.",
                        "type": "boolean"
                    },
                    "hasMessaging": {
                        "description": "Whether the audit Logger is the messaging audit logger.",
                        "type": "boolean"
                    },
                    "canDisable": {
                        "description": "Whether the audit logger can be disabled.",
                        "type": "boolean"
                    },
                    "dBAllowed": {
                        "description": "Whether the audit logger can write to a database.",
                        "type": "boolean"
                    },
                    "fSAllowed": {
                        "description": "Whether the audit logger can write to the file system.",
                        "type": "boolean"
                    },
                    "connectionAlias": {
                        "description": "Universal Messaging connection alias the audit logger uses to write to the audit logging queue on Universal Messaging.",
                        "type": "string"
                    },
                    "queueType": {
                        "description": "Whether the audit logging queue for the audit logger is an internal, light-weight queue or a Universal Messaging queue.",
                        "type": "string"
                    },
                    "readerThreads": {
                        "description": "Number of threads that Integration Server uses to retrieve log entries from the Universal Messaging queue and then write the log entries to the audit logger destination.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "securityCategories": {
                        "description": "Security actions for which to log security-related events. ",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditLoggerCategories"
                        }
                    },
                    "result": {
                        "description": "Whether the security audit logger generates audit data for a security even upon success, failure, or both.",
                        "type": "string"
                    },
                    "startup": {
                        "description": "Whether the security audit logger writes security events that occur during Integration Server startup.",
                        "type": "string"
                    },
                    "logLevel": {
                        "description": "The logging level for the messaging audit logger.",
                        "type": "string"
                    }
                }
            },
            "IntegrationServer": {
                "type": "object",
                "properties": {
                    "productCode": {
                        "description": "Software AG code for this product: PIE.",
                        "type": "string"
                    },
                    "productVersion": {
                        "description": "Software AG product version number.",
                        "type": "number",
                        "format": "float"
                    },
                    "concurrentSessions": {
                        "description": "Maximum number of concurrent sessions licensed for the server.",
                        "type": "string"
                    },
                    "clustering": {
                        "description": "Whether clustering is licensed. ",
                        "type": "boolean"
                    },
                    "publishOrSubscribe": {
                        "description": "Whether publish-subscribe is licensed.",
                        "type": "boolean"
                    },
                    "adapterRuntime": {
                        "description": "Whether the Adapter Runtime is licensed.",
                        "type": "boolean"
                    },
                    "remoteInvoke": {
                        "description": "Whether remote invoke is licensed.",
                        "type": "boolean"
                    },
                    "guaranteedDelivery": {
                        "description": "Whether guaranteed delivery is licensed.",
                        "type": "boolean"
                    },
                    "securityAuditing": {
                        "description": "Whether security auditing is licensed.",
                        "type": "boolean"
                    },
                    "distributedCache": {
                        "description": "Whether a distributed cache is licensed.",
                        "type": "boolean"
                    },
                    "enterpriseGateway": {
                        "description": "Whether Enterprise Gateway is licensed.",
                        "type": "boolean"
                    },
                    "microservices": {
                        "description": "Whether Microservices is licensed.",
                        "type": "boolean"
                    }
                }
            },
            "EnterpriseGatewayPortLink": {
                "type": "object",
                "properties": {
                    "externalPort": {
                        "$ref": "#/components/schemas/PortLink"
                    },
                    "registrationPort": {
                        "$ref": "#/components/schemas/PortLink"
                    }
                }
            },
            "HealthGauge": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Health indicator name.",
                        "type": "string",
                        "enum": [
                            "Adapters",
                            "JDBC",
                            "JMS",
                            "JNDIAliases",
                            "RemoteServers",
                            "SFTPServers",
                            "UMAliases",
                            "Cluster",
                            "Diskspace",
                            "Memory",
                            "ServiceThread",
                            "Sessions"
                        ]
                    },
                    "enabled": {
                        "description": "Whether the health indicator is enabled.",
                        "type": "boolean",
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "properties": {
                        "description": "Health indicator properties.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HealthIndicatorProperty"
                        }
                    }
                }
            },
            "KeystoreOut": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "Alias for the keystore file.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the keystore alias.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Certificate file format of the keystore file.",
                        "type": "string"
                    },
                    "provider": {
                        "description": "Provider that is used for the keystore.",
                        "type": "string"
                    },
                    "location": {
                        "description": "Location of the keystore file on the server. This can be the full pathname or a relative path in relation to the Integration Server.",
                        "type": "string"
                    },
                    "isHsm": {
                        "description": "Whether the keystore is stored on a Hardware Security Module (HSM) device.",
                        "type": "string",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    "configuredKeyAliases": {
                        "$ref": "#/components/schemas/List"
                    }
                }
            },
            "JMSConnectionAliasOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the JMS alias.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Whether the JMS connection alias is enabled.",
                        "type": "boolean"
                    },
                    "connected": {
                        "description": "Whether the JMS connection alias is connected.",
                        "type": "boolean"
                    },
                    "hasTriggers": {
                        "description": "Indicates if any JMS triggers use this JMS connection alias.",
                        "type": "boolean"
                    },
                    "csqCount": {
                        "description": "Current number of messages in the client side queue (CSQ) for this JMS connection alias.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": {
                        "description": "A description of the JMS connection alias.",
                        "type": "string"
                    },
                    "transactionType": {
                        "description": "Type of transaction for sessions that use this JMS connection alias.",
                        "type": "string"
                    },
                    "clientID": {
                        "description": "Client identifier associated with the connections established by this JMS connection alias.",
                        "type": "string"
                    },
                    "user": {
                        "description": "User name required to acquire a connection from the connection factory.",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password required to acquire a connection from the connection factory.",
                        "type": "string"
                    },
                    "createConnectionUsing": {
                        "description": "How administered objects (connection factories and destinations) will be looked up.",
                        "type": "string"
                    },
                    "jndiAliasName": {
                        "description": "Alias to the JNDI provider that the JMS connection alias uses to look up administered objects. This field applies only when createConnectionUsing is JNDI_LOOKUP.",
                        "type": "string"
                    },
                    "connectionFactoryLookupName": {
                        "description": "Lookup name for the connection factory that you want to use to create a connection to the JMS provider specified in this JMS connection alias. This field applies only when createConnectionUsing is JNDI_LOOKUP.",
                        "type": "string"
                    },
                    "createAdministeredObjectsOnDemand": {
                        "description": "Whether Integration Server creates a connection factory or destination on the JNDI provider if the object is not found at the time Integration Server looks up the object. This field applies only when the JMS provider is Universal Messaging.",
                        "type": "boolean"
                    },
                    "enableFollowTheMaster": {
                        "description": "Whether Integration Server always connects to the master realm server in the Universal Messaging cluster. This setting affects producer and consumer connections created using this JMS connection alias.",
                        "type": "boolean"
                    },
                    "monitorWmConnectionFactory": {
                        "description": "How Integration Server monitors the webMethods connection factory object on the JNDI server for changes where NONE means no monitoring is done, CLIENT_POLL corresponds to specifying an interval for poll changes (connectionFactoryPollInterval) , JNDI_POLL corresponds to polling for changes with an interval defined by webMethods Connection Factory , and LISTENER corresponds to monitoring the connection factory by registering an event listener. This field applies only when createConnectionUsing value is JNDI_LOOKUP and Broker is the JMS provider.",
                        "type": "string"
                    },
                    "connectionFactoryPollingInterval": {
                        "description": "Number of minutes between polling attempts. The polling interval must be a positive integer. This field is required when monitorWmConnectionFactory is set to CLIENT_POLL. This field applies only when createConnectionUsing value is JNDI_LOOKUP and Broker is the JMS provider.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "brokerHost": {
                        "description": "Name (DNSname:port or ipaddress:port) of the machine on which the Broker Server acting as the JMS provider resides. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "brokerName": {
                        "description": "Name of the Broker as defined on the Broker Server. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "clientGroup": {
                        "description": "Name of the client group to which you want Integration Server to belong when it acts as a JMS client. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "brokerList": {
                        "description": "Comma-delimited list of Broker Servers on which the connection between the Integration Server (acting as the JMS client) and the webMethods Broker can exist. Use the following format: {Broker Name]@<host>[:port]. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "keystore": {
                        "description": "Full path to this Integration Server's keystore file. The keystore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "keystoreType": {
                        "description": "File type of the Integration Server's keystore file. The keystoreType is required only when configuring an SSL connection to the Broker This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "truststore": {
                        "description": "The full path to this Integration Server client's trust store file. The trustore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "trustoreType": {
                        "description": "The file type of the Integration Server's trust store file, which is JKS. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "encrypted": {
                        "description": "Whether the connection between the Integration Server and the Broker is encrypted. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
                        "type": "boolean"
                    },
                    "classLoader": {
                        "description": "Name of the class loader used with this JMS connection alias.",
                        "type": "string"
                    },
                    "maximumCsqSize": {
                        "description": "Maximum number of messages that can exist in the client side queue for this JMS connection alias. A value of -1 indicates there is no limit.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "csqDrainInOrder": {
                        "description": "Whether Integration Server drains the client side queue by sending the messages to the JMS provider in the same order in which Integration Server placed the messages in the client side queue.",
                        "type": "boolean"
                    },
                    "createTemporaryQueue": {
                        "description": "Whether Integration Server creates a temporary queue on the JMS provider to handle request-reply operations that do not specify a replyTo destination.",
                        "type": "boolean"
                    },
                    "enableRequestReplyListener": {
                        "description": "Whether Integration Server creates a single dedicated MessageConsumer for receiving synchronous replies sent to the temporary queue for this JMS connection alias.",
                        "type": "boolean"
                    },
                    "manageDestinations": {
                        "description": "Whether users can use Designer to modify Destinations on Broker or Universal Messaging",
                        "type": "boolean"
                    },
                    "createNewConnectionPerTrigger": {
                        "description": "Whether Integration Server creates a separate connection to the JMS provider for each trigger.",
                        "type": "boolean"
                    },
                    "producerCachingMode": {
                        "description": "Whether caching of JMS Session and MessageProducer objects is enabled for this JMS connection alias.",
                        "type": "string"
                    },
                    "minPoolSizePerUnspecifiedDestination": {
                        "description": "The minimum number of entries (JMS Session objects) for the default session pool.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxPoolSizePerUnspecifiedDestination": {
                        "description": "The maximum number of entries (JMS Session objects) for the default session pool.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "minPoolSizePerDestination": {
                        "description": "The minimum number of entries (Message Producers) in each destination-specific pool.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxPoolSizePerDestination": {
                        "description": "The maximum number of entries in each destination-specific pool. A value of 0 (or blank) indicates that Integration Server does not create separate pools for any of the destinations.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "cacheProducersQueueList": {
                        "description": "A semicolon-delimited list of the queues for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API. ",
                        "type": "string"
                    },
                    "destinationLookupNames": {
                        "description": "A semicolon delimited list of the lookup names for the destinations for which Integration Server creates destination pools. This field applies only when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing value is JNDI_LOOKUP.",
                        "type": "string"
                    },
                    "cacheProducersTopicList": {
                        "description": "A semicolon-delimited list of the topics for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API.",
                        "type": "string"
                    },
                    "idleTimeout": {
                        "description": "The number of milliseconds before an inactive pool entry will be removed from the pool. This setting applies to the default pool as well as each destination specific pool.\nA value of 0 indicates that pool entries never expire. A value of -1 indicates the system default will be used. The system default is defined by setting watt.server.jms.producer.pooledSession.timeout which has a default value of 60000 ms.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "producerMaxRetryAttempts": {
                        "description": "The maximum number of times Integration Server automatically retries a pub.jms:send service that fails because of a transient error. Set to 0 to disable automatic retry for implementations of the pub.jms:send service that use this JMS connection alias.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "producerRetryInterval": {
                        "description": "The number of milliseconds that Integration Server waits between attempts to retry a pub.jms:send service that uses this JMS connection alias.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "loggingType": {
                        "description": "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this JMS connection alias to send and/or receive messages.",
                        "type": "string"
                    },
                    "enableProducerMessageTracking": {
                        "description": "Whether Integration Server writes additional log messages when a message producer uses this JMS connection alias to send messages to a destination in producerIncludedStrings.",
                        "type": "boolean"
                    },
                    "producerIncludedStrings": {
                        "description": "The destination names for which Integration Server performs additional logging when sending messages to the destination. Use a semicolon (;) to separate each destination name. A value of [ALL] indicates that Integration Server performs enhanced logging for every destination to which this JMS connection alias sends messages.",
                        "type": "string"
                    },
                    "enableConsumerMessageTracking": {
                        "description": "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this JMS connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerMessageIncludedStrings",
                        "type": "boolean"
                    },
                    "consumerIncludedStrings": {
                        "description": "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this JMS connection alias to receive messages.",
                        "type": "string"
                    }
                }
            },
            "MessagingTriggerOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the webMethods messaging trigger.",
                        "type": "string"
                    },
                    "aliasName": {
                        "description": "Name of the messaging connection alias used by the webMethods messaging trigger.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Indicates the webMethods messaging provider used with the messaging connection alias. The Type can be Broker or Universal Messaging.",
                        "type": "string"
                    },
                    "lastError": {
                        "description": "Last error reported for this webMethods messaging trigger.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Whether the trigger is enabled.",
                        "type": "boolean"
                    },
                    "joinExpiresAfter": {
                        "description": "Number of millieseconds that Integration Server waits for the remaining documents in the join condition.",
                        "type": "string"
                    },
                    "queueCapacity": {
                        "description": "Current maximum capacity for the trigger queue. If the current queue capacity is different from the configured queue capacity (that is, the Queue Capacity Throttle is set to less than 100%), the configured queue capacity is displayed in parenthesis.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "queueRefillLevel": {
                        "description": "Current refill level for the trigger queue. If the current refill level is different from the configured refill level (that is, the Queue Capacity Throttle is set to less than 100%), the configured refill level is displayed in parenthesis.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "ackQueueSize": {
                        "description": "Maximum number of pending document acknowledgements for this trigger.",
                        "type": "string"
                    },
                    "maxRetryAttempts": {
                        "description": "Maximum number of times Integration Servercan re-execute the trigger service if the trigger service fails because of an ISRuntimeException",
                        "type": "integer",
                        "format": "int32"
                    },
                    "retryInterval": {
                        "description": "Number of milliseconds that Integration Server waits between attempts to re-execute the trigger service",
                        "type": "integer",
                        "format": "int32"
                    },
                    "onRetryFailure": {
                        "description": "How Integration Server handles retry failure for this trigger.",
                        "type": "string"
                    },
                    "resourceMonitoringService": {
                        "description": "The service that Integration Server executes to determine the availability of resources associated with the trigger service.",
                        "type": "string"
                    },
                    "processingMode": {
                        "description": "Whether Integration Server processes the documents in the trigger queue concurrently or serially.",
                        "type": "string"
                    },
                    "maxExecutionThreads": {
                        "description": "Maximum number of server threads that can process documents for this trigger concurrently.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "suspendOnError": {
                        "description": "Whether Integration Server suspends document processing and document retrieval automatically when a trigger service ends with an exception",
                        "type": "boolean"
                    },
                    "exactlyOnceDetectDuplicates": {
                        "description": "Whether Integration Server uses duplicate detection to ensure exactly-once processing for documents received by this trigger",
                        "type": "boolean"
                    },
                    "exactlyOnceUseHistory": {
                        "description": "Whether a document history will be maintained and used to determine whether a document is a duplicate.",
                        "type": "boolean"
                    },
                    "exactOnceHistoryTimeToLive": {
                        "description": "Length of time the document history database maintains an entry for a document processed by the trigger",
                        "type": "integer",
                        "format": "int32"
                    },
                    "priorityEnabled": {
                        "description": "Whether priority messaging for the trigger is enabled or disabled.",
                        "type": "boolean"
                    },
                    "conditions": {
                        "description": "webMethods messaging trigger conditions.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingConditionOut"
                        }
                    },
                    "triggerClientId": {
                        "description": "The client ID for the webMethods messaging trigger.",
                        "type": "string"
                    },
                    "defaultClientId": {
                        "description": "The client ID for the default client on Integration Server.",
                        "type": "string"
                    },
                    "retrievalState": {
                        "description": "Whether document retrieval is active or suspended for this trigger.",
                        "type": "string"
                    },
                    "processingState": {
                        "description": "Whether document processing is active or suspended for this trigger.",
                        "type": "string"
                    },
                    "currentThreadsProccesing": {
                        "description": "The current number of server threads processing documents for this trigger.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "volatileQueue": {
                        "description": "The current number of documents in the volatile queue for the trigger.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "persistedQueue": {
                        "description": "The current number of documents in the persisted queue for the trigger.",
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "IssuerCertMappingsData": {
                "type": "object",
                "properties": {
                    "truststoreAlias": {
                        "description": "Truststore alias associated with the issuer.",
                        "type": "string"
                    },
                    "certificateAlias": {
                        "description": "Certificate alias for the certificate associated with the truststore alias.",
                        "type": "string"
                    }
                }
            },
            "SFTPUserAliasOut": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "Alias for the SFTP user.",
                        "type": "string"
                    },
                    "userName": {
                        "description": "The user name for the SFTP user account.",
                        "type": "string"
                    },
                    "authenticationType": {
                        "description": "The type of authentication that Integration Server uses to authenticate itself to the SFTP server.",
                        "type": "string"
                    },
                    "sftpServerAlias": {
                        "description": "The alias of the SFTP server to which you want the specified user to connect.",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password for the specified SFTP user. This field applies when authenticationType is set to password.",
                        "type": "string"
                    },
                    "passPhrase": {
                        "description": "The passphrase for the private key for the specified SFTP user. This field applies when authenticationType is set to publicKey and if the private key specified in privateKeLocation requires a passphrase.",
                        "type": "string"
                    },
                    "privateKeyFileLocation": {
                        "description": "The location of the private key of the specified SFTP user. This field applies when authenticationType is set to publicKey.",
                        "type": "string"
                    },
                    "maximumRetries": {
                        "description": "The number of times Integration Server attempts to connect to the SFTP server. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "connectionTimeout": {
                        "description": "The number of seconds that Integration Server waits for a response from the SFTP server before timing out and terminating the request.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "sessionTimeout": {
                        "description": "The number of minutes Integration Server waits before terminating an idle session.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "compression": {
                        "description": "The compression algorithm used to reduce the amount of data that is transmitted.",
                        "type": "string"
                    },
                    "compressionLevel": {
                        "description": "The compression level to use if the compression field is set to zlib. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "strictHostkeyChecking": {
                        "description": "Whether Integration Server verifies the host key of the SFTP server before establishing a connection to the SFTP server.",
                        "type": "string"
                    }
                }
            },
            "JDBCFunctionAlias": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the function to point to a connection pool.",
                        "type": "string"
                    },
                    "pool": {
                        "description": "Alias of the connection pool at which to point the function.",
                        "type": "string"
                    },
                    "autocommit": {
                        "description": "SQL Autocommit. When active, each SQL statement is executed in its own transaction and automatically committed. Cannot be modified.",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ]
                    },
                    "cache": {
                        "description": "SQL Statement cache enabled. Cannot be modified.",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ]
                    },
                    "isolationLevel": {
                        "description": "SQL Transaction Isolation Level that defines the degree to which one transaction must be isolated from resource or data modifications made by other transactions. Cannot be modified.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": {
                        "description": "Description of the function.",
                        "type": "string"
                    },
                    "inFailFastMode": {
                        "description": "Whether the function is currently in fail-fast mode. Cannot be modified.",
                        "type": "boolean"
                    },
                    "failFastMode": {
                        "description": "Whether fail-fast mode is enabled for the function.",
                        "type": "boolean"
                    }
                }
            },
            "AuditLogRec": {
                "type": "object",
                "properties": {
                    "rootContextID": {
                        "description": "Context information that provides a consistent, interpretable audit trail of activity that the webMethods Monitor can use to relate entries within the log.",
                        "type": "string"
                    },
                    "parentContextID": {
                        "description": "Context information that provides a consistent, interpretable audit trail of activity that the webMethods Monitor can use to relate entries within the log.",
                        "type": "string"
                    },
                    "contextID": {
                        "description": "Context information that provides a consistent, interpretable audit trail of activity that the webMethods Monitor can use to relate entries within the log.",
                        "type": "string"
                    },
                    "auditTimestamp": {
                        "description": "Date and time the auditing request entered the audit subsystem.",
                        "type": "string"
                    },
                    "insertTimestamp": {
                        "description": "Date and time the audit record was written to the database or file system. ",
                        "type": "string"
                    },
                    "clientID": {
                        "description": "IP address of the host from which the request originated.",
                        "type": "string"
                    },
                    "userID": {
                        "description": "User name for the client that generated the audit event.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Category for the security event that occurred (authentication, authorization, certificates, configuration, etc.).",
                        "type": "string"
                    },
                    "message": {
                        "description": "Text of the logged message or information about the security action.",
                        "type": "string"
                    },
                    "result": {
                        "description": "The result of the request for which security action was logged, either SUCCESS or FAILURE.",
                        "type": "string"
                    },
                    "clientApplication": {
                        "description": "Client application accessing the server.",
                        "type": "string"
                    },
                    "serviceName": {
                        "description": "Name of the service that generated the audit event.",
                        "type": "string"
                    },
                    "resubmittable": {
                        "description": "Whether or not webMethods Monitor can resubmit the service. ",
                        "type": "string"
                    },
                    "serverID": {
                        "description": "IP address or host name of the server on which Integration Server is running.",
                        "type": "string"
                    },
                    "sessionState": {
                        "description": "Statue of the session. Possible values are STARTED, EXPIRED, and ENDED.",
                        "type": "string"
                    },
                    "sessionName": {
                        "description": "Client who initiated the action that caused the session to be created. This can be the IP address of the client, system, or internal connection.  ",
                        "type": "string"
                    },
                    "rpcs": {
                        "description": "Number of services the client has called so far this session.",
                        "type": "string"
                    },
                    "age": {
                        "description": "How long the session existed (in milliseconds) before it expired or ended.",
                        "type": "string"
                    },
                    "sessionID": {
                        "description": "A string Integration Server generates to identify each session uniquely.",
                        "type": "string"
                    },
                    "txMsg": {
                        "description": "Name of the guaranteed delivery process that is running.",
                        "type": "string"
                    },
                    "txStatus": {
                        "description": "Status of guaranteed delivery transaction. The status can be: STARTED, ENDED or FAILED.",
                        "type": "string"
                    },
                    "txErrMsg": {
                        "description": "If the transaction failed, the error message that describes the error that occurred.",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Universally unique identifier for the message being sent or received.",
                        "type": "string"
                    },
                    "alias": {
                        "description": "Name of the messaging connection alias associated with the sent or received message. ",
                        "type": "string"
                    },
                    "destination": {
                        "description": "Destination to which the message was sent.",
                        "type": "string"
                    },
                    "messageId": {
                        "description": "The ID assigned to the message by the messaging provider.",
                        "type": "string"
                    },
                    "trigger": {
                        "description": "Name of the trigger that received the message.",
                        "type": "string"
                    },
                    "mode": {
                        "description": "Indicates whether Integration Server wrote the log message on behalf of a message producer or consumer for webMethods messaging or JMS messaging.",
                        "type": "string"
                    },
                    "errorMessage": {
                        "description": "Optional error message, describing the type of error.",
                        "type": "string"
                    },
                    "duration": {
                        "description": "How long the service ran (in milliseconds) before the error occurred.",
                        "type": "string"
                    },
                    "errStackTrace": {
                        "description": "Trace that shows the call sequence leading to the error.",
                        "type": "string"
                    },
                    "serviceStack": {
                        "description": "Parent services for the service in which the error occurred.",
                        "type": "string"
                    }
                }
            },
            "SystemAttrs": {
                "type": "object",
                "properties": {
                    "currentUser": {
                        "description": "Name of the current user.",
                        "type": "string"
                    },
                    "dataDirectVersion": {
                        "description": "Version of the DataDirect Connect drivers used by Integration Server.",
                        "type": "string"
                    },
                    "javaBuildInfo": {
                        "description": "Details about the Java VM's build.",
                        "type": "string"
                    },
                    "javaClasspath": {
                        "description": "The Java classpath.",
                        "type": "string"
                    },
                    "javaDataModel": {
                        "description": "The Java data model.",
                        "type": "string"
                    },
                    "javaEntrustToolkitVersion": {
                        "description": "The Entrust Toolkit version.",
                        "type": "string"
                    },
                    "javaHome": {
                        "description": "The Java home directory.",
                        "type": "string"
                    },
                    "javaVmName": {
                        "description": "Name of the Java VM.",
                        "type": "string"
                    },
                    "javaVendor": {
                        "description": "Java VM manufacturer.",
                        "type": "string"
                    },
                    "javaVersion": {
                        "description": "Java version.",
                        "type": "string"
                    },
                    "serverClasspath": {
                        "description": "Integration Server classpath.",
                        "type": "string"
                    },
                    "serverInstanceName": {
                        "description": "Name of Integration Server instance.",
                        "type": "string"
                    },
                    "serverProcessId": {
                        "description": "Operation system process ID of this Integration Server instance.",
                        "type": "string"
                    },
                    "workingDir": {
                        "description": "Home directory of the Integration Server instance.",
                        "type": "string"
                    },
                    "updates": {
                        "description": "URL that returns the updates installed on this Integration Server instance.",
                        "type": "string"
                    }
                }
            },
            "GlobalVariableInOut": {
                "type": "object",
                "properties": {
                    "key": {
                        "description": "Name of the global variable.",
                        "type": "string"
                    },
                    "value": {
                        "description": "Value of the global variable.",
                        "type": "string"
                    },
                    "secure": {
                        "description": "Whether the global variable value is to be handled in a secure manner. If true, Integration Server encrypts the value and saves it as an outbound password.",
                        "type": "boolean"
                    }
                }
            },
            "TimeDuration": {
                "type": "object",
                "properties": {
                    "duration": {
                        "description": "Duration.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "timeUnit": {
                        "description": "Unit of time.",
                        "type": "string",
                        "enum": [
                            "Days",
                            "Hours",
                            "Minutes"
                        ]
                    }
                }
            },
            "JNDIConnectionAliasOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the JNDI connection alias.",
                        "type": "string"
                    },
                    "providerURL": {
                        "description": "The URL of the initial context for sessions with the JNDI provider.",
                        "type": "string"
                    },
                    "initialContextFactory": {
                        "description": "The class name of the JNDI provider. The initial context is the starting point that the JNDI provider users to resolve names for naming and directory operations.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the JNDI connection alias.",
                        "type": "string"
                    },
                    "otherProperties": {
                        "description": "The additional properties for JNDI configuration required by the JNDI provider.",
                        "type": "string"
                    },
                    "keystoreAlias": {
                        "description": "The alias for the keystore that contains the client certificates for Integration Server to use when connecting to the JNDI provider.",
                        "type": "string"
                    },
                    "keystoreFormatPropertyName": {
                        "description": "The JNDI property name for storing the keystore format.",
                        "type": "string"
                    },
                    "keystoreKeyAlias": {
                        "description": "The alias to the key that contains the private key for connecting to the JNDI provider.",
                        "type": "string"
                    },
                    "keystorePasswordPropertyName": {
                        "description": "The JNDI property name for storing the keystore password.",
                        "type": "string"
                    },
                    "keystorePropertyName": {
                        "description": "The JNDI property name for storing the keystore location.",
                        "type": "string"
                    },
                    "privateKeyPropertyName": {
                        "description": "The JNDI property name for storing the private key name.",
                        "type": "string"
                    },
                    "providerURLFailoverList": {
                        "description": "One or more provider URLs that Integration Server should use if the connection to the primary JNDI provider fails.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "securityCredentials": {
                        "description": "The security credentials that the JMS administrator provides to the JNDI provider.",
                        "type": "string"
                    },
                    "securityPrincipal": {
                        "description": "The name of the security principal that the JMS administrator provides to the JNDI provider.",
                        "type": "string"
                    },
                    "trustoreAlias": {
                        "description": "The alias for the truststore that contains the certificates of the Certificate Authority (CA) for the JNDI provider.",
                        "type": "string"
                    },
                    "truststorePasswordPropertyName": {
                        "description": "The JNDI property name for storing the truststore password.",
                        "type": "string"
                    },
                    "truststorePropertyName": {
                        "description": "The JNDI property name for storing the truststore location.",
                        "type": "string"
                    },
                    "useSSL": {
                        "description": "Whether SSL is used to connect to the JNDI provider.",
                        "type": "boolean"
                    }
                }
            },
            "EGRegPortOut": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "A unique name that identifies the port",
                        "type": "string"
                    },
                    "number": {
                        "description": "The port number",
                        "type": "integer",
                        "format": "int32"
                    },
                    "packageName": {
                        "description": "The package the port is associated with",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "protocol": {
                        "description": "The port's protocol",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "HTTPS"
                        ]
                    },
                    "enabled": {
                        "description": "Indicates whether the port is enabled, that is, currently accepting requests.",
                        "type": "boolean"
                    },
                    "bindAddress": {
                        "description": "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
                        "type": "string"
                    },
                    "clientAuth": {
                        "description": "The type of authentication used by this port",
                        "type": "string"
                    },
                    "useJSSE": {
                        "description": "Whether the port will be created using the Java Secure Socket Extension.",
                        "type": "boolean"
                    },
                    "keyAlias": {
                        "description": "Specifies a text identifier for the keystore, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component",
                        "type": "string"
                    },
                    "keyStore": {
                        "description": "Specifies a text identifier for the private key associated with the keystore alias",
                        "type": "string"
                    },
                    "trustStore": {
                        "description": "Specifies a text identifier for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
                        "type": "string"
                    },
                    "ipAccess": {
                        "$ref": "#/components/schemas/IPAccess"
                    }
                }
            },
            "KeyAlias": {
                "type": "object",
                "properties": {
                    "keyAlias": {
                        "description": "Key Alias",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password",
                        "type": "string"
                    }
                }
            },
            "HttpsPort": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "A unique name that identifies the port.",
                        "type": "string"
                    },
                    "number": {
                        "description": "The port number.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "diagnostic": {
                        "description": "Indicates whether this port is the diagnostic port for Integration Server. Field is present only when true.",
                        "type": "boolean"
                    },
                    "protocol": {
                        "description": "The protocol for the port.",
                        "type": "string",
                        "enum": [
                            "HTTPS"
                        ]
                    },
                    "packageName": {
                        "description": "The package associated with the port.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "bindAddress": {
                        "description": "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
                        "type": "string"
                    },
                    "clientAuth": {
                        "description": "The type of authentication used by this port.",
                        "type": "string",
                        "enum": [
                            "basic",
                            "digest",
                            "requestKerberos",
                            "requireKerberos",
                            "requestClientCertification",
                            "requireClientCertification",
                            "idProvider"
                        ]
                    },
                    "idProvider": {
                        "description": "The OpenID Provider to use to perform authentication for all requests sent to this port.",
                        "type": "string"
                    },
                    "backlog": {
                        "description": "When the port receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "keepAliveTimeout": {
                        "description": "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
                        "type": "string"
                    },
                    "threadPool": {
                        "description": "Indicates whether the port has its own pool of threads.",
                        "type": "boolean"
                    },
                    "minThread": {
                        "description": "If threadPool is true, the minimum number of threads in the thread pool for the port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxThread": {
                        "description": "If threadPool is true, the maximum number of threads in the thread pool for the port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadPriority": {
                        "description": "If threadPool is true, the priority of the threads in the thread pool.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadsInUse": {
                        "description": "If threadPool is true, the number of threads from the pool that are currently in use.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "delay": {
                        "description": "The number of milliseconds to delay before processing each request received on the port.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "suspended": {
                        "description": "Indicates whether the port is suspended. If false, the port is accepting requests.",
                        "type": "boolean"
                    },
                    "kerberos": {
                        "$ref": "#/components/schemas/KerberosSettings"
                    },
                    "ipAccess": {
                        "$ref": "#/components/schemas/IPAccess"
                    },
                    "resourceAccess": {
                        "$ref": "#/components/schemas/ResourceAccess"
                    },
                    "message": {
                        "description": "Information about the operation that just completed.",
                        "type": "string"
                    },
                    "keyAlias": {
                        "description": "Key alias for the private key associated with the keystore alias.",
                        "type": "string"
                    },
                    "keyStore": {
                        "description": "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
                        "type": "string"
                    },
                    "trustStore": {
                        "description": "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
                        "type": "string"
                    },
                    "useJSSE": {
                        "description": "Whether the port will be created using the Java Secure Socket Extension.",
                        "type": "boolean"
                    },
                    "jsseDisabledProtocols": {
                        "description": "Specifies the list of disabled SSL and TLS protocol versions when Integration Server acts as SSL when the server is handling inbound requests.",
                        "type": "string"
                    }
                }
            },
            "IPAccess": {
                "type": "object",
                "properties": {
                    "global": {
                        "description": "Indicates that the IP access for a port is inherited from the global IP access settings. This field is present only when true.",
                        "type": "boolean"
                    },
                    "accessMode": {
                        "description": "The IP access mode is used to determine which hosts are permitted on the port. When you explicitly assign IP access settings to a port, those settings override the global settings for Integration Server. If you do not assign IP access settings to a port or delete the IP access settings for a port, the port uses the global settings. \"allowByDefault\" accepts all hosts except those in the denyList. \"denyByDefault\" rejects all hosts except those in the allowList.",
                        "type": "string",
                        "enum": [
                            "allowByDefault",
                            "denyByDefault"
                        ]
                    },
                    "allowList": {
                        "description": "An allow list to specify hosts that are permitted to access this port when accessMode is \"denyByDefault\". The values in this list may be host names or IP addresses. Entries may be wildcarded such as \"*.some-company.com\" and \"123.45.6.*\".",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "denyList": {
                        "description": "A deny list to specify hosts that are prohibited from accessing this port when accessMode is \"allowByDefault\". The values in this list may be host names or IP addresses. Host names may be wildcarded such as \"*.some-company.com\" and \"123.45.6.*\".",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ScheduledTaskOut": {
                "type": "object",
                "properties": {
                    "taskId": {
                        "description": "A unique ID for the task.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of the task.",
                        "type": "string",
                        "enum": [
                            "once",
                            "repeat",
                            "complex"
                        ]
                    },
                    "description": {
                        "description": "Description of the task.",
                        "type": "string"
                    },
                    "service": {
                        "description": "Fully qualified name of the service that Integration Server executes.",
                        "type": "string"
                    },
                    "target": {
                        "description": "Integration Server on which the task will run.",
                        "type": "string"
                    },
                    "inputs": {
                        "description": "Input to the service that Integration Server executes.",
                        "type": "object"
                    },
                    "lateness": {
                        "description": "The maximum number of minutes Integration Server waits to take the specified latenessAction, if the task is overdue. This applies to simple repeating and complex repeating tasks.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "latenessAction": {
                        "description": "The action Integration Server takes if the task is overdue. A value 0 means run immediately, 1 means run at next scheduled internal, 2 means suspend. This applies to simple repeating and complex repeating tasks.",
                        "type": "integer",
                        "format": "int32",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "nextRun": {
                        "description": "Next run in seconds for a task.",
                        "type": "number",
                        "format": "double"
                    },
                    "interval": {
                        "description": "Execution interval in seconds. This applies to simple repeating tasks.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "executionState": {
                        "description": "Execution state of the task. Values can be: ready, running, or suspended.",
                        "type": "string"
                    },
                    "scheduledState": {
                        "description": "Whether task is expired or unexpired.",
                        "type": "string"
                    },
                    "doNotOverlap": {
                        "description": "Whether Integration Server waits for the previous execution of the service to complete before starting the next. This applies to simple repeating and complex repeating tasks.",
                        "type": "boolean"
                    },
                    "startDate": {
                        "description": "Date of the first execution of the task.",
                        "type": "string"
                    },
                    "startTime": {
                        "description": "Tme of the first execution of the task.",
                        "type": "string"
                    },
                    "endDate": {
                        "description": "Date of the last execution of the task.",
                        "type": "string"
                    },
                    "endTime": {
                        "description": "Time of the last execution of the task.",
                        "type": "string"
                    },
                    "minuteList": {
                        "description": "List of specific minutes when a complex repeating task will run.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hourList": {
                        "description": "List of specific hours when a complex repeating task will run.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dayOfMonthList": {
                        "description": "List of specific dates (1 - 31) when a complex repeating task will run.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "monthList": {
                        "description": "List of specific months when a complex repeating task will run.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December"
                            ]
                        }
                    },
                    "dayOfWeekList": {
                        "description": "List of specific days of the week when a complex task will run.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    },
                    "lastError": {
                        "description": "Last localized Exception text.",
                        "type": "string"
                    },
                    "runAsUser": {
                        "description": "User whose credentials are used to run the service.",
                        "type": "string"
                    }
                }
            },
            "ServerLogDataOut": {
                "type": "object",
                "properties": {
                    "logEntries": {
                        "description": "Server log display entries.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EGExternalPort": {
                "type": "object",
                "properties": {
                    "backlog": {
                        "description": "When the port receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "keepAliveTimeout": {
                        "description": "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "threadPool": {
                        "description": "Whether the port has its own pool of threads.",
                        "type": "boolean"
                    },
                    "minThread": {
                        "description": "If threadPool is true, the minimum number of threads in the thread pool for the port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxThread": {
                        "description": "If threadPool is true, the maximum number of threads in the thread pool for the port.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "threadPriority": {
                        "description": "If threadPool is true, the priority of the threads in the thread pool.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "kerberosSettings": {
                        "$ref": "#/components/schemas/KerberosSettings"
                    },
                    "alias": {
                        "description": "A unique name that identifies the port.",
                        "type": "string"
                    },
                    "number": {
                        "description": "The port number.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "packageName": {
                        "description": "The package with which port is associated.",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "protocol": {
                        "description": "The protocol for the port. ",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "HTTPS"
                        ]
                    },
                    "enabled": {
                        "description": "Whether the port is enabled. When the port is enabled, it is accepting requests.",
                        "type": "boolean"
                    },
                    "bindAddress": {
                        "description": "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
                        "type": "string"
                    },
                    "clientAuth": {
                        "description": "The type of authentication used by this port",
                        "type": "string"
                    },
                    "useJSSE": {
                        "description": "Whether the port will be created using the Java Secure Socket Extension.",
                        "type": "boolean"
                    },
                    "keyAlias": {
                        "description": "Key alias for the private key associated with the keystore alias.",
                        "type": "string"
                    },
                    "keyStore": {
                        "description": "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
                        "type": "string"
                    },
                    "trustStore": {
                        "description": "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
                        "type": "string"
                    }
                }
            },
            "PackagePatchList": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the patch release.",
                        "type": "string"
                    },
                    "version": {
                        "description": "Version of the patch release.",
                        "type": "string"
                    },
                    "build": {
                        "description": "Build number of the patch release.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the patch release.",
                        "type": "string"
                    },
                    "time": {
                        "description": "Time of the patch release.",
                        "type": "string"
                    },
                    "jvm_version": {
                        "description": "Minimum version of the JVM required to run this patch.",
                        "type": "string"
                    },
                    "publisher": {
                        "description": "Publisher of the patch release.",
                        "type": "string"
                    },
                    "patch_nums": {
                        "description": "A list of patches that have been applied to this release of the package, if this information was provided by the package publisher.",
                        "type": "string"
                    }
                }
            },
            "KerberosSettingsIn": {
                "type": "object",
                "properties": {
                    "jaasContext": {
                        "description": "The custom JAAS context used for Kerberos authentication.",
                        "type": "string"
                    },
                    "clientPrincipal": {
                        "description": "The principal to use for Kerberos authentication.",
                        "type": "string"
                    },
                    "clientPassword": {
                        "description": "The password for the principal used for Kerberos authentication.",
                        "type": "string"
                    },
                    "servicePrincipal": {
                        "description": "The service that the Kerberos client wants to access.",
                        "type": "string"
                    }
                }
            },
            "KeystoreIn": {
                "type": "object",
                "properties": {
                    "keyStoreName": {
                        "description": "Alias for the keystore file.",
                        "type": "string"
                    },
                    "keyStoreDescription": {
                        "description": "Description of the keystore alias. ",
                        "type": "string"
                    },
                    "keyStoreType": {
                        "description": "Certificate file format of the keystore file.",
                        "type": "string",
                        "enum": [
                            "JKS",
                            "PKCS12"
                        ]
                    },
                    "keyStoreProvider": {
                        "description": "Provider that is used for the keystore.",
                        "type": "string"
                    },
                    "keyStoreLocation": {
                        "description": "Location of the keystore file on the server. This can be the full pathname or a relative path in relation to the Integration Server.",
                        "type": "string"
                    },
                    "keyStorePassword": {
                        "description": "Password for the keystore file associated with this alias.",
                        "type": "string"
                    },
                    "configuredKeyAliases": {
                        "description": "Key Aliases of the keystore. ",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KeyAlias"
                        }
                    },
                    "isHsm": {
                        "description": "Whether the keystore is stored on a Hardware Security Module (HSM) device.",
                        "type": "string",
                        "enum": [
                            "true",
                            "false"
                        ]
                    }
                }
            },
            "Error": {
                "type": "object",
                "properties": {
                    "className": {
                        "description": "Exception class name. Returned when watt.adminapi.returnExceptions is true.",
                        "type": "string"
                    },
                    "message": {
                        "description": "Error message",
                        "type": "string"
                    },
                    "stackTrace": {
                        "description": "Exception stack trace. Returned when watt.adminapi.returnExceptions is true.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cause": {
                        "$ref": "#/components/schemas/Error"
                    }
                }
            },
            "JMSRoutingRuleOut": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the JMS trigger routing rule.",
                        "type": "string"
                    },
                    "localFilter": {
                        "description": "Filter that Integration server applie to the JMS message body.",
                        "type": "string"
                    },
                    "service": {
                        "description": "The service associated with the routing rule.",
                        "type": "string"
                    }
                }
            },
            "NonStopConfiguration": {
                "type": "object",
                "properties": {
                    "timeoutBehaviorType": {
                        "description": "How the cache responds to timeouts in the cluster.",
                        "type": "string",
                        "enum": [
                            "exception",
                            "localReads",
                            "noop",
                            "custom"
                        ],
                        "default": "exception"
                    },
                    "enabled": {
                        "description": "Whether the non-stop configuration enabled for the cache. ",
                        "type": "string"
                    },
                    "immediateTimeout": {
                        "description": "Whether to time out immediately if unable to connect to the cluster.",
                        "type": "boolean"
                    },
                    "timeoutMillis": {
                        "description": "How long to try to connect to the cluster before a timeout occurs.",
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "JDBCPoolAlias": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Alias name for JDBC connection pool.",
                        "type": "string"
                    },
                    "minConnections": {
                        "description": "Minimum number of connections the pool must keep open at all times.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxConnections": {
                        "description": "Maximum number of connections the pool can have open at one time.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "idleMilliseconds": {
                        "description": "Number of milliseconds the pool can keep an unused connection open.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "url": {
                        "description": "URL for the database server.",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Database user for Integration Server to use to connect to the database.",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password for Integration Server to use to connect to the database.",
                        "type": "string"
                    },
                    "driver": {
                        "description": "Database driver alias for Integration Server to use to connect to the pool.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the JDBC connection pool.",
                        "type": "string"
                    },
                    "spyParms": {
                        "description": "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Spy diagnostic feature. This parameter also defines DataDirect Spy attributes.",
                        "type": "string"
                    },
                    "snoopParms": {
                        "description": "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Snoop tool. This parameter also defines DataDirect Snoop tool attributes.",
                        "type": "string"
                    },
                    "spyEnabled": {
                        "description": "Whether the DataDirect Spy diagnostic feature for DataDirect Connect JDBC drivers is enabled.",
                        "type": "boolean"
                    },
                    "snoopEnabled": {
                        "description": "Whether the DataDirect Snoop tool for DataDirect Connect JDBC drivers is enabled. ",
                        "type": "boolean"
                    },
                    "poolThresholdPercentage": {
                        "description": "Number of connections, expressed as a percentage of maxConnections, that should be available in the pool at all times.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "waitingThread": {
                        "description": "Maximum number of requests for connection that can be waiting at one time.",
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "CacheManagerOut": {
                "type": "object",
                "properties": {
                    "cacheManagerName": {
                        "description": "Name of the cache manager.",
                        "type": "string"
                    },
                    "tsaURL": {
                        "description": "URL of a Terracotta Server Array.",
                        "type": "string"
                    },
                    "rejoin": {
                        "description": "Whether to automatically rejoin a cluster if disconnected.",
                        "type": "boolean"
                    },
                    "diskStorePath": {
                        "description": "File system path of cache manager's disk store.",
                        "type": "string"
                    },
                    "isInternal": {
                        "description": "Indicates if cache manager is part of the Integration Server product.",
                        "type": "boolean"
                    },
                    "totalBigMemory": {
                        "description": "Total current BigMemory usage by all caches in the cache manager",
                        "type": "string"
                    },
                    "caches": {
                        "description": "All caches in the cache manager",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/Link"
                                },
                                {
                                    "$ref": "#/components/schemas/CacheOut"
                                }
                            ]
                        }
                    }
                }
            },
            "TradingNetworks": {
                "type": "object",
                "properties": {
                    "productCode": {
                        "description": "Trading Networks product code.",
                        "type": "string"
                    },
                    "maxPartners": {
                        "description": "Maximum number of allowed partners for Trading Networks.",
                        "type": "string"
                    }
                }
            },
            "PackageUpdates": {
                "type": "object",
                "properties": {
                    "packageName": {
                        "description": "A package name",
                        "type": "string"
                    },
                    "packageUpdates": {
                        "description": "The installed updates for a package",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SFTPServerAliasOut": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "Alias for the SFTP server.",
                        "type": "string"
                    },
                    "version": {
                        "description": "Version of the SFTP Client.",
                        "type": "string"
                    },
                    "hostName": {
                        "description": "The host name or IP address of the SFTP server.",
                        "type": "string"
                    },
                    "port": {
                        "description": "The port number of the SFTP server. The port number must be within the range of 0 and 65535 (inclusive).",
                        "type": "integer",
                        "format": "int32"
                    },
                    "preferredKeyExchangeAlgorithms": {
                        "description": "The algorithms that Integration Server presents to the SFTP server for key exchange.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "proxyAlias": {
                        "description": "The proxy alias through which the request to the SFTP server is to be routed.",
                        "type": "string"
                    },
                    "preferredMACS2C": {
                        "description": "The list of preferred server-to-client Message Authentication Code (MAC) algorithms.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preferredMACC2S": {
                        "description": "The list of preferred client-to-server Message Authentication Code (MAC) algorithms.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preferredCiphersS2C": {
                        "description": "A list of preferred server-to-client ciphers.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preferredCiphersC2S": {
                        "description": "A list of preferred client-to-server ciphers.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "minDHKeySize": {
                        "description": "The minimum DH key size. The default value is 1024. This field applies when the SFTP client version is v2.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxDHKeySize": {
                        "description": "The maximum DH key size. The default value is 8192. This field applies when the SFTP client version is v2.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "fingerprint": {
                        "description": "Fingerprint of the host key. ",
                        "type": "string"
                    },
                    "hostKeyLocation": {
                        "description": "Public key of the SFTP server.",
                        "type": "string"
                    }
                }
            },
            "QuiescePortDetails": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "Alias for the port.",
                        "type": "string"
                    },
                    "key": {
                        "description": "Key for the port where the key is a combination of the protocol and port such as HTTPListener@5555.",
                        "type": "string"
                    },
                    "portPackage": {
                        "description": "The package in which the quiesce port resides.",
                        "type": "string"
                    }
                }
            },
            "PortLink": {
                "type": "object",
                "properties": {
                    "number": {
                        "description": "The port number.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "alias": {
                        "description": "The port alias.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The port URL.",
                        "type": "string"
                    },
                    "primary": {
                        "description": "Whether this port is the primary port for Integration Server. Field is present only when true.",
                        "type": "boolean"
                    },
                    "diagnostic": {
                        "description": "Indicates whether this port is the diagnostic port for Integration Server. Field is present only when true.",
                        "type": "boolean"
                    }
                }
            },
            "EGRegPort": {
                "type": "object",
                "properties": {
                    "alias": {
                        "description": "A unique name that identifies the port.",
                        "type": "string"
                    },
                    "number": {
                        "description": "The port number.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "packageName": {
                        "description": "The package with which port is associated.",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the port.",
                        "type": "string"
                    },
                    "protocol": {
                        "description": "The protocol for the port. ",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "HTTPS"
                        ]
                    },
                    "enabled": {
                        "description": "Whether the port is enabled. When the port is enabled, it is accepting requests.",
                        "type": "boolean"
                    },
                    "bindAddress": {
                        "description": "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
                        "type": "string"
                    },
                    "clientAuth": {
                        "description": "The type of authentication used by this port",
                        "type": "string"
                    },
                    "useJSSE": {
                        "description": "Whether the port will be created using the Java Secure Socket Extension.",
                        "type": "boolean"
                    },
                    "keyAlias": {
                        "description": "Key alias for the private key associated with the keystore alias.",
                        "type": "string"
                    },
                    "keyStore": {
                        "description": "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
                        "type": "string"
                    },
                    "trustStore": {
                        "description": "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
                        "type": "string"
                    }
                }
            },
            "MessagingConditionDetailsOut": {
                "type": "object",
                "properties": {
                    "documentType": {
                        "description": "Name of the publishable document type used in the condition for the webMethods messaging trigger.",
                        "type": "string"
                    },
                    "filter": {
                        "description": "For a trigger that receives documents from Broker, the filter that Broker and/or Integration Server applies to each received document. For a trigger that receives documents from Universal Messaging, the local filter that Integration Server applies to  each received document.",
                        "type": "string"
                    },
                    "umFilter": {
                        "description": "For a trigger that receives documents from Universal Messaging, the provider filter that Universal Messaging applies to each received document.",
                        "type": "string"
                    }
                }
            }
        }
    }
}