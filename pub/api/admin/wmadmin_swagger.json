{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Integration Server Administrative API",
    "description" : "Integration Server Administrative API",
    "version" : "1.0",
    "contact" : {
      "name" : "Software AG Global Support",
      "url" : "https://softwareag.com/support",
      "email" : "support@softwareag.com"
    },
    "license" : {
      "name" : "Software AG License",
      "url" : "https://softwareag.com/license"
    }
  },
  "servers" : [ {
    "url" : "https://Your-Host:Your-Port/",
    "description" : "Integration Server URL",
    "variables" : {
      "host" : {
        "default" : "Your-Host",
        "description" : "Host name for Integration Server Administrative API"
      },
      "port" : {
        "default" : "Your-Port",
        "description" : "Integration Server Administrative API port number"
      }
    }
  } ],
  "paths" : {
    "/admin/server/httpout" : {
      "get" : {
        "summary" : "Retrieves outbound HTTP settings.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Outbound HTTP settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutBoundHTTPSettingOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates outbound HTTP settings.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Fields to update for outbound HTTP settings. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutBoundHTTPSettingIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/client" : {
      "get" : {
        "summary" : "Retrieves all the client lists information",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Client Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientRegistrationOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a client",
        "tags" : [ "security.oauth" ],
        "requestBody" : {
          "required" : true,
          "description" : "Client Registration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientRegistrationInput"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Client Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientRegistrationOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/saml/" : {
      "post" : {
        "summary" : "Creates a SAML token issuer.",
        "tags" : [ "saml" ],
        "requestBody" : {
          "required" : true,
          "description" : "A SAML token issuer in Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SAMLIssuerInOut"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A SAML token issuer in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SAMLIssuerInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ftp/{alias}" : {
      "get" : {
        "summary" : "Retrieves an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An FTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "FTP port to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FtpPortPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An FTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "FTP port to update.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FtpPortPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FtpPortPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An FTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables, disables an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on an FTP port.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "An FTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/mqtt" : {
      "get" : {
        "summary" : "Retrieves all MQTT connection aliases.",
        "tags" : [ "mqtt" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of MQTT connection aliases on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTConnectionAliases"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/email/{alias}/resourceaccess" : {
      "put" : {
        "summary" : "Replaces the resource access settings for an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which folders and services may be accessed through the port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceAccess"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the resource access settings for an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/mqtttrigger/{triggerName}" : {
      "get" : {
        "summary" : "Retrieves a specific MQTT trigger.",
        "tags" : [ "mqtt", "trigger" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "triggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An MQTT trigger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTTriggerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables, disables, or suspends all or a specific MQTT trigger.",
        "tags" : [ "mqtt", "trigger" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "triggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on an MQTT trigger. Set triggerName to \"all\"  to affect all triggers.",
            "type" : "string",
            "enum" : [ "enable", "disable", "suspend" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on an MQTT trigger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTTriggerActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/mqtttrigger" : {
      "get" : {
        "summary" : "Retrieves all MQTT triggers.",
        "tags" : [ "mqtt", "trigger" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of MQTT triggers on Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTTriggers"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/rule/alertoption/{ruleName}/ruletype/{ruleType}" : {
      "get" : {
        "summary" : "Get rule specific alert configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "ruleName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "ruleType",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Rule specific alert configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleAlertOptionInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/messaging" : {
      "get" : {
        "summary" : "Retrieves all webMethods messaging connection aliases.",
        "tags" : [ "messaging" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of webMethods messaging connection aliases on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingConnectionAliases"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/truststore/{keyStoreName}" : {
      "get" : {
        "summary" : "Retrieves the requested truststore alias.",
        "tags" : [ "keystore" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "keyStoreName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "All the truststore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TruststoreOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a truststore alias.",
        "tags" : [ "keystore" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "keyStoreName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates a truststore alias. ",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TruststoreInUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "All the truststore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TruststoreOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a truststore alias.",
        "tags" : [ "keystore" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "keyStoreName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a truststore alias.",
        "tags" : [ "keystore" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "keyStoreName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates a truststore alias. ",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TruststoreInUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TruststoreInUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "All the truststore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TruststoreOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/grpc/descriptor" : {
      "get" : {
        "summary" : "Retrieves all Grpc provider descriptors ",
        "tags" : [ "grpc" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the Grpc provider descriptors in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrpcProviderDescriptorsOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ftps/{alias}" : {
      "get" : {
        "summary" : "Retrieves an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An FTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "FTPS port to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FtpsPortPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An FTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "FTPS port to update.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FtpsPortPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FtpsPortPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An FTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables, disables an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on an FTPS port.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "An FTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jmstrigger/{triggerName}" : {
      "get" : {
        "summary" : "Retrieves a specific JMS trigger.",
        "tags" : [ "jms", "trigger" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "triggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A JMS trigger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSTriggerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables, disables, or suspends all JMS triggers, all JMS triggers of a particular type (standard or SOAP-JMS), or an individual JMS trigger.",
        "tags" : [ "jms", "trigger" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "triggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a JMS trigger. Set triggerName to \"all\"  to affect all JMS triggers or all triggers of a particular type.",
            "type" : "string",
            "enum" : [ "enable", "disable", "suspend" ]
          }
        }, {
          "in" : "query",
          "name" : "triggerType",
          "required" : false,
          "schema" : {
            "description" : "The type of JMS trigger that the enable/disable/suspend action will affect. This parameter is only considered when triggerName is set to \"all\".",
            "type" : "string",
            "enum" : [ "all", "standard", "soap" ],
            "default" : "standard"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Result of an administrative action on a JMS trigger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSTriggerActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/notification" : {
      "get" : {
        "summary" : "Retrieves email notification settings.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Email notification settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailNotificationOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates email notification settings.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Fields to update for email notification settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailNotificationIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/node/{interface}/{name}" : {
      "get" : {
        "summary" : "Retrieves a node.",
        "tags" : [ "node" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "interface",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A namespace node.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a node.",
        "tags" : [ "node" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "interface",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A namespace node.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NodeIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NodeIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A namespace node.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/logger/umClient" : {
      "get" : {
        "summary" : "Returns UM client logger Information.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Universal Messaging client log file information.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UMClientLoggerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates UM client logger.",
        "tags" : [ "logging" ],
        "responses" : {
          "200" : {
            "description" : "Universal Messaging client log file information.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UMClientLoggerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replace UM client logger details.",
        "tags" : [ "logging" ],
        "responses" : {
          "200" : {
            "description" : "Universal Messaging client log file information.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UMClientLoggerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/primary" : {
      "get" : {
        "summary" : "Retrieves a link to the primary port for Integration Server.",
        "tags" : [ "port" ],
        "responses" : {
          "200" : {
            "description" : "A link to a port resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PortLink"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/proxy/{proxyAlias}" : {
      "get" : {
        "summary" : "Retrieves a proxy server alias.",
        "tags" : [ "proxy" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "proxyAlias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A proxy server alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProxyServerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a proxy server alias.",
        "tags" : [ "proxy" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "proxyAlias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates to a proxy server alias. ",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProxyServerUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A proxy server alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProxyServerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a proxy server alias.",
        "tags" : [ "proxy" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "proxyAlias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs administrative actions on a proxy server alias.",
        "tags" : [ "proxy" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "proxyAlias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "Enable or disable a proxy server alias.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a proxy server alias. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProxyServerActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a proxy server alias.",
        "tags" : [ "proxy" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "proxyAlias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates to a proxy server alias. ",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProxyServerUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProxyServerUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A proxy server alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProxyServerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/internalserver/{alias}" : {
      "get" : {
        "summary" : "Retrieves an Internal Server port.",
        "tags" : [ "internalserver", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An Internal Server port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerPortPostOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an Internal Server port.",
        "tags" : [ "internalserver", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An Internal Server port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InternalServerPortPostIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An Internal Server port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerPortPostOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an Internal Server port.",
        "tags" : [ "internalserver", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an Internal Server port.",
        "tags" : [ "internalserver", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An Internal Server port.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InternalServerPortPostIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InternalServerPortPostIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An Internal Server port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerPortPostOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables or disables an Internal Server port.",
        "tags" : [ "internalserver", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on an Internal Server port.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "An HTTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/ldap/dir/" : {
      "get" : {
        "summary" : "Retrieves all LDAP directory configurations.",
        "tags" : [ "ldapSetting" ],
        "responses" : {
          "200" : {
            "description" : "List of configured LDAP directories for Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LdapConfigurations"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates an LDAP directory configuration.",
        "tags" : [ "ldapSetting" ],
        "requestBody" : {
          "required" : true,
          "description" : "LDAP directory configuration to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LdapConfigurationIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "LDAP directory configuration for Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LdapConfiguration"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/updates" : {
      "get" : {
        "summary" : "Retrieves information about fixes installed on the server.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "All installed updates (fixes) on this Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerUpdates"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jdbc/function/{functionAliasName}" : {
      "get" : {
        "summary" : "Retrieves a JDBC function.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "functionAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A JDBC function",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCFunctionAlias"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs administrative actions on a JDBC function.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "functionAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "Action to take on a JDBC function",
            "type" : "string",
            "enum" : [ "test", "restart" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a JDBC function.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "functionAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "JDBC function fields to update.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCFunctionAliasPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCFunctionAliasPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Output of replacing a JDBC function.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCFunctionAliasPatchOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/scope" : {
      "get" : {
        "summary" : "Retrieves list of scopes.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "oauth scope Data.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthScopeList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a scope.",
        "tags" : [ "security.oauth" ],
        "requestBody" : {
          "required" : true,
          "description" : "oauth scope Data.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthScopeList"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "oauth scope Data.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthScopeList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/token/refreshtoken/{refreshTokenId}" : {
      "get" : {
        "summary" : "Retrieves list of tokens.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "refreshTokenId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Token Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Retrieves list of tokens.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "refreshTokenId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/urlalias/{urlAliasName}" : {
      "get" : {
        "summary" : "Retrieves the requested URL Alias.",
        "tags" : [ "urlalias" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "urlAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A URL alias in Integration Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UrlAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a URL Alias.",
        "tags" : [ "urlalias" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "urlAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A URL alias in Integration Server",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UrlAliasIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A URL alias in Integration Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UrlAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a URL alias.",
        "tags" : [ "urlalias" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "urlAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a  URL Alias.",
        "tags" : [ "urlalias" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "urlAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A URL alias in Integration Server",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UrlAliasIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UrlAliasIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A URL alias in Integration Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UrlAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jmstrigger" : {
      "get" : {
        "summary" : "Retrieves all JMS triggers.",
        "tags" : [ "jms", "trigger" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of JMS triggers on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSTriggers"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/certificate/server" : {
      "get" : {
        "summary" : "Retrieves server certificate settings.",
        "tags" : [ "certificate" ],
        "responses" : {
          "200" : {
            "description" : "Fields for a server certificate.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificates"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a server certificate.",
        "tags" : [ "certificate" ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields for a server certificate.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificates"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Fields for a server certificate.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificates"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a server certificate.",
        "tags" : [ "certificate" ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields for a server certificate.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificates_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificates_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Fields for a server certificate.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificates"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jms" : {
      "get" : {
        "summary" : "Retrieves all JMS connection aliases.",
        "tags" : [ "jms" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of JMS connection aliases on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSConnectionAliases"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/enterprisegateway/{alias}/ipaccess" : {
      "put" : {
        "summary" : "Replaces the IP access settings for an Enterprise Gateway port.",
        "tags" : [ "enterprisegateway", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IPAccessIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the IP access settings for an Enterprise Gateway port.",
        "tags" : [ "enterprisegateway", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/logger/{loggerName}" : {
      "get" : {
        "summary" : "Retrieves an audit logger.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "loggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An audit logger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLoggerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an audit logger configuration.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "loggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates for an audit logger configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuditLoggerDataIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An audit logger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLoggerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs an enable or disable action on an audit logger.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "loggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "Action to take on an Audit Logger",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an audit logger configuration.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "loggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates for an audit logger configuration.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuditLoggerDataIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuditLoggerDataIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An audit logger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLoggerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/scheduledtask/{taskId}" : {
      "get" : {
        "summary" : "Retrieves a scheduled user task.",
        "tags" : [ "scheduler" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "taskId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A scheduled user task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledTaskOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a scheduled task.",
        "tags" : [ "scheduler" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "taskId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A scheduled user task.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScheduledTaskPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A scheduled user task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledTaskOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a scheduled task.",
        "tags" : [ "scheduler" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "taskId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Suspends, wakes up, or cancels a scheduled task.",
        "tags" : [ "scheduler" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "taskId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a scheduled task.",
            "type" : "string",
            "enum" : [ "suspend", "wakeup", "cancel" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a scheduled task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledTaskActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a scheduled task.",
        "tags" : [ "scheduler" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "taskId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A scheduled user task.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScheduledTaskPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScheduledTaskPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A scheduled user task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledTaskOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/messagingtrigger/{triggerName}" : {
      "get" : {
        "summary" : "Retrieves a particular webMethods messaging trigger.",
        "tags" : [ "messaging", "trigger" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "triggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A webMethods messaging trigger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingTriggerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Activates or suspends message retrieval and/or message processing for a webMethods messaging trigger. Set triggerName to \"all\" to affect all webMethods messaging triggers",
        "tags" : [ "messaging", "trigger" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "triggerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "The action to take on a webMethods messaging trigger",
            "type" : "string",
            "enum" : [ "activate", "suspend" ]
          }
        }, {
          "in" : "query",
          "name" : "state",
          "required" : true,
          "schema" : {
            "description" : "The trigger state on which to take the action.",
            "type" : "string",
            "enum" : [ "retrieval", "processing" ]
          }
        }, {
          "in" : "query",
          "name" : "permanent",
          "required" : false,
          "schema" : {
            "description" : "Indicates that the state change is permanent and will be maintained after Integration Server restarts, the trigger is enabled or disabled, or the package containing the trigger reloads.",
            "type" : "string",
            "enum" : [ "true", "false" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Result of an administrative action on a webMethods messaging trigger.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingTriggerActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/websocket" : {
      "get" : {
        "summary" : "Retrieves all WebSocket and WebSocketSecure ports.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Limits the returned set of WebSocket and WebSocketSecure ports to those in a particular package.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All WebSocket and WebSocketSecure ports on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebSocketPortsOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebSocketPortPostIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A WebSocket or WebSocketSecure port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebSocketPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/email/{alias}/ipaccess" : {
      "delete" : {
        "summary" : "Deletes the IP access settings for an email port. Once deleted, the port will use the global IP access settings",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces the IP access settings for an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccessIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the IP access settings for an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/account/password/expiration" : {
      "get" : {
        "summary" : "Retrieves password expiration settings.",
        "tags" : [ "user" ],
        "responses" : {
          "200" : {
            "description" : "Password expiration settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordExpiration"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates password expiration settings.",
        "tags" : [ "user" ],
        "responses" : {
          "200" : {
            "description" : "Password expiration settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordExpiration"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/messagingtrigger" : {
      "get" : {
        "summary" : "Retrieves all webMethods messaging triggers.",
        "tags" : [ "messaging", "trigger" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of webMethods triggers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingTriggers"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/setting" : {
      "get" : {
        "summary" : "Retrieves values for all extended settings in Integration Server.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Extended setting name and value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtendedSettingOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Resets specified extended settings to their default values.",
        "tags" : [ "server" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "Action to take on the extended setting.",
            "type" : "string",
            "enum" : [ "reset", "delete" ]
          }
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Extended setting names and values.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExtendedSettingPostInput"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Extended setting name and value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtendedSettingOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/acl/" : {
      "get" : {
        "summary" : "Retrieves all access control lists.",
        "tags" : [ "acl" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the access control lists in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ACLs"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates an access control list.",
        "tags" : [ "acl" ],
        "requestBody" : {
          "required" : true,
          "description" : "An access control list.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ACLIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An access control list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ACLOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/quiesce/config" : {
      "post" : {
        "summary" : "Sets the quiesce configuration.",
        "tags" : [ "admin" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "portAlias",
          "required" : true,
          "schema" : {
            "description" : "The alias of the port to use as the quiesce port.",
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "auditingDisabled",
          "required" : true,
          "schema" : {
            "description" : "Whether audit logging is disabled when entering quiesce mode.",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "systemTasksDisabled",
          "required" : true,
          "schema" : {
            "description" : "Whether system tasks related to interacting with a database are disabled when entering quiesce mode.",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "alertingDisabled",
          "required" : true,
          "schema" : {
            "description" : "Whether notifications are disabled when entering quiesce mode.",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "statisticsDataCollectorDisabled",
          "required" : true,
          "schema" : {
            "description" : "Whether the Statistics Data Collector is disabled when entering quiesce mode.",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Information about status and message returned by a resource operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Status"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/scope/{name}" : {
      "delete" : {
        "summary" : "Delete a scope.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Fully update a scope.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "oauth scope Data.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthScopeList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "oauth scope Data.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthScopeList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update the scope provided.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "oauth setting.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthScope_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthScope_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "oauth setting.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthScope"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves a scope information.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "oauth setting.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthScope"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/logger/server/{component}/{facilityCode}" : {
      "get" : {
        "summary" : "Retrieves the logging level for a top-level component and the logging levels for all the facilities in the component.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "component",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "facilityCode",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A server logger component",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JournalLoggerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the logging level for a facility code in a component.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "component",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "facilityCode",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ftps/{alias}/resourceaccess" : {
      "put" : {
        "summary" : "Replaces the resource access settings for an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which folders and services may be accessed through the port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceAccess"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the resource access settings for an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/scheduledtask/" : {
      "get" : {
        "summary" : "Retrieves all scheduled user tasks.",
        "tags" : [ "scheduler" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All scheduled user tasks on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledTasksOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a scheduled task.",
        "tags" : [ "scheduler" ],
        "requestBody" : {
          "required" : true,
          "description" : "A scheduled user task.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScheduledTaskPutIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A scheduled user task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledTaskOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jndi/{jndiAliasName}" : {
      "get" : {
        "summary" : "Retrieves information for a specific JNDI connection alias.",
        "tags" : [ "jndi" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jndiAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A JNDI connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JNDIConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a JNDI connection alias.",
        "tags" : [ "jndi" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jndiAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for the JNDI connection alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JNDIConnectionAliasUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A JNDI connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JNDIConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a JNDI connection alias.",
        "tags" : [ "jndi" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jndiAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs an administrative action on a JNDI connection alias.",
        "tags" : [ "jndi" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jndiAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a JNDI connection alias.",
            "type" : "string",
            "enum" : [ "testLookup" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a JNDI connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JNDIConnectionAliasActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a JNDI connection alias.",
        "tags" : [ "jndi" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jndiAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for the JNDI connection alias.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JNDIConnectionAliasUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JNDIConnectionAliasUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A JNDI connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JNDIConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/user/" : {
      "get" : {
        "summary" : "Retrieves all user accounts.",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the user accounts in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Users"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a user account.",
        "tags" : [ "user" ],
        "requestBody" : {
          "required" : true,
          "description" : "A user account.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A user account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sftpuser" : {
      "get" : {
        "summary" : "Retrieves all SFTP user aliases.",
        "tags" : [ "sftpuser" ],
        "responses" : {
          "200" : {
            "description" : "All the SFTP user aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPUserAliases"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates an SFTP user alias.",
        "tags" : [ "sftpuser" ],
        "requestBody" : {
          "required" : true,
          "description" : "The SFTP user alias to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SFTPUserAliasPostIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An SFTP user alias. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPUserAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/package" : {
      "get" : {
        "summary" : "Retrieves all packages.",
        "tags" : [ "packages" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All of the installed, activated packages on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Packages"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Installs a package on an Integration Server instance by specifying a .zip filename or directory name that is inside the inbound package directory. The actual name of the package may change once installed if a manifest.rel is included in the zipped package, and only in a zipped package.  This occurs if a <value name=\"target_pkg_name\"> tag is present in the manifest.rel. If the desired package was in the form of a directory, and that directory included a manifest.rel with a <value name=\"target_pkg_name\"> then the manifest.rel will have no effect on the package name once installed.",
        "tags" : [ "packages" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "A general action to take on the package manager where 'install' will install a package based on the filename parameter, which is required when using the 'install' parameter.",
            "type" : "string",
            "enum" : [ "install" ]
          }
        }, {
          "in" : "query",
          "name" : "filename",
          "required" : true,
          "schema" : {
            "description" : "The package in the form of a directory or zip file located in the inbound package directory required for package installation. This parameter is used in conjunction with action=\"install\".",
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "activate",
          "required" : false,
          "schema" : {
            "description" : "Activate the package upon installation. Default is true.",
            "type" : "string",
            "enum" : [ "true", "false" ]
          }
        }, {
          "in" : "query",
          "name" : "archive",
          "required" : false,
          "schema" : {
            "description" : "Archive the package upon installation. Default is true.",
            "type" : "string",
            "enum" : [ "true", "false" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Result of installing a package from the inbound directory via a REST call.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PackagesInstallFromInboundOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/externalserver/" : {
      "post" : {
        "summary" : "Create external server.",
        "tags" : [ "security.oauth" ],
        "requestBody" : {
          "required" : true,
          "description" : "External Oauth server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthExternalServer"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "External Oauth server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthExternalServer"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/grpc/descriptor/{providerDescriptorName}" : {
      "get" : {
        "summary" : "Retrieves a Grpc provider descriptor.",
        "tags" : [ "grpc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "providerDescriptorName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A Grpc provider descriptor.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrpcProviderDescriptorOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enable or Disable a Grpc provider descriptor.",
        "tags" : [ "grpc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "providerDescriptorName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a Grpc provider descriptor.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a Grpc provider descriptor.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrpcProviderDescriptorActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/websocket/{alias}/resourceaccess" : {
      "put" : {
        "summary" : "Replaces the resource access settings for a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which folders and services may be accessed through the port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceAccess"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the resource access settings for a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cachemanager/{cacheManagerName}" : {
      "get" : {
        "summary" : "Retrieves a cache manager.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A cache manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheManagerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a cache manager.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update the cache manager with.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CacheManagerInUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A cache manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheManagerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a cache manager and all caches contained in the cache manager.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Stops, starts, or restarts a cache manager.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a cache manager.",
            "type" : "string",
            "enum" : [ "stop", "start", "restart" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a cache manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheManagerActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a cache manager.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update the cache manager with.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CacheManagerInUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CacheManagerInUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A cache manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheManagerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cachemanager/" : {
      "get" : {
        "summary" : "Retrieves all cache managers.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the cache managers in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheManagers"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a cache manager.",
        "tags" : [ "caching" ],
        "requestBody" : {
          "required" : true,
          "description" : "The cache manager to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CacheManagerIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A cache manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheManagerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/email/{alias}" : {
      "get" : {
        "summary" : "Retrieves an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An email port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailPortInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An email port in Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailPortPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An email port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailPortInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An email port in Integration Server",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailPortPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailPortPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An email port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailPortInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables or disables an email port.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "The action to take on an email port.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "A email port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/mqtt/{connectionAliasName}" : {
      "get" : {
        "summary" : "Retrieves an MQTT connection alias.",
        "tags" : [ "mqtt" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "connectionAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An MQTT connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an MQTT connection alias.",
        "tags" : [ "mqtt" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "connectionAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "The MQTT connection alias to replace.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MQTTConnectionAliasInPut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An MQTT connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an MQTT connection alias.",
        "tags" : [ "mqtt" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "connectionAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs administrative actions on an MQTT connection alias.",
        "tags" : [ "mqtt" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "connectionAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on an MQTT connection alias.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on an MQTT connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTConnectionAliasActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an MQTT connection alias.",
        "tags" : [ "mqtt" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "connectionAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update in the MQTT connection alias.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MQTTConnectionAliasInPatch_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MQTTConnectionAliasInPatch_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An MQTT connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/proxy/" : {
      "get" : {
        "summary" : "Retrieves all proxy server aliases.",
        "tags" : [ "proxy" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the proxy server aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProxyServers"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a proxy server alias.",
        "tags" : [ "proxy" ],
        "requestBody" : {
          "required" : true,
          "description" : "A proxy server alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProxyServerData"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A proxy server alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProxyServerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/ldap/dir/{index}" : {
      "patch" : {
        "summary" : "Updates an LDAP directory configuration.",
        "tags" : [ "ldapSetting" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "index",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to udpate for an LDAP directory configuration.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LdapConfigurationPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LdapConfigurationPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "LDAP directory configuration for Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LdapConfiguration"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an LDAP directory configuration.",
        "tags" : [ "ldapSetting" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "index",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "LDAP directory configuration priority update for Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LdapConfigurationUpdateIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "LDAP directory configuration for Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LdapConfiguration"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an LDAP directory configuration.",
        "tags" : [ "ldapSetting" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "index",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves an LDAP directory configuration.",
        "tags" : [ "ldapSetting" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "index",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "LDAP directory configuration for Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LdapConfiguration"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/keystore/{keyStoreName}" : {
      "get" : {
        "summary" : "Retrieves the requested keystore alias.",
        "tags" : [ "keystore" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "keyStoreName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "All the keystore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KeystoreOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a keystore alias.",
        "tags" : [ "keystore" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "keyStoreName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates a keystore alias. ",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeystoreInUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "All the keystore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KeystoreOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a keystore alias.",
        "tags" : [ "keystore" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "keyStoreName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a keystore alias.",
        "tags" : [ "keystore" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "keyStoreName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates a keystore alias. ",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeystoreInUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeystoreInUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "All the keystore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KeystoreOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/token/accesstoken/{accessTokenId}" : {
      "delete" : {
        "summary" : "Retrieves list of tokens.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "accessTokenId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves list of tokens.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "accessTokenId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Token Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/enterprisegateway/{alias}" : {
      "get" : {
        "summary" : "Retrieves an Enterprise Gateway port.",
        "tags" : [ "enterprisegateway", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An Enterprise Gateway port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseGatewayPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an Enterprise Gateway port.",
        "tags" : [ "enterprisegateway", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An Enterprise Gateway port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnterpriseGatewayPort"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An Enterprise Gateway port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseGatewayPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an Enterprise Gateway port.",
        "tags" : [ "enterprisegateway", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an Enterprise Gateway port.",
        "tags" : [ "enterprisegateway", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An Enterprise Gateway port.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnterpriseGatewayPort_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnterpriseGatewayPort_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An Enterprise Gateway port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseGatewayPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables or disables an Enterprise Gateway port.",
        "tags" : [ "enterprisegateway", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on an Enterprise Gateway port.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "An HTTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/mobileappprotection" : {
      "put" : {
        "summary" : "Update mobile application protection configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Mobile app protection configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MobileAppProtectionInOut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update mobile application protection configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Mobile app protection configuration.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MobileAppProtectionInOut_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MobileAppProtectionInOut_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Update mobile application protection configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Mobile app protection configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MobileAppProtectionInOut"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get mobile application protection configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "responses" : {
          "200" : {
            "description" : "Mobile app protection configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MobileAppProtectionInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ipaccess" : {
      "get" : {
        "summary" : "Retrieves the global IP access settings.",
        "tags" : [ "port" ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces the global IP access settings.",
        "tags" : [ "port" ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IPAccessIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Result of an administrative action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Message"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/user/{username}" : {
      "get" : {
        "summary" : "Retrieves a user account.",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "username",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A user account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a user account.",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "username",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A user account.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A user account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a user account.",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "username",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables or disables a user account.",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "username",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a user account.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a user account.",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "username",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A user account.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPutIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPutIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A user account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/dos" : {
      "get" : {
        "summary" : "Get Denial of Service rule configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "responses" : {
          "200" : {
            "description" : "DoS rule output configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DoSRuleOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/messaging/{aliasName}" : {
      "get" : {
        "summary" : "Retrieves a specific webMethods messaging connection alias.",
        "tags" : [ "messaging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "aliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A webMethods messaging connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a webMethods messaging connection alias.",
        "tags" : [ "messaging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "aliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for the webMethods messaging connection alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MessagingConnectionAliasUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A webMethods messaging connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a webMethods messaging connection alias.",
        "tags" : [ "messaging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "aliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Eanbles or disables a webMethods messaging connection alias or sets an alias as the default webMethods messaging connection alias.",
        "tags" : [ "messaging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "aliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a messaging connection alias.",
            "type" : "string",
            "enum" : [ "enable", "disable", "default" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a webMethods messaging connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingConnectionAliasActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a webMethods messaging connection alias.",
        "tags" : [ "messaging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "aliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A webMethods messaging connection alias.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MessagingConnectionAliasOut_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MessagingConnectionAliasOut_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/rule/priority/{ruleName}/ruletype/{ruleType}" : {
      "get" : {
        "summary" : "Get priority of rule in rules list.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "ruleName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "ruleType",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Rule priority configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RulePriorityOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/quiesce/port" : {
      "post" : {
        "summary" : "Sets the specified port as the quiesce port.",
        "tags" : [ "admin" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "portAlias",
          "required" : true,
          "schema" : {
            "description" : "The alias of the port to use as the quiesce port.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Information about status and message returned by a resource operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Status"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/threadpool" : {
      "get" : {
        "summary" : "Retrieves server thread pool settings.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "The server thread pool settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerThreadPoolOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates server thread pool settings.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Fields to update for the server thread pool settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerThreadPoolIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/healthgauge/{indicatorName}" : {
      "get" : {
        "summary" : "Retrieves information about a particular health indicator.",
        "tags" : [ "healthgauge" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "indicatorName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Information for a health indicator.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HealthGauge"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs an administrative action on a health indicator.",
        "tags" : [ "healthgauge" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "indicatorName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "The action to take on a health indicator.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a health indicator,",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HealthGaugeActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a health indicator.",
        "tags" : [ "healthgauge" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "indicatorName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An array of the properties to update for the indicator. Each property has two fields: propertyName and value.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HealthGaugeUpdateIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HealthGaugeUpdateIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Result of updating the property values for a health indicator.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HealthGaugeUpdateOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/urlalias/" : {
      "post" : {
        "summary" : "Creates URL Alias.",
        "tags" : [ "urlalias" ],
        "requestBody" : {
          "required" : true,
          "description" : "A URL alias in Integration Server",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UrlAliasIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A URL alias in Integration Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UrlAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/https/{alias}/resourceaccess" : {
      "put" : {
        "summary" : "Replaces the resource access settings for an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which folders and services may be accessed through the port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceAccess"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the resource access settings for an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jdbc/pool/{poolAliasName}" : {
      "get" : {
        "summary" : "Retrieves a JDBC pool alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "poolAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A JDBC connection pool alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCPoolAlias"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a JDBC pool alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "poolAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update when replacing a JDBC connection pool alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCPoolAliasPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Output of updating JDBC pool alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCPoolAliasUpdateOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a JDBC pool alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "poolAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs an administrative action on a JDBC pool alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "poolAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "Action to take on a JDBC pool",
            "type" : "string",
            "enum" : [ "test" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a JDBC pool alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "poolAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for a JDBC connection pool alias.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCPoolAliasUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCPoolAliasUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Output of updating JDBC pool alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCPoolAliasUpdateOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/logger/" : {
      "get" : {
        "summary" : "Returns a list of all audit loggers.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All audit loggers for this Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLoggerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/email" : {
      "post" : {
        "summary" : "Creates an email port.",
        "tags" : [ "email", "port" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailPortPostIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An email port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailPortInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves all email ports.",
        "tags" : [ "email", "port" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Limits the returned set of email ports to those in a particular package.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All email ports on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailPortsOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/https/{alias}/ipaccess" : {
      "delete" : {
        "summary" : "Deletes the IP access settings for an HTTPS port. Once deleted, the port will use the global IP access settings",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces the IP access settings for an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccessIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the IP access settings for an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/quiesce" : {
      "get" : {
        "summary" : "Retrieves the current server mode (active or quiesce) and the quiesce configuration. ",
        "tags" : [ "admin" ],
        "responses" : {
          "200" : {
            "description" : "Information about the current Integration Server mode and quiesce port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuiesceDetail"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enters the Integration Server into quiesce mode from active mode or exits the server from quiesce mode to active mode.",
        "tags" : [ "admin" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "Action to take on an Integration Server instance. Values are \"enterQuiesce\" or \"exitQuiesce\"",
            "type" : "string",
            "enum" : [ "enterQuiesce", "exitQuiesce" ]
          }
        }, {
          "in" : "query",
          "name" : "timeoutMinutes",
          "required" : false,
          "schema" : {
            "description" : "Number of minutes Integration Server waits for in-flight requests to complete before disabling packages. A value of 0 means the server will disable packages immediately. The timeoutMinutes value is used when setting action to \"enterQuiesce\".  ",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/outboundPassword/masterPassword/reset" : {
      "post" : {
        "summary" : "Reset all stored passwords.",
        "tags" : [ "security" ],
        "responses" : {
          "201" : {
            "description" : "Result of an action performed on the master password. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MasterPasswordActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/messaging/" : {
      "post" : {
        "summary" : "Creates a webMethods messaging connection alias.",
        "tags" : [ "messaging" ],
        "requestBody" : {
          "required" : true,
          "description" : "The webMethods messaging connection alias to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MessagingConnectionAliasIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A webMethods messaging connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/token" : {
      "get" : {
        "summary" : "Retrieves list of tokens.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Token Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/account/locking" : {
      "patch" : {
        "summary" : "Updates account locking settings.",
        "tags" : [ "user" ],
        "requestBody" : {
          "required" : true,
          "description" : "Account locking settings.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountLocking_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountLocking_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Account locking settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountLocking"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves account locking settings.",
        "tags" : [ "user" ],
        "responses" : {
          "200" : {
            "description" : "Account locking settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountLocking"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/logger/server" : {
      "get" : {
        "summary" : "Retrieves all the top-level components for which the server logger can be configured.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Result of updates to server logger facilities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JournalLoggerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates Default logging level for Integration Server.",
        "tags" : [ "logging" ],
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/diagnostics" : {
      "get" : {
        "summary" : "Returns a diagnostic archive as a ZIP attachment.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/securityprovider/" : {
      "get" : {
        "summary" : "Retrieves all security providers.",
        "tags" : [ "securityprovider" ],
        "responses" : {
          "200" : {
            "description" : "All the Security Providers in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SecurityProviderOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Adds a Security Provider.",
        "tags" : [ "securityprovider" ],
        "requestBody" : {
          "required" : true,
          "description" : "Adds a Security Provider.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityProviderIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/dos/deniedip" : {
      "get" : {
        "summary" : "Get list of denied IP addresses.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "responses" : {
          "200" : {
            "description" : "List of denied IP addresses.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeniedIPOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/service/cache" : {
      "post" : {
        "summary" : "Reset a service cache or all service caches.",
        "tags" : [ "service" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "Action to reset a service cache or all service caches.",
            "type" : "string",
            "enum" : [ "reset" ]
          }
        }, {
          "in" : "query",
          "name" : "serviceName",
          "required" : false,
          "schema" : {
            "description" : "The servicename cache to reset.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about message returned by a resource operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceCache"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/group/{groupName}" : {
      "get" : {
        "summary" : "Retrieves a group.",
        "tags" : [ "group" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a group.",
        "tags" : [ "group" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A group.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a group.",
        "tags" : [ "group" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a group.",
        "tags" : [ "group" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A group.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupPutIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupPutIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jdbc/driver/" : {
      "get" : {
        "summary" : "Retrieves all JDBC driver aliases.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the JDBC driver aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCDriverAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a JDBC driver alias.",
        "tags" : [ "jdbc" ],
        "requestBody" : {
          "required" : true,
          "description" : "A JDBC driver alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCDriverAlias"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A JDBC driver alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCDriverAlias"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/kerberos/" : {
      "get" : {
        "summary" : "Retrieves the Kerberos configuration.",
        "tags" : [ "security" ],
        "responses" : {
          "200" : {
            "description" : "Kerberos configuration for Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KerberosData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the Kerberos configuration.",
        "tags" : [ "security" ],
        "requestBody" : {
          "required" : true,
          "description" : "Kerberos configuration for Integration Server. ",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KerberosData_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KerberosData_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Kerberos configuration for Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KerberosData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/swagger/{productName}" : {
      "get" : {
        "summary" : "Retrieves the Swagger document for a product's API.",
        "tags" : [ "doc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "productName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/globalvariable" : {
      "get" : {
        "summary" : "Retrieves all global variables.",
        "tags" : [ "globalvariable" ],
        "responses" : {
          "200" : {
            "description" : "All global variables on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalVariablesOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a global variable.",
        "tags" : [ "globalvariable" ],
        "requestBody" : {
          "required" : true,
          "description" : "A global variable in Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalVariableInOut"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A global variable in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalVariableInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/scheduler" : {
      "get" : {
        "summary" : "Retrieves the current scheduler state (running or paused) and a list of scheduled tasks. ",
        "tags" : [ "scheduler" ],
        "responses" : {
          "200" : {
            "description" : "Scheduler state and scheduled tasks.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchedulerDetail"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Resumes or pauses scheduler.",
        "tags" : [ "scheduler" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on the scheduler.",
            "type" : "string",
            "enum" : [ "resume", "pause" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on scheduler.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchedulerActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/license/" : {
      "put" : {
        "summary" : "Updates Terracotta license file or Integration Server license key file.",
        "tags" : [ "server" ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates the path to where the license key file or Terracotta license file is stored.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LicenseUpdateIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "License details in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LicenseOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves license information.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "License details in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LicenseOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates Terracotta license file or Integration Server license key file.",
        "tags" : [ "server" ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates the path to where the license key file or Terracotta license file is stored.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LicenseUpdateIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LicenseUpdateIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "License details in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LicenseOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Updates Terracotta license file or Integration Server license key file.",
        "tags" : [ "server" ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates the path to where the license key file or Terracotta license file is stored.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LicenseUpdateIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "License details in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LicenseOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/ldap" : {
      "patch" : {
        "summary" : "Updates LDAP settings.",
        "tags" : [ "ldapSetting" ],
        "requestBody" : {
          "required" : true,
          "description" : "LDAP configuration ",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LdapSettingsPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LdapSettingsPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/fileaccesscontrol/" : {
      "get" : {
        "summary" : "Retrieves file access control configuration from fileAccessControl.cnf.",
        "tags" : [ "fileaccesscontrol" ],
        "responses" : {
          "200" : {
            "description" : "File access control configuration from the fileAccessControl.cnf.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileAccessControlData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the file access control configuration in fileAccessControl.cnf.",
        "tags" : [ "fileaccesscontrol" ],
        "requestBody" : {
          "required" : true,
          "description" : "File access control configuration from the fileAccessControl.cnf.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileAccessControlData_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileAccessControlData_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "File access control configuration from the fileAccessControl.cnf.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileAccessControlData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/client/{clientId}" : {
      "put" : {
        "summary" : "Update the client information specified with the client id",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "clientId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Client Registration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientRegistrationInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Client Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientRegistrationOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Removes the client specified with the client id",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "clientId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update the client information specified with the client id",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "clientId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Client Registration.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientRegistrationInput_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientRegistrationInput_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Client Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientRegistrationOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the client information specified with the client id",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "clientId",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Client Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientRegistrationOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/certificate/client" : {
      "get" : {
        "summary" : "Retrieves all client certificate details.",
        "tags" : [ "certificate" ],
        "responses" : {
          "200" : {
            "description" : "All the client certificates imported into Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientCertificates"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Imports a client certificate.",
        "tags" : [ "certificate" ],
        "requestBody" : {
          "required" : true,
          "description" : "Imports a client certificate and maps it to a user.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientCertificateIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/session" : {
      "get" : {
        "summary" : "Retrieves the session settings.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Session settings for Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the session settings.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Fields to update for Integration Server session settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sftpuser/{alias}" : {
      "get" : {
        "summary" : "Retrieves a specific SFTP user alias.",
        "tags" : [ "sftpuser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An SFTP user alias. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPUserAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an SFTP user alias.",
        "tags" : [ "sftpuser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "The fields to update for the SFTP user alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SFTPUserAliasPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An SFTP user alias. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPUserAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an SFTP user alias.",
        "tags" : [ "sftpuser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an SFTP user alias.",
        "tags" : [ "sftpuser" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "The fields to update for the SFTP user alias.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SFTPUserAliasPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SFTPUserAliasPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An SFTP user alias. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPUserAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jms/" : {
      "post" : {
        "summary" : "Creates a JMS connection alias.",
        "tags" : [ "jms" ],
        "requestBody" : {
          "required" : true,
          "description" : "The JMS connection alias to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JMSConnectionAliasIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A JMS connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/acl/{name}" : {
      "get" : {
        "summary" : "Retrieves an access control list.",
        "tags" : [ "acl" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An access control list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ACLOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an access control list.",
        "tags" : [ "acl" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An access control list.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ACLIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An access control list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ACLOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an access control list.",
        "tags" : [ "acl" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an access control list.",
        "tags" : [ "acl" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "An access control list.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ACLIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ACLIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An access control list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ACLOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/dos/deniedip/{IP}" : {
      "delete" : {
        "summary" : "Remove IP from denied IP address list.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "IP",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ftp/{alias}/ipaccess" : {
      "delete" : {
        "summary" : "Deletes the IP access settings for an FTP port. Once deleted, the port will use the global IP access settings.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces the IP access settings for an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccessIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the IP access settings for an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cachemanager/{cacheManagerName}/cache/{cacheName}" : {
      "get" : {
        "summary" : "Retrieves the requested cache.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "cacheName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A cache in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a cache.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "cacheName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update the cache with.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CacheInUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A cache in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a cache and discards all data in the cache.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "cacheName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a cache.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "cacheName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update the cache with.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CacheInUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CacheInUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A cache in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server" : {
      "get" : {
        "summary" : "Retrieves information about the server.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Information about this Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAbout"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs administrative actions on the server.",
        "tags" : [ "server" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "Action to take on an Integration Server instance.",
            "type" : "string",
            "enum" : [ "stop", "restart", "restartQuiesce", "quiesce", "exitQuiesce" ]
          }
        }, {
          "in" : "query",
          "name" : "force",
          "required" : false,
          "schema" : {
            "description" : "When true, performs action immediately even if there are active sessions.",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "timeoutMinutes",
          "required" : false,
          "schema" : {
            "description" : "When force is false, performs action when all active sessions have ended or after this interval, whichever comes first. timeoutMinutes defaults to the watt.server.clientTimeout value.",
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/csrfguard/token" : {
      "get" : {
        "summary" : "Retrieves CSRF secure token.",
        "tags" : [ "csrfguard" ],
        "responses" : {
          "200" : {
            "description" : "CSRF secure token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CsrfSecureTokenOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jwt/globalsettings" : {
      "get" : {
        "summary" : "Retrieves the JWT global settings.",
        "tags" : [ "security" ],
        "responses" : {
          "200" : {
            "description" : "JWT global settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTGlobalSettingsData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the JWT global settings.",
        "tags" : [ "security" ],
        "requestBody" : {
          "required" : true,
          "description" : "JWT global settings",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JWTGlobalSettingsData_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JWTGlobalSettingsData_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "JWT global settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTGlobalSettingsData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/outboundPassword/masterPassword/expiration" : {
      "put" : {
        "summary" : "Updates the master password expiration interval. ",
        "tags" : [ "security" ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates the Master Password Expiration Interval. ",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MasterPasswordExpirationIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Result of an action performed on the master password. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MasterPasswordActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the master password expiration properties.",
        "tags" : [ "security" ],
        "responses" : {
          "200" : {
            "description" : "Master Password expiration settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MasterPasswordExpirationDetails"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jms/{jmsAliasName}" : {
      "get" : {
        "summary" : "Retrieves a specific JMS connection alias.",
        "tags" : [ "jms" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jmsAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A JMS connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a JMS connection alias.",
        "tags" : [ "jms" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jmsAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update the JMS connection alias with.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JMSConnectionAliasUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A JMS connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a JMS connection alias.",
        "tags" : [ "jms" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jmsAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables or disables a JMS connection alias.",
        "tags" : [ "jms" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jmsAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on the JMS connection alias.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a JMS connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSConnectionAliasActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a JMS connection alias.",
        "tags" : [ "jms" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "jmsAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update the JMS connection alias with.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JMSConnectionAliasUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JMSConnectionAliasUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A JMS connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JMSConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/memory" : {
      "get" : {
        "summary" : "Retrieves available memory information for Integration Server.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Amount of memory available to Integration Server and how much of that memory is free.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerMemoryOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ftps/{alias}/ipaccess" : {
      "delete" : {
        "summary" : "Deletes the IP access settings for an FTPS port. Once deleted, the port will use the global IP access settings",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces the IP access settings for an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccessIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the IP access settings for an FTPS port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/urlalias" : {
      "get" : {
        "summary" : "Retrieves all URL aliases.",
        "tags" : [ "urlalias" ],
        "responses" : {
          "200" : {
            "description" : "All URL aliases on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UrlAliases"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/http/{alias}" : {
      "get" : {
        "summary" : "Retrieves an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An HTTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "HTTP port to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HttpPortInUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An HTTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "HTTP port to update.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HttpPortInUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HttpPortInUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An HTTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables, disables, suspends, or resumes an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on an HTTP port.",
            "type" : "string",
            "enum" : [ "enable", "disable", "suspend", "resume" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "An HTTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/rule/alertoption" : {
      "put" : {
        "summary" : "Update alert configurataion for a rule.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Rule specific alert configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleAlertOptionInOut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Update alert configuration for a rule.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Rule specific alert configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleAlertOptionInOut"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/globalvariable/{key}" : {
      "get" : {
        "summary" : "Retrieves a specific global variable.",
        "tags" : [ "globalvariable" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "key",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A global variable in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalVariableInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Updates a global variable.",
        "tags" : [ "globalvariable" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "key",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for a global variable.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalVariableUpdateIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A global variable in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalVariableInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a global variable.",
        "tags" : [ "globalvariable" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "key",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a global variable.",
        "tags" : [ "globalvariable" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "key",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for a global variable.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalVariableUpdateIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalVariableUpdateIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A global variable in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalVariableInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/log/{logName}" : {
      "get" : {
        "summary" : "Retrieves audit logger data.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "logName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "numLines",
          "required" : false,
          "schema" : {
            "description" : "Number of lines to retrieve",
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "in" : "query",
          "name" : "startLine",
          "required" : false,
          "schema" : {
            "description" : "Starting line number",
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "in" : "query",
          "name" : "descending",
          "required" : false,
          "schema" : {
            "description" : "Sort order descending/ascending",
            "type" : "boolean",
            "enum" : [ true, false ]
          }
        }, {
          "in" : "query",
          "name" : "startDate",
          "required" : false,
          "schema" : {
            "description" : "Start date",
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "endDate",
          "required" : false,
          "schema" : {
            "description" : "End date",
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "uuid",
          "required" : false,
          "schema" : {
            "description" : "Messaging UUID",
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "pageSize",
          "required" : false,
          "schema" : {
            "description" : "Number of lines per page",
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "in" : "query",
          "name" : "pageNumber",
          "required" : false,
          "schema" : {
            "description" : "Zero indexed page number to retrieve, to be used with pageSize",
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "in" : "query",
          "name" : "sortColumn",
          "required" : false,
          "schema" : {
            "description" : "The column to use for error log sorting",
            "type" : "string",
            "enum" : [ "auditTimestamp", "contextID", "rootContextID", "parentContextID", "serverID", "serviceName" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Audit logger output display.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLoggerEntryOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jndi/" : {
      "post" : {
        "summary" : "Creates a JNDI connection alias.",
        "tags" : [ "jndi" ],
        "requestBody" : {
          "required" : true,
          "description" : "The JNDI connection alias to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JNDIConnectionAliasIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A JNDI connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JNDIConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/dos/dosbyip" : {
      "get" : {
        "summary" : "Get Denial of Service by IP configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "responses" : {
          "200" : {
            "description" : "Denial of service filter based on IP addresses.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DoSIPFilterInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Update IP based Denial of Service configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Denial of service filter based on IP addresses.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DoSIPFilterInOut"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Update IP based Denial of Service configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Denial of service filter based on IP addresses.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DoSIPFilterInOut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/websocket/{alias}/ipaccess" : {
      "delete" : {
        "summary" : "Deletes the IP access settings for a WebSocket or WebSocketSecure port. Once deleted, the port will use the global IP access settings",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces the IP access settings for a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccessIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the IP access settings for a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sftpserver" : {
      "get" : {
        "summary" : "Retrieves all SFTP server aliases.",
        "tags" : [ "sftpserver" ],
        "responses" : {
          "200" : {
            "description" : "All the SFTP server aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPServerAliases"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates an SFTP server alias.",
        "tags" : [ "sftpserver" ],
        "requestBody" : {
          "required" : true,
          "description" : "The SFTP server alias to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SFTPServerAliasPostIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An SFTP server alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPServerAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jndi" : {
      "get" : {
        "summary" : "Retrieves all JNDI connection aliases.",
        "tags" : [ "jndi" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of JNDI connection aliases.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JNDIConnectionAliases"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jwt/issuer/{issuer}" : {
      "get" : {
        "summary" : "Retrieves a specific trusted issuern.",
        "tags" : [ "security" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "List of all trusted issuers for JWT authentication in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTIssuerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a trusted issuer.",
        "tags" : [ "security" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "JWT issuer",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JWTIssuerUpdateIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "JWT issuer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTIssuer"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a trusted issuer.",
        "tags" : [ "security" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a trusted issuer.",
        "tags" : [ "security" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "JWT issuer",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JWTIssuerUpdateIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JWTIssuerUpdateIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "JWT issuer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTIssuer"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/ldap/" : {
      "get" : {
        "summary" : "Retrieves LDAP settings.",
        "tags" : [ "ldapSetting" ],
        "responses" : {
          "200" : {
            "description" : "LDAP configuration ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LdapSettingsOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/group/" : {
      "get" : {
        "summary" : "Retrieves all groups.",
        "tags" : [ "group" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the groups in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Groups"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a group.",
        "tags" : [ "group" ],
        "requestBody" : {
          "required" : true,
          "description" : "A group.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/keystore/" : {
      "get" : {
        "summary" : "Retrieves all keystore aliases.",
        "tags" : [ "keystore" ],
        "responses" : {
          "200" : {
            "description" : "All the keystore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Keystores"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a keystore alias.",
        "tags" : [ "keystore" ],
        "requestBody" : {
          "required" : true,
          "description" : "Creates a keystore alias. ",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/KeystoreIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "All the keystore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KeystoreOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/setting/" : {
      "put" : {
        "summary" : "Updates multiple extended settings.",
        "tags" : [ "server" ],
        "requestBody" : {
          "required" : true,
          "description" : "Extended setting name and value.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExtendedSettingInput"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Extended setting name and value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtendedSettingOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates multiple extended settings.",
        "tags" : [ "server" ],
        "requestBody" : {
          "required" : true,
          "description" : "Extended setting name and value.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExtendedSettingInput_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExtendedSettingInput_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Extended setting name and value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtendedSettingOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/http/{alias}/resourceaccess" : {
      "put" : {
        "summary" : "Replaces the resource access settings for an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which folders and services may be accessed through the port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceAccess"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the resource access settings for an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/externalserver" : {
      "get" : {
        "summary" : "Retrieves external server List.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "External Oauth server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthExternalServer"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/healthgauge/" : {
      "get" : {
        "summary" : "Retrieves all health indicators.",
        "tags" : [ "healthgauge" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the health indicators in Integration Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HealthGaugeAllInfoOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/certificate/server/cache" : {
      "post" : {
        "summary" : "Clears the SSL cache.",
        "tags" : [ "certificate" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "Clears the cache of current SSL session information.",
            "type" : "string",
            "enum" : [ "clearSSLCache" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/rule/priority" : {
      "put" : {
        "summary" : "Update priority of rule in rules list.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "Action to be taken on rule priority.",
            "type" : "string",
            "enum" : [ "moveUp", "moveDown" ]
          }
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Input configuration to update rule priority.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RulePriorityIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Rule priority configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RulePriorityOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Update priority of rule in rules list.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "Action to take rule priotiry.",
            "type" : "string",
            "enum" : [ "moveUp", "moveDown" ]
          }
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Input configuration to update rule priority.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RulePriorityIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Rule priority configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RulePriorityOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/http/" : {
      "post" : {
        "summary" : "Creates an HTTP port.",
        "tags" : [ "http", "port" ],
        "requestBody" : {
          "required" : true,
          "description" : "HTTP port to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HttpPortIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An HTTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves all HTTP ports.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Limits the returned set of HTTP ports to those in a particular package.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All HTTP ports",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpPortList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/csrfguard" : {
      "get" : {
        "summary" : "Retrieves CSRF guard settings.",
        "tags" : [ "csrfguard" ],
        "responses" : {
          "200" : {
            "description" : "CSRF guard configuration for Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CsrfGuardInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces CSRF guard settings.",
        "tags" : [ "csrfguard" ],
        "requestBody" : {
          "required" : true,
          "description" : "CSRF guard configuration for Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CsrfGuardInOut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "CSRF guard configuration for Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CsrfGuardInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates CSRF guard settings.",
        "tags" : [ "csrfguard" ],
        "requestBody" : {
          "required" : true,
          "description" : "CSRF guard configuration for Integration Server.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CsrfGuardInOut_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CsrfGuardInOut_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "CSRF guard configuration for Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CsrfGuardInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/alertoption" : {
      "put" : {
        "summary" : "Update default alert configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Default alert configration for enterprise gateway.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AlertOptionInOut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Update default alert configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Default alert configration for enterprise gateway.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AlertOptionInOut"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get default alert configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "responses" : {
          "200" : {
            "description" : "Default alert configration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlertOptionInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/rule/{ruleName}/ruletype/{ruleType}" : {
      "get" : {
        "summary" : "Get enterprise gateway rule.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "ruleName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "ruleType",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Output configuration for a rule.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete enterprise gateway rule.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "ruleName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "ruleType",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/externalserver/{name}" : {
      "delete" : {
        "summary" : "Remove the external server specified.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves external server specified with the name.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "External Oauth server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthExternalServer"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Fully update the external server specified.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "External Oauth server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthExternalServer"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "External Oauth server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthExternalServer"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update the external server specified.",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "External Oauth server.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthExternalServer_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthExternalServer_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "External Oauth server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthExternalServer"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/saml" : {
      "get" : {
        "summary" : "Retrieves all SAML Token issuers.",
        "tags" : [ "saml" ],
        "responses" : {
          "200" : {
            "description" : "All SAML token issuers on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SAMLIssuersOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ftps/" : {
      "post" : {
        "summary" : "Creates an FTPS port.",
        "tags" : [ "ports" ],
        "requestBody" : {
          "required" : true,
          "description" : "FTPS port to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FtpsPortPostIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An FTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves all FTPS ports.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Limits the returned set of FTP ports to those in a particular package.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All FTPS ports.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpsPortList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ftp/" : {
      "post" : {
        "summary" : "Creates an FTP port.",
        "tags" : [ "ports" ],
        "requestBody" : {
          "required" : true,
          "description" : "FTP port to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FtpPortPostIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An FTP port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves all FTP ports.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Limits the returned set of FTP ports to those in a particular package.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All FTP ports. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FtpPortList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/account/password/restriction" : {
      "patch" : {
        "summary" : "Updates password restriction settings.",
        "tags" : [ "user" ],
        "responses" : {
          "200" : {
            "description" : "Password restriction settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordRestriction"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves password restriction settings.",
        "tags" : [ "user" ],
        "responses" : {
          "200" : {
            "description" : "Password restriction settings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordRestriction"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/logger/server/{component}" : {
      "get" : {
        "summary" : "Retrieves the server logger facility codes and logging levels for a particular component.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "component",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A server logger component",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JournalLoggerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the default logging level for a top-level component.",
        "tags" : [ "logging" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "component",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/certificate/client/issuer/{issuer}/usage/{usage}/serialNum/{serialNum}" : {
      "get" : {
        "summary" : "Retrieves details for the requested client certificate.",
        "tags" : [ "certificate" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "usage",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "serialNum",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Client certificate usage and user mapping details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientCertificateDetails"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a client certificate.",
        "tags" : [ "certificate" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "usage",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "serialNum",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cachemanager/{cacheManagerName}/cache" : {
      "get" : {
        "summary" : "Retrieves all caches for the requested cache manager.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "All the caches in a cache manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Caches"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a cache.",
        "tags" : [ "caching" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "cacheManagerName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "The cache to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CacheIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A cache in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/node/{interface}" : {
      "get" : {
        "summary" : "Retrieves a node.",
        "tags" : [ "node" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "interface",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A namespace node.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a node.",
        "tags" : [ "node" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "interface",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A namespace node.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NodeIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NodeIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A namespace node.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/https/" : {
      "post" : {
        "summary" : "Creates an HTTPS port.",
        "tags" : [ "http", "port" ],
        "requestBody" : {
          "required" : true,
          "description" : "HTTPS port to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HttpsPortIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An HTTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves all HTTPS ports.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Limits the returned set of HTTP ports to those in a particular package.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All HTTP ports.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpsPortList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/dashboard/config" : {
      "get" : {
        "summary" : "Retrieves Statistics Data Collector module configurations.",
        "tags" : [ "dashboardconfig" ],
        "responses" : {
          "200" : {
            "description" : "Configurations of the Statistics Data Collector module.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardConfig"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces the configurations of Statistics Data Collector module.",
        "tags" : [ "dashboardconfig" ],
        "requestBody" : {
          "required" : true,
          "description" : "Configurations of the Statistics Data Collector module.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DashboardConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Configurations of the Statistics Data Collector module.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardConfig"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs an administrative action on the Statistics Data Collector module.",
        "tags" : [ "dashboardconfig" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "The action to take on the Statistics Data Collector module. 'restartCollector' restarts the Statistics Data Collector module, 'restoreDefaults' sets the Statistics Data Collector module configurations back to default settings. ",
            "type" : "string",
            "enum" : [ "restartCollector,restoreDefaults" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Output of the administrative action on the Statistics Data Collector module.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardConfigActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Modifies the configurations of Statistics Data Collector module.",
        "tags" : [ "dashboardconfig" ],
        "requestBody" : {
          "required" : true,
          "description" : "Update the configuration variables of the Statistics Data Collector module.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DashboardConfigUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DashboardConfigUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Configurations of the Statistics Data Collector module.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardConfig"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jwt/issuer/{issuer}/issuerSkew" : {
      "delete" : {
        "summary" : "Deletes an issuer-skew mapping.",
        "tags" : [ "security" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/hotdeployment/" : {
      "get" : {
        "summary" : "Retrieves the hot deployment configuration.",
        "tags" : [ "hotDeployment" ],
        "responses" : {
          "200" : {
            "description" : "Hot deployment configuration.  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HotDeploymentData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the hot deployment configuration.",
        "tags" : [ "hotDeployment" ],
        "requestBody" : {
          "required" : true,
          "description" : "Hot deployment configuration.  ",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HotDeploymentData_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HotDeploymentData_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Hot deployment configuration.  ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HotDeploymentData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/package/{packageName}" : {
      "get" : {
        "summary" : "Retrieves information for a specific package.",
        "tags" : [ "packages" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "packageName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Information for a package.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PackageInfoOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a package.",
        "tags" : [ "packages" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "packageName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "safe",
          "required" : false,
          "schema" : {
            "description" : "Parameter that specifies if the safe delete option should be used.",
            "type" : "string",
            "enum" : [ "true", "false" ]
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs an administrative action on an installed package. Only the 'archive' action has fields that must be included in the body of the request.",
        "tags" : [ "packages" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "packageName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "The action to take on a package where 'archive' action archives a package, 'disable' disables a package, 'enable' enables a package, 'reload' reloads a package, 'activate' activates a package, and 'recover' recovers a package from the salvage directory. Additionally, the 'start' action enables a package, the 'stop' action disables a package, and the 'restart' action reloads a package.",
            "type" : "string",
            "enum" : [ "disable", "enable", "reload", "activate", "recover", "archive" ]
          }
        }, {
          "in" : "query",
          "name" : "activateOnRecover",
          "required" : false,
          "schema" : {
            "description" : "Flag used in conjunction with the 'recover' action to specify whether the package should beactivated upon recovery.",
            "type" : "string",
            "enum" : [ "true", "false" ]
          }
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to use for an archive action on a package.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PackagesManagerArchiveIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Result of an administrative action on a package.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PackagesManagerActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sftpserver/{alias}" : {
      "get" : {
        "summary" : "Retrieves a specific SFTP server alias.",
        "tags" : [ "sftpserver" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "An SFTP server alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPServerAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an SFTP server alias.",
        "tags" : [ "sftpserver" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update in the SFTP server alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SFTPServerAliasPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An SFTP server alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPServerAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an SFTP server alias.",
        "tags" : [ "sftpserver" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an SFTP server alias.",
        "tags" : [ "sftpserver" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update in the SFTP server alias.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SFTPServerAliasPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SFTPServerAliasPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An SFTP server alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SFTPServerAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/dos/globaldos" : {
      "post" : {
        "summary" : "Update global Denial of Service configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Global denial of service filter.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DoSGlobalFilterInOut"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get global Denial of Service configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "responses" : {
          "200" : {
            "description" : "Global denial of service filter.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DoSGlobalFilterInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Update global Denial of Service configuration.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Global denial of service filter.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DoSGlobalFilterInOut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/remoteserver/{alias}" : {
      "get" : {
        "summary" : "Retrieves a remote server alias.",
        "tags" : [ "remote" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A Remote Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemoteServerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a remote server alias.",
        "tags" : [ "remote" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A Remote Server",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoteServerData"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A Remote Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemoteServerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a remote server alias.",
        "tags" : [ "remote" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Performs administrative actions on a remote server alias.",
        "tags" : [ "remote" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a remote server alias.",
            "type" : "string",
            "enum" : [ "test" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a remote server alias.",
        "tags" : [ "remote" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Remote server alias fields to update.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoteServerUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoteServerUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A Remote Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemoteServerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/remoteserver/" : {
      "get" : {
        "summary" : "Retrieves all remote server aliases.",
        "tags" : [ "remote" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the remote server aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemoteServers"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a remote server alias.",
        "tags" : [ "remote" ],
        "requestBody" : {
          "required" : true,
          "description" : "A Remote Server",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoteServerData"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A Remote Server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemoteServerData"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/http/{alias}/ipaccess" : {
      "delete" : {
        "summary" : "Deletes the IP access settings for an HTTP port. Once deleted, the port will use the global IP access settings.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces the IP access settings for an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccessIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the IP access settings for an HTTP port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which hosts are or are not allowed to access Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/websocket/{alias}" : {
      "get" : {
        "summary" : "Retrieves a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A WebSocket or WebSocketSecure port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebSocketPortInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A WebSocket or WebSocketSecure port in Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebSocketPortPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A WebSocket or WebSocketSecure port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebSocketPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A WebSocket or WebSocketSecure port in Integration Server.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebSocketPortPatchIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebSocketPortPatchIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A WebSocket or WebSocketSecure port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebSocketPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables or disables a WebSocket or WebSocketSecure port.",
        "tags" : [ "websocket", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "The action to take on a WebSocket or WebSocketSecure port.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "A WebSocket or WebSocketSecure port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebSocketPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/rule" : {
      "put" : {
        "summary" : "Update enterprise gateway rule.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Rule configuration for update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateRuleIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get enterprise gateway rules.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration for listing rules.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RulesOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Update enterprise gateway rule.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Rule configuration for update.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateRuleIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateRuleIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create enterprise gateway rule.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "requestBody" : {
          "required" : true,
          "description" : "Input configuration for creating a rule in enterprise gateway.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateRuleIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Common output configuration for enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommonOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/internalserver/{alias}/resourceaccess" : {
      "put" : {
        "summary" : "Replaces the resource access settings for an Internal Server port.",
        "tags" : [ "internalserver", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which folders and services may be accessed through the port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceAccess"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the resource access settings for an Internal Server port.",
        "tags" : [ "internalserver", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/https/{alias}" : {
      "get" : {
        "summary" : "Retrieves an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An HTTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "HTTPS port to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HttpsPortInUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An HTTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "HTTPS port to update.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HttpsPortInUpdate_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HttpsPortInUpdate_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "An HTTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enables, disables , suspends, or resumes an HTTPS port.",
        "tags" : [ "http", "port" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on an HTTPS port.",
            "type" : "string",
            "enum" : [ "enable", "disable", "suspend", "resume" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "An HTTPS port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpsPort"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/saml/{current_issuer}" : {
      "put" : {
        "summary" : "Updates the SAML token issuer.",
        "tags" : [ "saml" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "current_issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A SAML token issuer in Integration Server.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SAMLIssuerInOut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A SAML token issuer in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SAMLIssuerInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the SAML token issuer.",
        "tags" : [ "saml" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "current_issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "A SAML token issuer in Integration Server.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SAMLIssuerInOut_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SAMLIssuerInOut_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A SAML token issuer in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SAMLIssuerInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/internalserver" : {
      "post" : {
        "summary" : "Creates an Internal Server port.",
        "tags" : [ "internalserver", "port" ],
        "requestBody" : {
          "required" : true,
          "description" : "An Internal Server port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InternalServerPortPostIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An Internal Server port in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerPortPostOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jdbc/driver/{driverAliasName}" : {
      "get" : {
        "summary" : "Retrieves a JDBC driver alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "driverAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A JDBC driver alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCDriverAlias"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a JDBC driver alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "driverAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update when replacing the JDBC driver alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCDriverAliasPutIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Output of updating the JDBC driver alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCDriverAliasUpdateOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a JDBC driver alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "driverAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a JDBC driver alias.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "driverAliasName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for the JDBC driver alias.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCDriverAliasIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCDriverAliasIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Output of updating the JDBC driver alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCDriverAliasUpdateOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port" : {
      "get" : {
        "summary" : "Retrieves all ports for Integration Server or for a package. This operation does not support the expand parameter.",
        "tags" : [ "port" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Use this parameter to limit the returned set of ports to those in a particular package. If not used, all server ports are returned.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of ports.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PortList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Sets the primary port for Integration Server.",
        "tags" : [ "port" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "description" : "The action to perform. The only action value is \"setPrimary\", which sets the primary port to the port specified by the alias parameter.",
            "type" : "string",
            "enum" : [ "setPrimary" ]
          }
        }, {
          "in" : "query",
          "name" : "alias",
          "required" : true,
          "schema" : {
            "description" : "Alias of the port to set as the primary port.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Result of an administrative action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Message"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/setting/{settingName}" : {
      "delete" : {
        "summary" : "Remove multiple extended settings.",
        "tags" : [ "server" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "settingName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates an extended setting.",
        "tags" : [ "server" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "settingName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Updated extended setting value.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExtendedResourceValueInput_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExtendedResourceValueInput_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Extended setting name and value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtendedSettingOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the value of a specific extended setting.",
        "tags" : [ "server" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "settingName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Extended setting name and value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtendedSettingOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/grpc/channel" : {
      "get" : {
        "summary" : "Retrieves all Grpc channels.",
        "tags" : [ "grpc" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All the Grpc channels in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrpcChannelsOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jwt/issuer/" : {
      "get" : {
        "summary" : "Retrieves a list of all trusted issuers for JWT authentication.",
        "tags" : [ "security" ],
        "responses" : {
          "200" : {
            "description" : "List of all trusted issuers for JWT authentication in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTIssuerOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a trusted issuer.",
        "tags" : [ "security" ],
        "requestBody" : {
          "required" : true,
          "description" : "JWT issuer",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JWTIssuer"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "JWT issuer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTIssuer"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/certificate/client/issuer/{issuer}/oldUsage/{oldUsage}/serialNum/{serialNum}" : {
      "put" : {
        "summary" : "Replaces a client certificate.",
        "tags" : [ "certificate" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "oldUsage",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "serialNum",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for a client certificate.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientCertificateUpdateIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated client certificate.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientCertificateUpdateOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates a client certificate.",
        "tags" : [ "certificate" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "oldUsage",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "serialNum",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update for a client certificate.",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientCertificateUpdateIn_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientCertificateUpdateIn_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated client certificate.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientCertificateUpdateOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/truststore/" : {
      "get" : {
        "summary" : "Retrieves all truststore aliases.",
        "tags" : [ "keystore" ],
        "responses" : {
          "200" : {
            "description" : "All the truststore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Truststores"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a truststore alias.",
        "tags" : [ "keystore" ],
        "requestBody" : {
          "required" : true,
          "description" : "Creates a truststore alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TruststoreIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "All the truststore aliases in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TruststoreOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/enterprisegateway/" : {
      "get" : {
        "summary" : "Retrieves all Enterprise Gateway ports.",
        "tags" : [ "enterprisegateway", "port" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Limits the returned set of Enterprise Gateway ports to those in a particular package.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All Enterprise Gateway ports on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseGatewayPortList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates an Enterprise Gateway port.",
        "tags" : [ "enterprisegateway", "port" ],
        "requestBody" : {
          "required" : true,
          "description" : "An Enterprise Gateway port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnterpriseGatewayPort"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An Enterprise Gateway port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseGatewayPortOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/server/sso" : {
      "get" : {
        "summary" : "Retrieves the MWS single sign-on setting.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "The MWS single sign-on setting.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleSignOnOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates the MWS single sign-on setting.",
        "tags" : [ "server" ],
        "responses" : {
          "200" : {
            "description" : "Updates the MWS single sign-on setting.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleSignOnIn"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/ftp/{alias}/resourceaccess" : {
      "put" : {
        "summary" : "Replaces the resource access settings for an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Indicates which folders and services may be accessed through the port.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceAccess"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Retrieves the resource access settings for an FTP port.",
        "tags" : [ "ports" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "alias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates which folders and services may be accessed through the port.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/internalserver/" : {
      "get" : {
        "summary" : "Retrieves all Internal Server ports.",
        "tags" : [ "internalserver", "port" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "package",
          "required" : false,
          "schema" : {
            "description" : "Limits the returned set of Internal Server ports to those in a particular package.",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All Internal Server ports on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerPortList"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/globalsetting/" : {
      "put" : {
        "summary" : "Full update for Global Setting.",
        "tags" : [ "security.oauth" ],
        "requestBody" : {
          "required" : true,
          "description" : "Global setting",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthGlobalSetting"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Global setting",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthGlobalSetting"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Updates Global Setting.",
        "tags" : [ "security.oauth" ],
        "requestBody" : {
          "required" : true,
          "description" : "Global setting",
          "content" : {
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthGlobalSetting_Patch"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthGlobalSetting_Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Global setting",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthGlobalSetting"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/grpc/channel/{channelName}" : {
      "get" : {
        "summary" : "Retrieves a Grpc channel.",
        "tags" : [ "grpc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "channelName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A Grpc channel.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrpcChannelOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Enable or Disable a Grpc channel.",
        "tags" : [ "grpc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "channelName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "query",
          "name" : "action",
          "required" : false,
          "schema" : {
            "description" : "The action to take on a Grpc channel.",
            "type" : "string",
            "enum" : [ "enable", "disable" ]
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Result of an administrative action on a Grpc Channel.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrpcChannelActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Replaces a channel configuration.",
        "tags" : [ "grpc" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "channelName",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Fields to update the Grpc Channel with.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GrpcChannelInUpdate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "A Grpc channel.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrpcChannelOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/outboundPassword/masterPassword" : {
      "put" : {
        "summary" : "Updates master password.",
        "tags" : [ "security" ],
        "requestBody" : {
          "required" : true,
          "description" : "Updates the Master Password.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MasterPasswordIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Result of an action performed on the master password. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MasterPasswordActionOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/saml/{issuer}" : {
      "get" : {
        "summary" : "Retrieves the requested SAML issuer.",
        "tags" : [ "saml" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A SAML token issuer in Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SAMLIssuerInOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the SAML token issuer.",
        "tags" : [ "saml" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jdbc/pool/" : {
      "get" : {
        "summary" : "Retrieves all JDBC pool aliases.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All JDBC connection pool aliases on Integration Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCPoolAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a JDBC pool alias.",
        "tags" : [ "jdbc" ],
        "requestBody" : {
          "required" : true,
          "description" : "A JDBC connection pool alias.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JDBCPoolAlias"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A JDBC connection pool alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCPoolAlias"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/mqtt/" : {
      "post" : {
        "summary" : "Creates an MQTT connection alias.",
        "tags" : [ "mqtt" ],
        "requestBody" : {
          "required" : true,
          "description" : "The MQTT connection alias to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MQTTConnectionAliasIn"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "An MQTT connection alias.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MQTTConnectionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/globalsetting" : {
      "get" : {
        "summary" : "Retrieves Global OAuth Setting.",
        "tags" : [ "security.oauth" ],
        "responses" : {
          "200" : {
            "description" : "Global setting",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthGlobalSetting"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jdbc/function/" : {
      "get" : {
        "summary" : "Retrieves all JDBC functions.",
        "tags" : [ "jdbc" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "expand",
          "required" : false,
          "schema" : {
            "description" : "Indicate whether links in the response should be expanded",
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All JDBC functions in Integration Server. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JDBCFunctionAliasOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/enterprisegateway/filters" : {
      "get" : {
        "summary" : "List supported filters for enterprise gateway.",
        "tags" : [ "enterprisegateway", "eg", "gateway" ],
        "responses" : {
          "200" : {
            "description" : "List of supported filters in enterprise gateway.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilterListOut"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/jwt/issuer/{issuer}/truststoreAlias/{truststoreAlias}/certificateAlias/{certificateAlias}" : {
      "delete" : {
        "summary" : "Deletes an issuer-certificate mapping.",
        "tags" : [ "security" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "issuer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "truststoreAlias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "certificateAlias",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/port/diagnostic" : {
      "get" : {
        "summary" : "Retrieves a link to the diagnostic port for Integration Server.",
        "tags" : [ "port" ],
        "responses" : {
          "200" : {
            "description" : "A link to a port resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PortLink"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/oauth/client/{name}/version/{version}" : {
      "get" : {
        "summary" : "Retrieves the client information specified with the client name and version",
        "tags" : [ "security.oauth" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "name",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "in" : "path",
          "name" : "version",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Client Registration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientRegistrationOutput"
                }
              }
            }
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/swagger" : {
      "get" : {
        "summary" : "Retrieves the Swagger documents for all administrative APIs in the Integration Server.",
        "tags" : [ "doc" ],
        "responses" : {
          "200" : {
            "description" : "operation succeeded"
          },
          "4XX" : {
            "description" : "client error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX" : {
            "description" : "server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "FtpPortPutIn" : {
        "type" : "object",
        "required" : [ "number", "packageName" ],
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean",
            "default" : false
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "pasvAddr" : {
            "description" : "Specifies the address that should be sent by the PORT command.",
            "type" : "string"
          }
        }
      },
      "KeystoreInUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "keyStoreDescription" : {
            "description" : "Description of the keystore. ",
            "type" : "string"
          },
          "keyStoreType" : {
            "description" : "Certificate file format of the keystore file.",
            "type" : "string"
          },
          "keyStoreProvider" : {
            "description" : "Provider that is used for the keystore.",
            "type" : "string"
          },
          "keyStoreLocation" : {
            "description" : "Location of the keystore file on the server. This can be the full pathname or a relative path in relation to the Integration Server.",
            "type" : "string"
          },
          "keyStorePassword" : {
            "description" : "Password for the keystore file associated with this alias.",
            "type" : "string"
          },
          "configuredKeyAliases" : {
            "description" : "Key Aliases of the keystore. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyAlias"
            }
          },
          "isHsm" : {
            "description" : "Whether the keystore is stored on a Hardware Security Module (HSM) device.",
            "type" : "string",
            "enum" : [ "true", "false" ]
          }
        }
      },
      "WebSocketPortInOut" : {
        "type" : "object",
        "required" : [ "alias", "number", "packageName" ],
        "properties" : {
          "alias" : {
            "description" : "An unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean",
            "default" : false
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "IP address to which to bind this port. Use a bind address if your machine has multiple IP addresses and you want the port to use this specific address.",
            "type" : "string"
          },
          "backlog" : {
            "description" : "The number of requests that can remain in the queue for an enabled port before Integration Server begins rejecting requests.",
            "type" : "integer",
            "format" : "int32",
            "default" : 6000
          },
          "minThread" : {
            "description" : "The minimum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "maxThread" : {
            "description" : "The maximum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 200
          },
          "threadPriority" : {
            "description" : "Priority with which the Java treats threads from this thread pool. The larger the number, the higher the priority.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
            "default" : 5
          },
          "idleTimeout" : {
            "description" : "When to close the WebSocket client connection if the server has not received a request from the client within this timeout value.",
            "type" : "integer",
            "format" : "int64",
            "default" : 300000
          },
          "clientAuth" : {
            "description" : "The type of client authentication you want Integration Server to perform for requests that arrive on this WebSocket or WebSocketSecure port. Integration Server uses user name and password.",
            "type" : "string",
            "enum" : [ "basic" ],
            "default" : "basic"
          },
          "secure" : {
            "description" : "Whether this port uses TLS for secure communications. This must be set to true for a WebSocketSecure port",
            "type" : "boolean",
            "default" : false
          },
          "keystoreAlias" : {
            "description" : "Name of the keystoreAlias used by the WebSocketSecure port where the keystore contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Name of the keyAlias within a keyStoreAlias used by the WebSocketSecure port.",
            "type" : "string"
          }
        }
      },
      "EmailNotificationIn" : {
        "type" : "object",
        "properties" : {
          "smtpServer" : {
            "description" : "Address of the Simple Mail Transfer Protocol (SMTP) server through which Integration Server issues email messages.",
            "type" : "string"
          },
          "port" : {
            "description" : "Port that Integration Server connects to on the specified SMTP server.",
            "type" : "integer",
            "format" : "int64"
          },
          "tlsSettings" : {
            "description" : "Type of SSL encryption that Integration Server uses when communicating with the SMTP server port.",
            "type" : "string"
          },
          "trustStoreAlias" : {
            "description" : "Alias for the truststore that contains the list of certificates that Integration Server uses to validate the trust relationship between Integration Server and the SMTP server. ",
            "type" : "string"
          },
          "internalEmail" : {
            "description" : "Email address to which Integration Server sends administrator messages, such as license key expiration, Enterprise Gateway rule violations, and messages about critical log entries. ",
            "type" : "string"
          },
          "serviceEmail" : {
            "description" : "Email address to which Integration Server sends a message when a service failure occurs.",
            "type" : "string"
          },
          "defaultEmailCharset" : {
            "description" : "Character set that Integration Server uses for the emails that it sends.",
            "type" : "string"
          },
          "username" : {
            "description" : "The email address of the account that Integration Server uses to connect to the SMTP server.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password for the account that Integration Server uses to connect to the SMTP server.",
            "type" : "string"
          }
        }
      },
      "SAMLIssuersOut" : {
        "type" : "object",
        "properties" : {
          "samlissuers" : {
            "description" : "All SAML token issuers.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/SAMLIssuerInOut"
              } ]
            }
          }
        }
      },
      "AccountLocking_Patch" : {
        "type" : "object",
        "properties" : {
          "lockingEnabled" : {
            "description" : "Whehter account locking is enabled.",
            "type" : "boolean"
          },
          "maxLoginAttempts" : {
            "$ref" : "#/components/schemas/LoginAttemptFrequency"
          },
          "lockoutDuration" : {
            "$ref" : "#/components/schemas/TimeDuration"
          },
          "policyApplicability" : {
            "description" : "Users to which account locking policy applies.",
            "type" : "string",
            "enum" : [ "allUsers", "allUsersExceptPredefinedUsers" ]
          }
        }
      },
      "SAMLIssuerInOut" : {
        "type" : "object",
        "required" : [ "issuer", "truststoreAlias", "certificateAlias" ],
        "properties" : {
          "issuer" : {
            "description" : "Name of the SAML token issuer.",
            "type" : "string"
          },
          "truststoreAlias" : {
            "description" : "Truststore alias associated with the SAML token issuer.",
            "type" : "string"
          },
          "certificateAlias" : {
            "description" : "Certificate alias associated with the Truststore alias.",
            "type" : "string"
          },
          "clockSkew" : {
            "description" : "Clock difference between the Integration Server and the SAML token issuer.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }
      },
      "JNDIConnectionAliasActionOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Descriptive success or failure message for performing an action on a JNDI connection alias.",
            "type" : "string"
          }
        }
      },
      "GroupPutIn_Patch" : {
        "type" : "object",
        "properties" : {
          "users" : {
            "description" : "Users that belong to the group.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SecurityProviders" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Security provider name",
            "type" : "string"
          },
          "version" : {
            "description" : "Security provider version",
            "type" : "number",
            "format" : "float"
          },
          "KeyStoreTypes" : {
            "description" : "Types of keystores used by the security provider",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JWTIssuerUpdateIn" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "description" : "Description for trusted issuer.",
            "type" : "string"
          },
          "maxIssuerSkew" : {
            "description" : "Maximum number of seconds by which the JWT issuer and Integration Server clocks can differ and still allow JWT expiry (exp) and not before (nbf) validations to succeed.",
            "type" : "integer",
            "format" : "int32"
          },
          "issuerCertificateMappings" : {
            "description" : "List of all issuer-certificate mappings.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IssuerCertMappingsData"
            }
          }
        }
      },
      "QuiesceOptions" : {
        "type" : "object",
        "properties" : {
          "auditingDisabled" : {
            "description" : "Whether audit logging will be disabled when in quiesce mode.",
            "type" : "boolean"
          },
          "systemTasksDisabled" : {
            "description" : "Whether system tasks that interact with a database will be disabled when in quiesce mode.",
            "type" : "boolean"
          },
          "alertingDisabled" : {
            "description" : "Whether notifications will be disabled when in quiesce mode.",
            "type" : "boolean"
          },
          "statisticsDataCollectorDisabled" : {
            "description" : "Whether the Statistics Data Collector will be disabled when in quiesce mode.",
            "type" : "boolean"
          }
        }
      },
      "SFTPServerAliasPutIn" : {
        "type" : "object",
        "required" : [ "version", "hostName", "port" ],
        "properties" : {
          "version" : {
            "description" : "Version of the SFTP client.",
            "type" : "string",
            "enum" : [ "v1", "v2" ]
          },
          "hostName" : {
            "description" : "The host name or IP address of the SFTP server.",
            "type" : "string"
          },
          "port" : {
            "description" : "The port number of the SFTP server. The port number must be within the range of 0 and 65535 (inclusive).",
            "type" : "integer",
            "format" : "int32"
          },
          "hostKeyLocation" : {
            "description" : "Public key of the SFTP server.",
            "type" : "string"
          },
          "preferredKeyExchangeAlgorithms" : {
            "description" : "The algorithms that Integration Server presents to the SFTP server for key exchange.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "proxyAlias" : {
            "description" : "The proxy alias through which the request to the SFTP server is to be routed.",
            "type" : "string"
          },
          "preferredMACS2C" : {
            "description" : "A list of preferred server-to-client Message Authentication Code (MAC) algorithms.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredMACC2S" : {
            "description" : "A list of preferred client-to-server Message Authentication Code (MAC) algorithms.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredCiphersS2C" : {
            "description" : "A list of preferred server-to-client ciphers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredCiphersC2S" : {
            "description" : "A list of preferred client-to-server ciphers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "minDHKeySize" : {
            "description" : "The minimum DH key size. The default value is 1024. This field applies when the SFTP client version is v2.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxDHKeySize" : {
            "description" : "The maximum DH key size. The default value is 8192. This field applies when the SFTP client version is v2.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "CacheManagerInUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "tsaURL" : {
            "description" : "Comma-separated list of URLs for the servers in a Terracotta Server Array.",
            "type" : "string"
          },
          "rejoin" : {
            "description" : "Whether to automatically rejoin a cluster if disconnected.",
            "type" : "boolean"
          }
        }
      },
      "TruststoreOut" : {
        "type" : "object",
        "required" : [ "keyStoreName", "keyStoreType", "keyStoreProvider", "keyStoreLocation" ],
        "properties" : {
          "keyStoreName" : {
            "description" : "Alias for the truststore.",
            "type" : "string"
          },
          "keyStoreDescription" : {
            "description" : "Description of the truststore alias. ",
            "type" : "string"
          },
          "keyStoreType" : {
            "description" : "Certificate file format of the truststore.",
            "type" : "string"
          },
          "keyStoreProvider" : {
            "description" : "Provider that is used for the truststore.",
            "type" : "string"
          },
          "keyStoreLocation" : {
            "description" : "Location of the truststore file on the server. This can be the full pathname, or a relative path in relation to the Integration Server.",
            "type" : "string"
          },
          "configuredAliases" : {
            "$ref" : "#/components/schemas/List"
          }
        }
      },
      "SFTPUserAliasPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "userName" : {
            "description" : "The user name for the SFTP user account.",
            "type" : "string"
          },
          "authenticationType" : {
            "description" : "The type of authentication that Integration Server uses to authenticate itself to the SFTP server.",
            "type" : "string",
            "enum" : [ "password", "publicKey" ]
          },
          "sftpServerAlias" : {
            "description" : "The alias of the SFTP server to which you want the specified user to connect.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password for the specified SFTP user. This field applies when authenticationType is set to password.",
            "type" : "string"
          },
          "passPhrase" : {
            "description" : "The passphrase for the private key for the specified SFTP user. Supply a passPhrase only if the private key specified in privateKeLocation requires a passphrase. This field applies when authenticationType is set to publicKey.",
            "type" : "string"
          },
          "privateKeyFileLocation" : {
            "description" : "The location of the private key of the specified SFTP user. This field applies when authenticationType is set to publicKey.",
            "type" : "string"
          },
          "maximumRetries" : {
            "description" : "The number of times Integration Server attempts to connect to the SFTP server. The maximum allowed value is 6. The minimum allowed value is 1. The default is 6 retries. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
            "type" : "integer",
            "format" : "int32"
          },
          "connectionTimeout" : {
            "description" : "The number of  seconds that Integration Server waits for a response from the SFTP server before timing out and terminating the request. The default is 0, which indicates that the session never times out. ",
            "type" : "integer",
            "format" : "int32"
          },
          "sessionTimeout" : {
            "description" : "The number of minutes Integration Server waits before terminating an idle session. The default is 10 minutes.",
            "type" : "integer",
            "format" : "int32"
          },
          "compression" : {
            "description" : "The compression algorithm for the data.",
            "type" : "string",
            "enum" : [ "none", "zlib" ]
          },
          "compressionLevel" : {
            "description" : "The compression level to use if you set the compression field to zlib. The minimum allowed value is 1. The maximum is 6. The default is 6. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
            "type" : "integer",
            "format" : "int32"
          },
          "strictHostKeyChecking" : {
            "description" : "Whether Integration Server verifies the host key of the SFTP server before establishing a connection to the SFTP server.",
            "type" : "string"
          }
        }
      },
      "AntiVirusFilterInOut" : {
        "type" : "object",
        "properties" : {
          "isAntiVirusFilterEnabled" : {
            "description" : "Whether Enterprise Gateway Server is to scan incoming message for virus.",
            "type" : "boolean",
            "enum" : [ false, true ],
            "default" : false
          },
          "icapEngineName" : {
            "description" : "A name for the ICAP server.",
            "type" : "string"
          },
          "icapHost" : {
            "description" : "The host name or IP address of the machine on which the ICAP server is running.",
            "type" : "string"
          },
          "icapPort" : {
            "description" : "The port number on which the ICAP server is listening.",
            "type" : "string"
          },
          "icapService" : {
            "description" : "The name of the service exposed by the ICAP server that can be used to scan request payload for viruses.",
            "type" : "string"
          }
        }
      },
      "EnterpriseGatewayPortList" : {
        "type" : "object",
        "properties" : {
          "enterpriseGatewayPorts" : {
            "description" : "All Enterprise Gateway ports.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/EnterpriseGatewayPortLink"
              }, {
                "$ref" : "#/components/schemas/EnterpriseGatewayPortOut"
              } ]
            }
          }
        }
      },
      "InternalServerPortPostIn_Patch" : {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string"
          },
          "alias" : {
            "description" : "An alias for the port that is unique for this Integration Server.",
            "type" : "string"
          },
          "protocol" : {
            "description" : "Port protocol.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether this Internal Server port is enabled.",
            "type" : "boolean"
          },
          "enterpriseGatewayHost" : {
            "description" : "The host name or IP address of the machine on which\r\nEnterprise Gateway Server is running.",
            "type" : "string"
          },
          "enterpriseGatewayPort" : {
            "description" : "The registration port on Enterprise Gateway Server.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxConnection" : {
            "description" : "The number of connections maintained between Enterprise\r\nGateway Server and the Internal Server.",
            "type" : "integer",
            "format" : "int32"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos", "requestClientCertification", "requireClientCertification" ]
          },
          "threadPool" : {
            "description" : "Whether port has a its own pool of threads.",
            "type" : "boolean"
          },
          "minimumThreads" : {
            "description" : "if threadpool is true, the minimum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "maximumThreads" : {
            "description" : "if threadpool is true, the maximum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "if threadpool is true, the priority of threads in the thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "username" : {
            "description" : "The name of the user on Enterprise Gateway Server that\r\nthe Internal Server should connect as.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password of the user on Enterprise Gateway Server\r\nthat the Internal Server should connect as.",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore that contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "kerberosSettings" : {
            "description" : "The Kerberos settings for the port. This field is present when clientAuth is \"requestKerberos\" or \"requireKerberos\".",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KerberosSettings"
            }
          }
        }
      },
      "Status" : {
        "type" : "object",
        "required" : [ "status", "message" ],
        "properties" : {
          "status" : {
            "description" : "Status",
            "type" : "integer",
            "format" : "int32"
          },
          "message" : {
            "description" : "Message",
            "type" : "string"
          }
        }
      },
      "LdapSettingsPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "provider" : {
            "description" : "Specifies the type of external directory server, if any, that this server uses for user account and group information. ",
            "type" : "string",
            "enum" : [ "local", "LDAP" ]
          },
          "cacheSize" : {
            "description" : "Maximum number of LDAP users Integration Server can keep in memory in the user cache.",
            "type" : "integer",
            "format" : "int32"
          },
          "cacheExpire" : {
            "description" : "Number of minutes an LDAP user's credentials\r\n(userid and password) can remain in the credential\r\ncache before being purged",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "JNDIConnectionAliasUpdate" : {
        "type" : "object",
        "properties" : {
          "providerURL" : {
            "description" : "The URL of the initial context for sessions with the JNDI provider.",
            "type" : "string"
          },
          "initialContextFactory" : {
            "description" : "The class name of the JNDI provider. The initial context is the starting point that the JNDI provider users to resolve names for naming and directory operations.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JNDI connection alias.",
            "type" : "string"
          },
          "otherProperties" : {
            "description" : "The additional properties for JNDI configuration required by the JNDI provider.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "The alias for the keystore that contains the client certificates for Integration Server to use when connecting to the JNDI provider.",
            "type" : "string"
          },
          "keystoreFormatPropertyName" : {
            "description" : "The JNDI property name for storing the keystore format.",
            "type" : "string"
          },
          "keystoreKeyAlias" : {
            "description" : "The alias to the key that contains the private key for connecting to the JNDI provider.The key alias must be in the keystore specified in keystoreAlias.",
            "type" : "string"
          },
          "keystorePasswordPropertyName" : {
            "description" : "The JNDI property name for storing the keystore password. This field is required if a keystoreAlias value is set for the JNDI connection alias.",
            "type" : "string"
          },
          "keystorePropertyName" : {
            "description" : "The JNDI property name for storing the keystore location. This field is required if a keystoreAlias value is set for the JNDI connection alias.",
            "type" : "string"
          },
          "privateKeyPropertyName" : {
            "description" : "The JNDI property name for storing the private key name. ",
            "type" : "string"
          },
          "providerURLFailoverList" : {
            "description" : "One or more provider URLs that Integration Server should use if the connection to the primary JNDI provider fails.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "securityCredentials" : {
            "description" : "The security credentials that the JMS administrator provides to the JNDI provider.",
            "type" : "string"
          },
          "securityPrincipal" : {
            "description" : "The name of the security principal that the JMS administrator provides to the JNDI provider.",
            "type" : "string"
          },
          "trustoreAlias" : {
            "description" : "The alias for the truststore that contains the certificates of the Certificate Authority (CA) for the JNDI provider.",
            "type" : "string"
          },
          "truststorePasswordPropertyName" : {
            "description" : "The JNDI property name for storing the truststore password. This field is required if the truststoreAlias value is set for the JNDI connection alias. ",
            "type" : "string"
          },
          "truststorePropertyName" : {
            "description" : "The JNDI property name for storing the truststore location. This field is required if the truststoreAlias value is set for the JNDI connection alias.",
            "type" : "string"
          },
          "useSSL" : {
            "description" : "Whether to use SSL to connect to the JNDI provider.",
            "type" : "boolean"
          }
        }
      },
      "CertificateDetail" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "description" : "Version of the certificate.",
            "type" : "string"
          },
          "serialNum" : {
            "description" : "Serial number of the certificate.",
            "type" : "string"
          },
          "signature" : {
            "description" : "Signature used in the certificate.",
            "type" : "string"
          },
          "subjectPublicKeyAlgorithm" : {
            "description" : "Public-key algorithm used in the certificate.",
            "type" : "string"
          },
          "issuer" : {
            "$ref" : "#/components/schemas/Map"
          },
          "validity" : {
            "$ref" : "#/components/schemas/Map"
          },
          "subject" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "HealthIndicatorProperty" : {
        "type" : "object",
        "properties" : {
          "propertyName" : {
            "description" : "Property name.",
            "type" : "string",
            "enum" : [ "threshold" ]
          },
          "displayName" : {
            "description" : "Descriptive, display name of the property.",
            "type" : "string"
          },
          "value" : {
            "description" : "Property value. For the threshold property for the health indicator \"Cluster\", use a positive integer as the value. For all other health indicators, use an integer value from 1 to 99.",
            "type" : "string"
          }
        }
      },
      "MessagingConnectionAliasIn" : {
        "type" : "object",
        "required" : [ "type", "description", "clientPrefix", "clientPrefixShared" ],
        "properties" : {
          "name" : {
            "description" : "Name of the webMethods messaging connection alias.",
            "type" : "string"
          },
          "csqCount" : {
            "description" : "The number of messages in the client side queue (CSQ) for this alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "description" : "The type of webMethods messaging connection alias.",
            "type" : "string",
            "enum" : [ "UM", "BROKER" ]
          },
          "description" : {
            "description" : "A description of this alias.",
            "type" : "string"
          },
          "clientPrefix" : {
            "description" : "A string that identifies the Integration Server to the webMethods messaging provider (Universal Messaging or Broker).",
            "type" : "string"
          },
          "clientPrefixShared" : {
            "description" : "Whether Integration Server shares the client prefix with multiple Integration Servers and you want to prevent automatic updates, including deletions, to shared objects associated with this alias on the webMethods messaging provider.",
            "type" : "boolean"
          },
          "brokerHost" : {
            "description" : "Name (DNSname: port or ipaddress: port) of the machine on which the Broker Server resides. Applicable for alias of type BROKER only.",
            "type" : "string",
            "default" : "localhost:6849"
          },
          "brokerName" : {
            "description" : "Name of the Broker as defined on the Broker Server.  Applicable for alias of type BROKER only.",
            "type" : "string",
            "default" : "Broker #1"
          },
          "clientGroup" : {
            "description" : "Broker client group to which this Integration Server belongs. Applicable for alias of type BROKER only.",
            "type" : "string",
            "default" : "IS-JMS"
          },
          "clientAuth" : {
            "description" : "The type of authentication an Integration Server client will use to connect to the webMethods messaging provider.The value SSL is applicable for aliases of type BROKER only. The value CERTIFICATE_BASED is applicable for aliases of type UM only.",
            "type" : "string",
            "enum" : [ "NONE", "BASIC", "SSL", "CERTIFICATE_BASED" ],
            "default" : "NONE"
          },
          "user" : {
            "description" : "Username for basic authentication.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for basic authentication.",
            "type" : "string"
          },
          "useCsq" : {
            "description" : "Whether a client side queue is used with this Universal Messaging connection alias.Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "csqSize" : {
            "description" : "The maximum number of documents (messages) that can exist in the client side queue for this Universal Messaging connection alias. Leave empty for a value of UNLIMITED. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32",
            "default" : -1
          },
          "csqDrainInOrder" : {
            "description" : "Whether Integration Server drains the client side queue for this alias by sending the messages to the Universal Messaging server in the same order in which Integration Server placed the messages in the client side queue. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "publishWaitTime" : {
            "description" : "Number of milliseconds that a publishing service using this Universal Messaging connection alias will wait for a connection to the Universal Messaging server to be re-established after the connection fails. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "followTheMasterProducers" : {
            "description" : "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to send messages. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "enableRequestReply" : {
            "description" : "Whether a request/reply channel is created for this Universal Messaging connection alias on Universal Messaging and whether a listener for replies is created on Integration Server. Applicable for alais of type UM only.",
            "type" : "boolean"
          },
          "followTheMasterConsumers" : {
            "description" : "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to retrieve messages. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "realmUrl" : {
            "description" : "The URL for the Universal Messaging server in the format nsp:// UM_host: UM_port (for example, nsp://127.0.0.1:9000 or nsp://localhost:9000). Applicable for alias of type UM only.",
            "type" : "string",
            "default" : "nsp://localhost:9000"
          },
          "maxRetryAttempts" : {
            "description" : "Maximum number of reconnection attempts that Integration Server makes if the connection to Universal Messaging fails. The default is 5 attempts. Applicable for alais of type UM only.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "loggingType" : {
            "description" : "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this messaging connection alias to send and/or receive documents. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "enableProducerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages when a message producer uses this connection alias to publish documents that are instances of the publishable document types listed in producerIncludedStrings. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "producerIncludedStrings" : {
            "description" : "Name of each channel that corresponds to a publishable document type for which Integration Server performs additional logging during publication. Use a semicolon (;) to separate each channel name. A value of [ALL] indicates that Integration Server performs enhanced logging for every channel to which this connection alias sends messages. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "enableConsumerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this messaging connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerIncludedStrings. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "consumerIncludedStrings" : {
            "description" : "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this connection alias to receive messages. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "keystore" : {
            "description" : "The full path to the keystore file for this Integration Server. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "keystoreType" : {
            "description" : "The file type of the keystore file for Integration Server. The file type can be either PKCS12. Applicable for type BROKER only.",
            "type" : "string",
            "enum" : [ "PKCS12" ],
            "default" : "PKCS12"
          },
          "keystorePassword" : {
            "description" : "Password required to access the SSL certificate in the keystore file for Integration Server. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "encrypted" : {
            "description" : "Whether to encrypt the connection between the Integration Server and the Broker. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "truststore" : {
            "description" : "The full path to the truststore file for the Integration Server client. Applicable if encrypted is true. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "truststoreType" : {
            "description" : "The file type of the truststore file for Integration Server. The file type is JKS. Applicable if encrypted is true. Applicable for alias of type BROKER only.",
            "type" : "string",
            "enum" : [ "JKS" ],
            "default" : "JKS"
          },
          "keystoreAlias" : {
            "description" : "The alias for the keystore that contains the client certificates that you want Integration Server to use when connecting to the Universal Messaging port. You must set a keystoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "The alias to the key that contains the private key for connecting to the Universal Messaging port securely. The key alias must be in the keystore specified in field keystoreAlias. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "truststoreAlias" : {
            "description" : "The alias for the truststore that contains the certificate authority (CA) certificates for the Universal Messaging server. You must set a truststoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. You must also set a truststoreAlias if the protocol specified for realmUrl is nsps or nhps. Applicable for alias of type UM only.",
            "type" : "string"
          }
        }
      },
      "PackageInfoOut" : {
        "type" : "object",
        "required" : [ "code" ],
        "properties" : {
          "packageName" : {
            "description" : "Name of the package.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the package is enabled.",
            "type" : "boolean"
          },
          "loadok" : {
            "description" : "Number of elements that loaded successfully.",
            "type" : "string"
          },
          "loaderr" : {
            "description" : "Number of elements that generated errors and could not be loaded when the package was installed or relaoded. ",
            "type" : "string"
          },
          "loadwarning" : {
            "description" : "Number of elements that generated warnings when the package was installed or reloaded.",
            "type" : "string"
          },
          "startupServices" : {
            "description" : "A list of startup services.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "shutdownServices" : {
            "description" : "A list of shutdown services.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "replicationServices" : {
            "description" : "A list of replication services.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "version" : {
            "description" : "Version of the package.",
            "type" : "string"
          },
          "build" : {
            "description" : "Build number of the package.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the package.",
            "type" : "string"
          },
          "patch_nums" : {
            "description" : " A list of patches that have been applied to this release of the package, if this information was provided by the package publisher.",
            "type" : "string"
          },
          "jvm_version" : {
            "description" : "Minimum version of the JVM required to run this package.",
            "type" : "string"
          },
          "publisher" : {
            "description" : "Publisher of the package.",
            "type" : "string"
          },
          "time" : {
            "description" : "Time that the package release was created.",
            "type" : "string"
          },
          "listACL" : {
            "description" : "Access Control List assigned to the package.",
            "type" : "string"
          },
          "patchlist" : {
            "$ref" : "#/components/schemas/PackagePatchList"
          },
          "loadedWithWarnings" : {
            "description" : "A list of services that generated warnings when the package was installed.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "notLoaded" : {
            "description" : "A list of services that generated errors and could not be loaded onto the server when the package was installed.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "successors" : {
            "description" : "Packages that depend on this package.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "predecessors" : {
            "description" : "Packages on which this package depends.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "subscribers" : {
            "description" : "List of other webMethods Integration Servers that subscribe to this package.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "message" : {
            "description" : "Status response message returned from internal service that retrieves package information.",
            "type" : "string"
          },
          "code" : {
            "description" : "Status response code returned from internal service that retrieves package information.",
            "type" : "string"
          }
        }
      },
      "SingleSignOnIn" : {
        "type" : "object",
        "properties" : {
          "samlUrl" : {
            "description" : "URL of the SAML resolver in My webMethods Server. ",
            "type" : "string"
          }
        }
      },
      "ServerCertificates" : {
        "type" : "object",
        "properties" : {
          "sslKeyStoreAlias" : {
            "description" : "Alias for the keystore containing the private key and server certificate to use when presenting Integration Server's SSL credentials.",
            "type" : "string"
          },
          "sslKeyAlias" : {
            "description" : "Key alias for the private key to use when presenting Integration Server's SSL credentials.",
            "type" : "string"
          },
          "signKeyStoreAlias" : {
            "description" : "Alias for the keystore containing the private keys and certificates to use to sign outgoing messages.",
            "type" : "string"
          },
          "signKeyAlias" : {
            "description" : "Key alias for the private key to use to sign outgoing messagees.",
            "type" : "string"
          },
          "decryptKeyStoreAlias" : {
            "description" : "Alias for the keystore containing the private keys and certificates used to decrypt incoming messages.",
            "type" : "string"
          },
          "decryptKeyAlias" : {
            "description" : "Key alias for the private key to use when decrypting incoming messages.",
            "type" : "string"
          },
          "trustStoreAlias" : {
            "description" : "Alias for the truststore that contains the certificates of the signing authorities associated with the selected keystore.",
            "type" : "string"
          },
          "jvmKeyStore" : {
            "description" : "Alias for the keystore used for the JVM.",
            "type" : "string"
          },
          "jvmTrustStore" : {
            "description" : "Alias for the truststore used for the JVM.",
            "type" : "string"
          }
        }
      },
      "MQTTTriggerOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the MQTT trigger.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Package to which the MQTT trigger belongs.",
            "type" : "string"
          },
          "aliasName" : {
            "description" : "The MQTT connection alias that the MQTT trigger uses to retrieve messages.",
            "type" : "string"
          },
          "topic" : {
            "description" : "The topic to which the MQTT trigger is subscribed.",
            "type" : "string"
          },
          "qos" : {
            "description" : "Descriptive value of the quality of service of the MQTT trigger.",
            "type" : "string"
          },
          "serviceName" : {
            "description" : "Service that is invoked when the MQTT trigger receives a message.",
            "type" : "string"
          },
          "decodingType" : {
            "description" : "Type indicating how Integration Server decodes the payload of the MQTT message when placing it in the input pipeline for the trigger service.",
            "type" : "string"
          },
          "state" : {
            "description" : "Whether the MQTT trigger is enabled, disabled, or suspended.",
            "type" : "string"
          },
          "acknowledgmentMode" : {
            "description" : "How Integration Server acknowledges messages received on behalf of a MQTT trigger.",
            "type" : "string"
          },
          "executionUser" : {
            "description" : "Descriptor that indicates which credentials Integration Server should use when invoking services associated with the MQTT trigger.",
            "type" : "string"
          },
          "maxExecutionThreads" : {
            "description" : "Maximum number of messages that Integration Server can process for the trigger concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "queueCapacity" : {
            "description" : "Maximum number of messages that the MQTT trigger queue can contain.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxRetryAttempts" : {
            "description" : "Maximum number of times Integration Server attempts to re-execute the trigger service.",
            "type" : "integer",
            "format" : "int32"
          },
          "retryInterval" : {
            "description" : "Number of milliseconds that Integration Server waits between retry attempts.",
            "type" : "integer",
            "format" : "int32"
          },
          "onRetryFailure" : {
            "description" : "Action that Integration Server takes upon retry failure for an MQTT trigger, where 0 specifies \"Throw service exception\" and 1 specifies \"Suspend and retry later\".",
            "type" : "string"
          },
          "resourceMonitoringService" : {
            "description" : "A service that checks the availability of resources used by a trigger.",
            "type" : "string"
          },
          "status" : {
            "description" : "The status of the MQTT trigger, which can be Running or Not Running (reason) where reason identifies why the trigger is not running, such as Not Running (Connection Alias Not Running).",
            "type" : "string"
          },
          "currentQueueSize" : {
            "description" : "Current number of messages in the local trigger queue.",
            "type" : "integer",
            "format" : "int32"
          },
          "currentThreadCount" : {
            "description" : "Current number of server threads processing messages for this MQTT trigger.",
            "type" : "integer",
            "format" : "int32"
          },
          "lastError" : {
            "description" : "The most recent error associated with the MQTT trigger.",
            "type" : "string"
          }
        }
      },
      "MessagingConditionOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the condition in the webMethods messaging trigger.",
            "type" : "string"
          },
          "service" : {
            "description" : "Name of the service that Integration Server invokes when it receives documents that satisfy the trigger condition.",
            "type" : "string"
          },
          "joinType" : {
            "description" : "The join type for the trigger condition. This field displays N/A if the trigger condition specifies only one publishable document type.",
            "type" : "string"
          },
          "documentTypes" : {
            "description" : "All the publishable document types used within this condition.",
            "type" : "string"
          },
          "conditionDetails" : {
            "description" : "The details for this condition.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessagingConditionDetailsOut"
            }
          }
        }
      },
      "ServerUpdates" : {
        "type" : "object",
        "properties" : {
          "serverUpdates" : {
            "description" : "The installed core updates on this Integration Server.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "packageUpdates" : {
            "description" : "The installed updates for all packages on this Integration Server.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PackageUpdates"
            }
          }
        }
      },
      "FileAccessControlData" : {
        "type" : "object",
        "properties" : {
          "allowedWritePaths" : {
            "description" : "List of directories and/or files to which the services in the\r\npub.file folder and the pub.flow:savePipelineToFile service have\r\nwrite permission.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "allowedReadPaths" : {
            "description" : "List of directories and/or files to which the services in the\r\npub.file folder and the pub.flow:restorePipelineFromFile service  have read permission.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "allowedDeletePaths" : {
            "description" : "List of directories and/or files that the services in the pub.file\r\nfolder can delete.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JMSConnectionAliasUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "description" : "A description of the JMS connection alias.",
            "type" : "string"
          },
          "transactionType" : {
            "description" : "The type of transaction for sessions that use this JMS connection alias. ",
            "type" : "string",
            "enum" : [ "NO_TRANSACTION", "LOCAL_TRANSACTION", "XA_TRANSACTION" ]
          },
          "clientId" : {
            "description" : "The JMS client identifier associated with the connections established by this JMS connection alias. The clientId must be specified when createConnectionUsing is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name required to acquire a connection from the connection factory.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password required to acquire a connection from the connection factory.",
            "type" : "string"
          },
          "createConnectionUsing" : {
            "description" : "How administered objects (connection factories and destinations) will be looked up.",
            "type" : "string",
            "enum" : [ "JNDI_LOOKUP", "NATIVE_WEBMETHODS_API" ]
          },
          "jndiAliasName" : {
            "description" : "Alias to the JNDI provider that the JMS connection alias uses to look up administered objects. This field applies only when the createConnectionUsing value is JNDI_LOOKUP.",
            "type" : "string"
          },
          "connectionFactoryLookupName" : {
            "description" : "Lookup name for the connection factory that you want to use to create a connection to the JMS provider specified in this JMS connection alias. This field applies only when the createConnectionUsing value is JNDI_LOOKUP.",
            "type" : "string"
          },
          "createAdministeredObjectsOnDemand" : {
            "description" : "Whether Integration Server creates a connection factory or destination on the JNDI provider if the object is not found at the time Integration Server looks up the object. This field applies only when the JMS provider is Universal Messaging.",
            "type" : "boolean"
          },
          "enableFollowTheMaster" : {
            "description" : "Whether Integration Server always connects to the master realm server in the Universal Messaging cluster. This setting affects producer and consumer connections created using this JMS connection alias.",
            "type" : "boolean"
          },
          "monitorWmConnectionFactory" : {
            "description" : "How Integration Server monitors the webMethods connection factory object on the JNDI server for changes where NONE means no monitoring is done, CLIENT_POLL corresponds to specifying an interval for poll changes (connectionFactoryPollInterval) , JNDI_POLL corresponds to polling for changes with an interval defined by webMethods Connection Factory , and LISTENER corresponds to monitoring the connection factory by registering an event listener. This field applies only when Universal Messaging is the JMS provider.",
            "type" : "string",
            "enum" : [ "NONE", "CLIENT_POLL", "JNDI_POLL", "LISTENER" ]
          },
          "connectionFactoryPollingInterval" : {
            "description" : "Number of minutes between polling attempts. The polling interval must be a positive integer. This field is required when monitorWmConnectionFactory is set to CLIENT_POLL. This field applies only when the JMS provider is Univesal Messaging.",
            "type" : "integer",
            "format" : "int32"
          },
          "brokerHost" : {
            "description" : "Name (DNSname:port or ipaddress:port) of the machine on which the Broker Server acting as the JMS provider resides. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "brokerName" : {
            "description" : "Name of the Broker as defined on the Broker Server. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "clientGroup" : {
            "description" : "Name of the client group to which you want Integration Server to belong when it acts as a JMS client. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "brokerList" : {
            "description" : "Comma-delimited list of Broker Servers on which the connection between the Integration Server (acting as the JMS client) and the webMethods Broker can exist. Use the following format: {Broker Name]@<host>[:port]. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "keystore" : {
            "description" : "Full path to this Integration Server's keystore file. The keystore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "keystoreType" : {
            "description" : "File type of the Integration Server's keystore file. The keystoreType is required only when configuring an SSL connection to the Broker This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "enum" : [ "PKCS12", "JKS" ]
          },
          "truststore" : {
            "description" : "The full path to this Integration Server client's trust store file. The trustore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "trustoreType" : {
            "description" : "The file type of the Integration Server's trust store file, which is JKS. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "encrypted" : {
            "description" : "Whether the connection between the Integration Server and the Broker is encrypted. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "boolean"
          },
          "classLoader" : {
            "description" : "Name of the class loader used with this JMS connection alias.",
            "type" : "string"
          },
          "maximumCsqSize" : {
            "description" : "Maximum number of messages that can exist in the client side queue for this JMS connection alias. A value of -1 indicates there is no limit.",
            "type" : "integer",
            "format" : "int32"
          },
          "csqDrainInOrder" : {
            "description" : "Whether Integration Server drains the client side queue by sending the messages to the JMS provider in the same order in which Integration Server placed the messages in the client side queue.",
            "type" : "boolean"
          },
          "createTemporaryQueue" : {
            "description" : "Whether Integration Server creates a temporary queue on the JMS provider to handle request-reply operations that do not specify a replyTo destination.",
            "type" : "boolean"
          },
          "enableRequestReplyListener" : {
            "description" : "Whether or not Integration Server creates a single dedicated MessageConsumer for receiving synchronous replies sent to the temporary queue for this JMS connection alias.",
            "type" : "boolean"
          },
          "manageDestinations" : {
            "description" : "Whether users can use Designer to modify Destinations on Broker or Universal Messaging",
            "type" : "boolean"
          },
          "createNewConnectionPerTrigger" : {
            "description" : "Whether Integration Server creates a separate connection to the JMS provider for each trigger.",
            "type" : "boolean"
          },
          "producerCachingMode" : {
            "description" : "Whether caching of JMS Session and MessageProducer objects is enabled for this JMS connection alias.",
            "type" : "string",
            "enum" : [ "DISABLED", "ENABLED_PER_DESTINATION" ]
          },
          "minPoolSizePerUnspecifiedDestination" : {
            "description" : "The minimum number of entries (JMS Session objects) for the default session pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxPoolSizePerUnspecifiedDestination" : {
            "description" : "The maximum number of entries (JMS Session objects) for the default session pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "minPoolSizePerDestination" : {
            "description" : "The minimum number of entries (Message Producers) in each destination-specific pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxPoolSizePerDestination" : {
            "description" : "The maximum number of entries in each destination-specific pool. A value of 0 (or blank) indicates that Integration Server does not create separate pools for any of the destinations.",
            "type" : "integer",
            "format" : "int32"
          },
          "cacheProducersQueueList" : {
            "description" : "A semicolon-delimited list of the queues for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API. ",
            "type" : "string"
          },
          "destinationLookupNames" : {
            "description" : "A semicolon delimited list of the lookup names for the destinations for which Integration Server creates destination pools. This field applies only when producerCachingMode is set to ENABLED_PER_DESTINATION andcreateConnectionUsing value is JNDI_LOOKUP. ",
            "type" : "string"
          },
          "cacheProducersTopicList" : {
            "description" : "A semicolon-delimited list of the topics for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "idleTimeout" : {
            "description" : "The number of milliseconds before an inactive pool entry will be removed from the pool. This setting applies to the default pool as well as each destination specific pool. A value of 0 indicates that pool entries never expire. A value of -1 indicates the system default will be used. The system default is defined by setting watt.server.jms.producer.pooledSession.timeout which has a default value of 60000 ms.",
            "type" : "integer",
            "format" : "int32"
          },
          "producerMaxRetryAttempts" : {
            "description" : "The maximum number of times Integration Server automatically retries a pub.jms:send service that fails because of a transient error. Set to 0 to disable automatic retry for implementations of the pub.jms:send service that use this JMS connection alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "producerRetryInterval" : {
            "description" : "The number of milliseconds that Integration Server waits between attempts to retry a pub.jms:send service that uses this JMS connection alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "loggingType" : {
            "description" : "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this JMS connection alias to send and/or receive messages.",
            "type" : "string",
            "enum" : [ "SERVER_LOG", "MESSAGING_AUDIT_LOG" ]
          },
          "enableProducerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages when a message producer uses this JMS connection alias to send messages to a destination in producerIncludedStrings.",
            "type" : "boolean"
          },
          "producerIncludedStrings" : {
            "description" : "The destination names for which Integration Server performs additional logging when sending messages to the destination. Use a semicolon (;) to separate each destination name. A value of [ALL] indicates that Integration Server performs enhanced logging for every destination to which this JMS connection alias sends messages.",
            "type" : "string"
          },
          "enableConsumerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this JMS connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerMessageIncludedStrings",
            "type" : "boolean"
          },
          "consumerIncludedStrings" : {
            "description" : "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this JMS connection alias to receive messages.",
            "type" : "string"
          }
        }
      },
      "FtpsPortPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "pasvAddr" : {
            "description" : "Specifies the address that should be sent by the PORT command.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "requestClientCertification", "requireClientCertification" ]
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "secureClients" : {
            "description" : "Prevents the FTPS listener from operating with non-secure clients..",
            "type" : "boolean"
          }
        }
      },
      "MQTTTriggers" : {
        "type" : "object",
        "properties" : {
          "triggers" : {
            "description" : "All MQTT triggers.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/MQTTTriggerOut"
              } ]
            }
          }
        }
      },
      "EnterpriseGatewayPortOut" : {
        "type" : "object",
        "properties" : {
          "externalPort" : {
            "$ref" : "#/components/schemas/EGExternalPortOut"
          },
          "registrationPort" : {
            "$ref" : "#/components/schemas/EGRegPortOut"
          }
        }
      },
      "EGExternalPortOut" : {
        "type" : "object",
        "properties" : {
          "backlog" : {
            "description" : "When the port receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32"
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "integer",
            "format" : "int64"
          },
          "threadPool" : {
            "description" : "Indicates whether the port has its own pool of threads.",
            "type" : "boolean"
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the thread pool for the port. ",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the thread pool for the port. ",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of the threads in the thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadsInUse" : {
            "description" : "If threadPool is true, the number of threads from the pool that are currently in use.",
            "type" : "integer",
            "format" : "int32"
          },
          "kerberosSettings" : {
            "$ref" : "#/components/schemas/KerberosSettings"
          },
          "alias" : {
            "description" : "A unique name that identifies the port",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package the port is associated with",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "protocol" : {
            "description" : "The port's protocol",
            "type" : "string",
            "enum" : [ "HTTP", "HTTPS" ]
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled, that is, currently accepting requests.",
            "type" : "boolean"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "keyAlias" : {
            "description" : "Specifies a text identifier for the keystore, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Specifies a text identifier for the private key associated with the keystore alias",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Specifies a text identifier for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "ipAccess" : {
            "$ref" : "#/components/schemas/IPAccess"
          }
        }
      },
      "ACLOut" : {
        "type" : "object",
        "required" : [ "name", "inUse", "allow", "deny", "users" ],
        "properties" : {
          "name" : {
            "description" : "Name of the access control list.",
            "type" : "string"
          },
          "inUse" : {
            "description" : "Whether the access control list is currently in use for any services or folders.",
            "type" : "boolean"
          },
          "allow" : {
            "description" : "List of groups whose members are allowed access to resources protected by the access control list.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "deny" : {
            "description" : "List of groups whose members are denied access to resources protected by the access control list.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "users" : {
            "description" : "List of users in the access control list.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "FileAccessControlData_Patch" : {
        "type" : "object",
        "properties" : {
          "allowedWritePaths" : {
            "description" : "List of directories and/or files to which the services in the\r\npub.file folder and the pub.flow:savePipelineToFile service have\r\nwrite permission.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "allowedReadPaths" : {
            "description" : "List of directories and/or files to which the services in the\r\npub.file folder and the pub.flow:restorePipelineFromFile service  have read permission.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "allowedDeletePaths" : {
            "description" : "List of directories and/or files that the services in the pub.file\r\nfolder can delete.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "OAuthExternalServer" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Alias for the external authorization server. The following characters are prohibited: ? [ ] / \\ = + < > : ; \" , * | ^ @",
            "type" : "string"
          },
          "introspectionEndpoint" : {
            "description" : "The URL of the introspection endpoint for the external authorization server. Integration Server uses the introspection endpoint to determine if access tokens used in client requests are currently active.",
            "type" : "string"
          },
          "clientId" : {
            "description" : "The ID of the user account that Integration Server uses when sending requests to the introspection endpoint of the external authorization server.",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The password for the user account that Integration Server uses when sending requests to the introspection endpoint of the external authorization server.",
            "type" : "string"
          },
          "user" : {
            "description" : "The Integration Server user account that Integration Server uses to execute the client request. If the client is requesting a service, this is the user account that Integration Server uses to execute the service, which occurs after Integration Server calls the introspection endpoint.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "The alias of the keystore on Integration Server that holds the digital certificate that Integration Server sends to the external authorization server during the mutual (two-way) SSL handshake.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "The alias of the Integration Server private key and associated digital certificate that Integration Server sends to the external authorization server during the mutual (two-way) SSL handshake.",
            "type" : "string"
          },
          "truststoreAlias" : {
            "description" : "The alias of the truststore on Integration Server that holds the Certificate Authority (CA) certificate of the external authorization server.",
            "type" : "string"
          },
          "defaultScope" : {
            "description" : "Default scope that takes effect when no scope is explicitly stated in the response from the external authorization server's introspection endpoint.",
            "type" : "string"
          }
        }
      },
      "DoSRuleOut" : {
        "type" : "object",
        "required" : [ "globalDoS", "dosByIP", "deniedIPList" ],
        "properties" : {
          "globalDoS" : {
            "$ref" : "#/components/schemas/DoSGlobalFilterInOut"
          },
          "dosByIP" : {
            "$ref" : "#/components/schemas/DoSIPFilterInOut"
          },
          "deniedIPList" : {
            "description" : "List IP address for which access is denied.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Link" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the link",
            "type" : "string"
          },
          "url" : {
            "description" : "URL of the link",
            "type" : "string"
          }
        }
      },
      "UrlAliases" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "description" : "List of URL Aliases.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "urlAliases" : {
            "description" : "Description of the URL Aliases.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UrlAliasOut"
            }
          }
        }
      },
      "ClientRegistrationInput" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "The name of the client. The name cannot contain the following characters: & ( ) \\ ; , / \" : ' < >",
            "type" : "string"
          },
          "version" : {
            "description" : "Specifies the version number of the client.",
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "description" : "Type of client as described in RFC 6749.",
            "type" : "string",
            "enum" : [ "Confidential", "Public" ]
          },
          "description" : {
            "description" : "Description of the client.",
            "type" : "string"
          },
          "redirect_uris" : {
            "description" : "The client's redirection endpoints.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scopes" : {
            "description" : "List of scopes attached to the client.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "authorizationCodeGrant" : {
            "description" : "Indicates whether client can use the authorization code grant.",
            "type" : "boolean",
            "default" : false
          },
          "implicitGrant" : {
            "description" : "Indicates whether client can use the implicit grant",
            "type" : "boolean",
            "default" : false
          },
          "clientCredentialsGrant" : {
            "description" : "Indicates whether client can use the client credentials grant.",
            "type" : "boolean",
            "default" : false
          },
          "resourceOwnerCredentialsGrant" : {
            "description" : "",
            "type" : "boolean",
            "default" : false
          },
          "tokenLifetime" : {
            "description" : "Specifies the length of time (in seconds) that the access token is valid",
            "type" : "integer",
            "format" : "int64"
          },
          "tokenRefreshCount" : {
            "description" : "Specifies the number of times the access token can be refreshed.",
            "type" : "integer",
            "format" : "int32"
          },
          "enabled" : {
            "description" : "Indicates whether client is enabled. If true, client can request authorization and use access tokens.",
            "type" : "boolean",
            "default" : true
          },
          "registrationClientUri" : {
            "description" : "",
            "type" : "string"
          },
          "registrationAccessToken" : {
            "description" : "",
            "type" : "string"
          }
        }
      },
      "ServerMemoryOut" : {
        "type" : "object",
        "properties" : {
          "availableMemory" : {
            "description" : "Amount of unused memory in KB that is currently available to the Java virtual machine. ",
            "type" : "string"
          },
          "availableMemoryPercentage" : {
            "description" : "Percentage of unused memory that is currently available to the Java virtual machine. ",
            "type" : "string"
          },
          "totalMemory" : {
            "description" : "Amount of memory in KB that is guaranteed to be available to the Java virtual machine.",
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ServiceCache" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Message",
            "type" : "string"
          }
        }
      },
      "NodePermissions" : {
        "type" : "object",
        "properties" : {
          "aclBrowse" : {
            "$ref" : "#/components/schemas/AssignedACL"
          },
          "aclRead" : {
            "$ref" : "#/components/schemas/AssignedACL"
          },
          "aclWrite" : {
            "$ref" : "#/components/schemas/AssignedACL"
          },
          "aclExecute" : {
            "$ref" : "#/components/schemas/AssignedACL"
          }
        }
      },
      "MessageSizeLimitFilterInOut" : {
        "type" : "object",
        "required" : [ "isMessageSizeFilterEnabled", "maximumMessageSize" ],
        "properties" : {
          "isMessageSizeFilterEnabled" : {
            "description" : "Whether Enterprise Gateway Server is to check the size of the incoming message.",
            "type" : "boolean",
            "enum" : [ false, true ]
          },
          "maximumMessageSize" : {
            "description" : "Maximum size allowed for HTTP and HTTPS requests, in megabytes.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MessagingConnectionAliasActionOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Descriptive success or failure message for performing an action on a webMethods messaging connection alias.",
            "type" : "string"
          }
        }
      },
      "AuditLogRec" : {
        "type" : "object",
        "properties" : {
          "rootContextID" : {
            "description" : "Context information that provides a consistent, interpretable audit trail of activity that the webMethods Monitor can use to relate entries within the log.",
            "type" : "string"
          },
          "parentContextID" : {
            "description" : "Context information that provides a consistent, interpretable audit trail of activity that the webMethods Monitor can use to relate entries within the log.",
            "type" : "string"
          },
          "contextID" : {
            "description" : "Context information that provides a consistent, interpretable audit trail of activity that the webMethods Monitor can use to relate entries within the log.",
            "type" : "string"
          },
          "auditTimestamp" : {
            "description" : "Date and time the auditing request entered the audit subsystem.",
            "type" : "string"
          },
          "insertTimestamp" : {
            "description" : "Date and time the audit record was written to the database or file system. ",
            "type" : "string"
          },
          "clientID" : {
            "description" : "IP address of the host from which the request originated.",
            "type" : "string"
          },
          "userID" : {
            "description" : "User name for the client that generated the audit event.",
            "type" : "string"
          },
          "type" : {
            "description" : "Category for the security event that occurred (authentication, authorization, certificates, configuration, etc.).",
            "type" : "string"
          },
          "message" : {
            "description" : "Text of the logged message or information about the security action.",
            "type" : "string"
          },
          "result" : {
            "description" : "The result of the request for which security action was logged, either SUCCESS or FAILURE.",
            "type" : "string"
          },
          "clientApplication" : {
            "description" : "Client application accessing the server.",
            "type" : "string"
          },
          "serviceName" : {
            "description" : "Name of the service that generated the audit event.",
            "type" : "string"
          },
          "resubmittable" : {
            "description" : "Whether or not webMethods Monitor can resubmit the service. ",
            "type" : "string"
          },
          "serverID" : {
            "description" : "IP address or host name of the server on which Integration Server is running.",
            "type" : "string"
          },
          "sessionState" : {
            "description" : "Statue of the session. Possible values are STARTED, EXPIRED, and ENDED.",
            "type" : "string"
          },
          "sessionName" : {
            "description" : "Client who initiated the action that caused the session to be created. This can be the IP address of the client, system, or internal connection.  ",
            "type" : "string"
          },
          "rpcs" : {
            "description" : "Number of services the client has called so far this session.",
            "type" : "string"
          },
          "age" : {
            "description" : "How long the session existed (in milliseconds) before it expired or ended.",
            "type" : "string"
          },
          "sessionID" : {
            "description" : "A string Integration Server generates to identify each session uniquely.",
            "type" : "string"
          },
          "txMsg" : {
            "description" : "Name of the guaranteed delivery process that is running.",
            "type" : "string"
          },
          "txStatus" : {
            "description" : "Status of guaranteed delivery transaction. The status can be: STARTED, ENDED or FAILED.",
            "type" : "string"
          },
          "txErrMsg" : {
            "description" : "If the transaction failed, the error message that describes the error that occurred.",
            "type" : "string"
          },
          "uuid" : {
            "description" : "Universally unique identifier for the message being sent or received.",
            "type" : "string"
          },
          "alias" : {
            "description" : "Name of the messaging connection alias associated with the sent or received message. ",
            "type" : "string"
          },
          "destination" : {
            "description" : "Destination to which the message was sent.",
            "type" : "string"
          },
          "messageId" : {
            "description" : "The ID assigned to the message by the messaging provider.",
            "type" : "string"
          },
          "trigger" : {
            "description" : "Name of the trigger that received the message.",
            "type" : "string"
          },
          "mode" : {
            "description" : "Indicates whether Integration Server wrote the log message on behalf of a message producer or consumer for webMethods messaging or JMS messaging.",
            "type" : "string"
          },
          "errorMessage" : {
            "description" : "Optional error message, describing the type of error.",
            "type" : "string"
          },
          "duration" : {
            "description" : "How long the service ran (in milliseconds) before the error occurred.",
            "type" : "string"
          },
          "errStackTrace" : {
            "description" : "Trace that shows the call sequence leading to the error.",
            "type" : "string"
          },
          "serviceStack" : {
            "description" : "Parent services for the service in which the error occurred.",
            "type" : "string"
          }
        }
      },
      "DashboardConfig" : {
        "type" : "object",
        "required" : [ "luceneMemorySize", "indexerThreadCount", "searcherThreadCount", "maxResults", "retentionDays", "maxJdbcPoolConnections", "enableDataCollection" ],
        "properties" : {
          "luceneMemorySize" : {
            "description" : "Amount of memory dedicated to the Lucene document engine (MB).",
            "type" : "integer",
            "format" : "int32"
          },
          "indexerThreadCount" : {
            "description" : "Number of resources that may be indexed concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "searcherThreadCount" : {
            "description" : "Number of search requests that may execute concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxResults" : {
            "description" : "The maximum number of results permitted by the server.",
            "type" : "integer",
            "format" : "int32"
          },
          "retentionDays" : {
            "description" : "The maximum amount of data to retain (days).",
            "type" : "integer",
            "format" : "int32"
          },
          "maxJdbcPoolConnections" : {
            "description" : "Number of concurrent JDBC connections allowed by the IS Statistics Data Collector module.",
            "type" : "integer",
            "format" : "int32"
          },
          "enableDataCollection" : {
            "description" : "Enable or Disable IS Statistics Data Collector module.",
            "type" : "boolean",
            "enum" : [ true, false ]
          }
        }
      },
      "JWTGlobalSettingsData_Patch" : {
        "type" : "object",
        "properties" : {
          "audience" : {
            "description" : "Audience value to use for this Integration Server. Specify a valid string or URI.",
            "type" : "string"
          },
          "maxGlobalSkew" : {
            "description" : "Maximum number of seconds by which the JWT issuer and Integration Server clocks can differ and still allow JWT expiry (exp) and not before (nbf) validations to succeed.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "JDBCDriverAliasOut" : {
        "type" : "object",
        "properties" : {
          "driverAliases" : {
            "description" : "All JDBC driver aliases",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/JDBCDriverAlias"
              } ]
            }
          }
        }
      },
      "JMSConnectionAliases" : {
        "type" : "object",
        "properties" : {
          "aliases" : {
            "description" : "All JMS connection aliases.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/JMSConnectionAliasOut"
              } ]
            }
          }
        }
      },
      "Groups" : {
        "type" : "object",
        "properties" : {
          "groups" : {
            "description" : "All groups.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/GroupOut"
              } ]
            }
          }
        }
      },
      "WebSocketPortsOut" : {
        "type" : "object",
        "properties" : {
          "ports" : {
            "description" : "All WebSocket and WebSocketSecure ports.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/WebSocketPortInOut"
              } ]
            }
          }
        }
      },
      "MessagingConnectionAliasUpdate" : {
        "type" : "object",
        "properties" : {
          "csqCount" : {
            "description" : "The number of messages in the client side queue (CSQ) for this alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "description" : "The type of webMethods messaging connection alias.",
            "type" : "string",
            "enum" : [ "UM", "BROKER" ]
          },
          "description" : {
            "description" : "A description of this alias.",
            "type" : "string"
          },
          "clientPrefix" : {
            "description" : "A string that identifies the Integration Server to the webMethods messaging provider (Universal Messaging or Broker).",
            "type" : "string"
          },
          "clientPrefixShared" : {
            "description" : "Whether Integration Server shares the client prefix with multiple Integration Servers and you want to prevent automatic updates, including deletions, to shared objects associated with this alias on Universal Messaging server or Broker.",
            "type" : "boolean"
          },
          "brokerHost" : {
            "description" : "Name (DNSname: port or ipaddress: port) of the machine on which the Broker Server resides. Applicable for type BROKER only.",
            "type" : "string",
            "default" : "localhost:6849"
          },
          "brokerName" : {
            "description" : "Name of the Broker as defined on the Broker Server. Applicable for alias of type BROKER only.",
            "type" : "string",
            "default" : "Broker #1"
          },
          "clientGroup" : {
            "description" : "Broker client group to which this Integration Server belongs. Applicable for alias of type BROKER only.",
            "type" : "string",
            "default" : "IS-JMS"
          },
          "clientAuth" : {
            "description" : "The type of authentication an Integration Server client will use to connect to the Broker.The value SSL is only applicable for an alias of type BROKER. The value CERTIFICATE_BASED is only applicable for aliases of type UM.",
            "type" : "string",
            "enum" : [ "NONE", "BASIC", "SSL", "CERTIFICATE_BASED" ],
            "default" : "NONE"
          },
          "user" : {
            "description" : "Username for basic authentication.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for basic authentication.",
            "type" : "string"
          },
          "useCsq" : {
            "description" : "Whether a client side queue is used with this Universal Messaging connection alias.Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "csqSize" : {
            "description" : "The maximum number of documents (messages) that can exist in the client side queue for this Universal Messaging connection alias. Leave empty for a value of UNLIMITED. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32",
            "default" : -1
          },
          "csqDrainInOrder" : {
            "description" : "Whether Integration Server drains the client side queue for this alias by sending the messages to the Universal Messaging server in the same order in which Integration Server placed the messages in the client side queue. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "publishWaitTime" : {
            "description" : "Number of milliseconds that a publishing service using this Universal Messaging connection alias will wait for a connection to the Universal Messaging server to be re-established after the connection fails. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "followTheMasterProducers" : {
            "description" : "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to send messages. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "enableRequestReply" : {
            "description" : "Whether a request/reply channel is created for this Universal Messaging connection alias on Universal Messaging and whether a listener for replies is created on Integration Server. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "followTheMasterConsumers" : {
            "description" : "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to retrieve messages. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "realmUrl" : {
            "description" : "The URL for the Universal Messaging server in the format nsp:// UM_host: UM_port (for example, nsp://127.0.0.1:9000 or nsp://localhost:9000). Applicable for alias of type UM only.",
            "type" : "string",
            "default" : "nsp://localhost:9000"
          },
          "maxRetryAttempts" : {
            "description" : "The maximum number of reconnection attempts that Integration Server makes if the connection to Universal Messaging fails. The default is 5 attempts. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "loggingType" : {
            "description" : "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this messaging connection alias to send and/or receive documents. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "enableProducerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages when a message producer uses this connection alias to publish documents that are instances of the publishable document types listed in producerIncludedStrings. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "producerIncludedStrings" : {
            "description" : "Name of each channel that corresponds to a publishable document type for which Integration Server performs additional logging during publication. Use a semicolon (;) to separate each channel name. A value of [ALL] indicates that Integration Server performs enhanced logging for every channel to which this connection alias sends messages. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "enableConsumerMessageTracking" : {
            "description" : "When set to true indicates that Integration Server writes additional log messages for messaging consumers (triggers) that use this messaging connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerIncludedStrings. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "consumerIncludedStrings" : {
            "description" : "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this connection alias to receive messages. Applicable for type UM only.",
            "type" : "string"
          },
          "keystore" : {
            "description" : "The full path to the keystore file for this Integration Server. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "keystoreType" : {
            "description" : "The file type of the keystore file for Integration Server. The file type can be either PKCS12. Applicable for alias of type BROKER only.",
            "type" : "string",
            "enum" : [ "PKCS12" ],
            "default" : "PKCS12"
          },
          "keystorePassword" : {
            "description" : "Password required to access the SSL certificate in the keystore file for Integration Server. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "encrypted" : {
            "description" : "Whether to encrypt the connection between the Integration Server and the Broker. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "truststore" : {
            "description" : "The full path to the truststore file for the Integration Server client. A truststore file contains trusted root certificates for the  authorities responsible for signing SSL certificates. For an SSL connection to be made, a valid trusted root for the SSL certificate  stored in the keystore must be accessible in a truststore file. Applicable if isEncrypted is true. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "truststoreType" : {
            "description" : "The file type of the truststore file for Integration Server. The file type is JKS. Applicable if isEncrypted is true. Applicable for alias of type BROKER only.",
            "type" : "string",
            "enum" : [ "JKS" ],
            "default" : "JKS"
          },
          "keystoreAlias" : {
            "description" : "The alias for the keystore that contains the client certificates that you want Integration Server to use when connecting to the Universal Messaging port. You must set a keystoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "The alias to the key that contains the private key for connecting to the Universal Messaging port securely. The key alias must be in the keystore specified in field keystoreAlias. Applicable for type UM only.",
            "type" : "string"
          },
          "truststoreAlias" : {
            "description" : "The alias for the truststore that contains the certificate authority (CA) certificates for the Universal Messaging server. You must set a truststoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. You must also set a truststoreAlias if the protocol specified for realmUrl is nsps or nhps. Applicable for type UM only.",
            "type" : "string"
          }
        }
      },
      "MQTTConnectionAliasInPut" : {
        "type" : "object",
        "required" : [ "description", "clientId" ],
        "properties" : {
          "description" : {
            "description" : "Description of the MQTT connection alias.",
            "type" : "string"
          },
          "clientId" : {
            "description" : "Connection client ID of the MQTT connection alias.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Package in which to store the MQTT connection alias information.",
            "type" : "string",
            "default" : "WmRoot"
          },
          "user" : {
            "description" : "User name for client authentication.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for client authentication.",
            "type" : "string"
          },
          "host" : {
            "description" : "URL containing the protocol, domain, and port of the MQTT server to which connections created using the MQTT connection alias will connect.",
            "type" : "string",
            "default" : "tcp://localhost:1883"
          },
          "cleanSessionEnabled" : {
            "description" : "Indicates if clean sessions are used for subscriptions.",
            "type" : "boolean",
            "default" : true
          },
          "timeout" : {
            "description" : "Maximum number of seconds that Integration Server waits for a network connection to the MQTT server to be established.",
            "type" : "string",
            "default" : "30"
          },
          "keepAlive" : {
            "description" : "Maximum number of seconds that can elapse between messages being sent to or received from the MQTT server using a connection created for this MQTT connection alias.",
            "type" : "integer",
            "format" : "int32",
            "default" : 60
          },
          "willEnabled" : {
            "description" : "Whether the MQTT server sends a last will message on behalf of Integration Server if Integration Server disconnects abruptly from the MQTT server.",
            "type" : "boolean",
            "default" : false
          },
          "willQos" : {
            "description" : "Quality of Service for the last will message. Inputting '0' will create an \"At most once\" QoS. Inputting '1' will create an \"At least once\" QoS. Inputting '2' will create an \"Exactly once\" QoS.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 0, 1, 2 ]
          },
          "willRetain" : {
            "description" : "Whether the MQTT server retains the last will message.",
            "type" : "boolean",
            "default" : false
          },
          "willTopic" : {
            "description" : "Topic to which the last will message is published. All subscribers to this topic will receive the last will message.",
            "type" : "string"
          },
          "willPayload" : {
            "description" : "Contents of the last will message.",
            "type" : "string"
          },
          "willOnConnectPayload" : {
            "description" : "Message to send upon successful connection to the MQTT server.",
            "type" : "string"
          },
          "willOnDisconnectPayload" : {
            "description" : "Message to send upon disconnecting from the MQTT server.",
            "type" : "string"
          },
          "useSSL" : {
            "description" : "Whether to use SSL to connect to the MQTT server.",
            "type" : "boolean",
            "default" : false
          },
          "truststoreAlias" : {
            "description" : "Truststore alias to be used if SSL is enabled.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "Keystore alias to be used if SSL is enabled.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Alias to the private key associated with the keystore.",
            "type" : "string"
          }
        }
      },
      "FtpsPortPutIn" : {
        "type" : "object",
        "required" : [ "number", "packageName" ],
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean",
            "default" : false
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "pasvAddr" : {
            "description" : "Specifies the address that should be sent by the PORT command.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "requestClientCertification", "requireClientCertification" ],
            "default" : "basic"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean",
            "default" : true
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "secureClients" : {
            "description" : "Prevents the FTPS listener from operating with non-secure clients..",
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "EGRegPortOut" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package the port is associated with",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "protocol" : {
            "description" : "The port's protocol",
            "type" : "string",
            "enum" : [ "HTTP", "HTTPS" ]
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled, that is, currently accepting requests.",
            "type" : "boolean"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "keyAlias" : {
            "description" : "Specifies a text identifier for the keystore, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Specifies a text identifier for the private key associated with the keystore alias",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Specifies a text identifier for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "ipAccess" : {
            "$ref" : "#/components/schemas/IPAccess"
          }
        }
      },
      "ExtendedSettingInput" : {
        "type" : "object",
        "properties" : {
          "settingName" : {
            "description" : "The name and value of the extended setting, i.e., watt.adminapi.group.readOnly=true ",
            "type" : "string"
          }
        }
      },
      "OutBoundHTTPSettingIn" : {
        "type" : "object",
        "required" : [ "maximumRedirects", "timeoutSeconds", "retries" ],
        "properties" : {
          "userAgent" : {
            "description" : "Value that Integration Server uses in the HTTP User-Agent request header when requesting a web document. ",
            "type" : "string"
          },
          "maximumRedirects" : {
            "description" : "Number of times that Integration Server allows a request to be redirected before returning an I/O exception to the client.",
            "type" : "integer",
            "format" : "int64"
          },
          "timeoutSeconds" : {
            "description" : "Number of seconds that Integration Server waits for a response from the target server.",
            "type" : "integer",
            "format" : "int64"
          },
          "retries" : {
            "description" : "Number of times Integration Server reissues a request that has timed out before returning an exception to the client.",
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ClientCertificateUpdateIn" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "description" : "User mapped to the client certificate.",
            "type" : "string"
          },
          "usage" : {
            "description" : "Purpose of the client certificate.",
            "type" : "string",
            "enum" : [ "SSL Authentication", "Verify", "Encrypt", "Verify and Encrypt", "Message Authentication" ]
          }
        }
      },
      "JournalLoggerOut" : {
        "type" : "object",
        "properties" : {
          "facilities" : {
            "description" : "All server logger facilities.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/JournalLoggerData"
              } ]
            }
          }
        }
      },
      "CsrfSecureTokenOut" : {
        "type" : "object",
        "required" : [ "name", "value" ],
        "properties" : {
          "name" : {
            "description" : "CSRF secure token name.",
            "type" : "string"
          },
          "value" : {
            "description" : "CSRF secure token value.",
            "type" : "string"
          }
        }
      },
      "KerberosSettingsIn" : {
        "type" : "object",
        "properties" : {
          "jaasContext" : {
            "description" : "The custom JAAS context used for Kerberos authentication.",
            "type" : "string"
          },
          "clientPrincipal" : {
            "description" : "The principal to use for Kerberos authentication.",
            "type" : "string"
          },
          "clientPassword" : {
            "description" : "The password for the principal used for Kerberos authentication.",
            "type" : "string"
          },
          "servicePrincipal" : {
            "description" : "The service that the Kerberos client wants to access.",
            "type" : "string"
          }
        }
      },
      "SQLInjectionFilterInOut" : {
        "type" : "object",
        "required" : [ "isSQLInjectionFilterEnabled" ],
        "properties" : {
          "isSQLInjectionFilterEnabled" : {
            "description" : "Whether SQL injection filter enabled.",
            "type" : "boolean",
            "enum" : [ false, true ]
          },
          "isDBSQLInjectionEnabled" : {
            "description" : "Whether Database specific filtering enabled.",
            "type" : "boolean",
            "enum" : [ false, true ]
          },
          "database" : {
            "description" : "Database against which specific parameters needs to be checked.",
            "type" : "string"
          },
          "parameters" : {
            "description" : "List of parameters in request which needs to be checked for DB specific special characters.",
            "type" : "string"
          },
          "isStdSQLInjectionEnabled" : {
            "description" : "Whether Standard SQL Injection Protection enabled. If enabled Enterprise Gateway Server blocks XML or SOAP payload messages that contain quotation mark ('), number sign (#), or double hyphen (--) anywhere within the message.",
            "type" : "boolean",
            "enum" : [ false, true ],
            "default" : false
          }
        }
      },
      "MobileAppProtectionInOut" : {
        "type" : "object",
        "properties" : {
          "mobileApplications" : {
            "description" : "List of mobile applications.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mobileAppDeviceTypes" : {
            "description" : "List of mobile application device types.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GroupOut" : {
        "type" : "object",
        "required" : [ "groupName" ],
        "properties" : {
          "groupName" : {
            "description" : "Group name.",
            "type" : "string"
          },
          "users" : {
            "description" : "Users that belong to the group.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GrpcChannelActionOut" : {
        "type" : "object",
        "required" : [ "status", "message" ],
        "properties" : {
          "status" : {
            "description" : "Status of Grpc channel action.",
            "type" : "string"
          },
          "message" : {
            "description" : "Message regarding the Grpc channel action.",
            "type" : "string"
          }
        }
      },
      "LicenseOut" : {
        "type" : "object",
        "properties" : {
          "SalesInformation" : {
            "$ref" : "#/components/schemas/SalesInformation"
          },
          "ProductInformation" : {
            "$ref" : "#/components/schemas/ProductInformation"
          },
          "IntegrationServer" : {
            "$ref" : "#/components/schemas/IntegrationServer"
          },
          "LicenseInformation" : {
            "$ref" : "#/components/schemas/LicenseInformation"
          },
          "TradingNetworks" : {
            "$ref" : "#/components/schemas/TradingNetworks"
          },
          "Terracotta" : {
            "$ref" : "#/components/schemas/Terracotta"
          }
        }
      },
      "DashboardConfigActionOut" : {
        "type" : "object",
        "required" : [ "message", "luceneMemorySize", "indexerThreadCount", "searcherThreadCount", "maxResults", "retentionDays", "maxJdbcPoolConnections", "enableDataCollection" ],
        "properties" : {
          "message" : {
            "description" : "The execution status of the administrative action.",
            "type" : "string"
          },
          "luceneMemorySize" : {
            "description" : "Amount of memory dedicated to the Lucene document engine (MB).",
            "type" : "integer",
            "format" : "int32"
          },
          "indexerThreadCount" : {
            "description" : "Number of resources that may be indexed concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "searcherThreadCount" : {
            "description" : "Number of search requests that may execute concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxResults" : {
            "description" : "The maximum number of results permitted by the server.",
            "type" : "integer",
            "format" : "int32"
          },
          "retentionDays" : {
            "description" : "The maximum amount of data to retain (days).",
            "type" : "integer",
            "format" : "int32"
          },
          "maxJdbcPoolConnections" : {
            "description" : "Number of concurrent JDBC connections allowed by the IS Statistics Data Collector module.",
            "type" : "integer",
            "format" : "int32"
          },
          "enableDataCollection" : {
            "description" : "Enable or Disable IS Statistics Data Collector module.",
            "type" : "boolean",
            "enum" : [ true, false ]
          }
        }
      },
      "FtpPortPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "pasvAddr" : {
            "description" : "Specifies the address that should be sent by the PORT command.",
            "type" : "string"
          }
        }
      },
      "DoSIPFilterInOut" : {
        "type" : "object",
        "properties" : {
          "whenLimitExceeds" : {
            "description" : "Specify action to be taken when the number of requests from a non-trusted IP address exceeds the specified limits",
            "type" : "string",
            "enum" : [ "Add to Deny List", "Block" ],
            "default" : "Add to Deny List"
          },
          "isDOSEnabled" : {
            "description" : "Whether Gloabl DoS is enabled.",
            "type" : "boolean",
            "enum" : [ true, false ],
            "default" : false
          },
          "maximumRequests" : {
            "description" : "The maximum number of requests that Enterprise Gateway Server can accept from a specific IP address in a given time interval.",
            "type" : "integer",
            "format" : "int32"
          },
          "requestsInSeconds" : {
            "description" : "The maximum number of requests that Enterprise Gateway Server can accept from a specific IP address in a given time interval(in seconds).",
            "type" : "integer",
            "format" : "int32"
          },
          "inProgressRequests" : {
            "description" : "The maximum number of requests in progress in given time interval.",
            "type" : "integer",
            "format" : "int32"
          },
          "blockInterval" : {
            "description" : "The number of minutes the requests to be blocked.",
            "type" : "integer",
            "format" : "int32"
          },
          "customErrorMessage" : {
            "description" : "The custom message to send to the clients, when a request is denied.",
            "type" : "string"
          },
          "trustedIPRange" : {
            "description" : "The IP addresses or range of trusted IPv4 or IPv6 addresses so that requests from these IP addresses are always allowed.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GlobalVariableUpdateIn_Patch" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "description" : "Value of the global variable",
            "type" : "string"
          }
        }
      },
      "PackagesManagerActionOut" : {
        "type" : "object",
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "description" : "Descriptive success or failure response for the action taken on a package.",
            "type" : "string"
          }
        }
      },
      "FtpPortLink" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "alias" : {
            "description" : "The port alias.",
            "type" : "string"
          },
          "url" : {
            "description" : "The port URL.",
            "type" : "string"
          }
        }
      },
      "RulePriorityOut" : {
        "type" : "object",
        "properties" : {
          "priority" : {
            "description" : "Rule Priority.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AssignedACL" : {
        "type" : "object",
        "required" : [ "name", "inherited" ],
        "properties" : {
          "name" : {
            "description" : "Name of the access control list.",
            "type" : "string"
          },
          "inherited" : {
            "description" : "Whether the access control list is inherited from the parent.",
            "type" : "boolean"
          }
        }
      },
      "SystemInfo" : {
        "type" : "object",
        "properties" : {
          "architecture" : {
            "description" : "CPU chip architecture",
            "type" : "string"
          },
          "cpuCores" : {
            "description" : "Number of CPU cores",
            "type" : "string"
          },
          "cpuType" : {
            "description" : "Type of CPU",
            "type" : "string"
          },
          "hwMemory" : {
            "description" : "Amount of computer memory in gigabytes",
            "type" : "string"
          },
          "hostname" : {
            "description" : "Host computer name",
            "type" : "string"
          },
          "osName" : {
            "description" : "Operating system name",
            "type" : "string"
          },
          "osRelease" : {
            "description" : "Operating system version",
            "type" : "string"
          },
          "osServicePack" : {
            "description" : "Operating system service pack",
            "type" : "string"
          }
        }
      },
      "JNDIConnectionAliases" : {
        "type" : "object",
        "properties" : {
          "aliases" : {
            "description" : "All JNDI connection aliases.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/JNDIConnectionAliasOut"
              } ]
            }
          }
        }
      },
      "HttpPortInUpdate" : {
        "type" : "object",
        "required" : [ "number", "packageName", "clientAuth" ],
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "diagnostic" : {
            "description" : "Indicates whether this port is the diagnostic port for Integration Server.",
            "type" : "boolean",
            "default" : false
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos" ]
          },
          "backlog" : {
            "description" : "When the port is suspended or receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32",
            "default" : 200
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "integer",
            "format" : "int64",
            "default" : 20000
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean",
            "default" : false
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of the threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "delay" : {
            "description" : "The number of milliseconds to delay before processing each request received on the port.",
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          },
          "kerberos" : {
            "$ref" : "#/components/schemas/KerberosSettings"
          }
        }
      },
      "TruststoreIn" : {
        "type" : "object",
        "required" : [ "keyStoreName", "keyStoreType", "keyStoreProvider", "keyStoreLocation", "keyStorePassword" ],
        "properties" : {
          "keyStoreName" : {
            "description" : "Alias for the truststore file. ",
            "type" : "string"
          },
          "keyStoreDescription" : {
            "description" : "Description of the truststore alias. ",
            "type" : "string"
          },
          "keyStoreType" : {
            "description" : "Certificate file format of the truststore.",
            "type" : "string"
          },
          "keyStoreProvider" : {
            "description" : "Provider that is used for the truststore.",
            "type" : "string"
          },
          "keyStoreLocation" : {
            "description" : "Location of the truststore file on the server. This can be the full pathname, or a relative path in relation to the Integration Server.",
            "type" : "string"
          },
          "keyStorePassword" : {
            "description" : "Password for the truststore file associated with this alias.",
            "type" : "string"
          }
        }
      },
      "MasterPasswordIn" : {
        "type" : "object",
        "required" : [ "oldPassword", "newPassword" ],
        "properties" : {
          "oldPassword" : {
            "description" : "Current Master Password.",
            "type" : "string"
          },
          "newPassword" : {
            "description" : "New Master Password.",
            "type" : "string"
          }
        }
      },
      "Caches" : {
        "type" : "object",
        "properties" : {
          "caches" : {
            "description" : "All caches in a cache manager.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/CacheOut"
              } ]
            }
          }
        }
      },
      "LdapConfigurations" : {
        "type" : "object",
        "properties" : {
          "directories" : {
            "$ref" : "#/components/schemas/List"
          }
        }
      },
      "ClientCertificateOut" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "description" : "User mapped to the certificate.",
            "type" : "string"
          },
          "usage" : {
            "description" : "Purpose of the certificate.",
            "type" : "string"
          },
          "certifcateInfo" : {
            "$ref" : "#/components/schemas/CertificateInfo"
          }
        }
      },
      "NodeOut" : {
        "type" : "object",
        "properties" : {
          "nodeInterface" : {
            "description" : "Interface of the node.",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the node.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Name of the node package.",
            "type" : "string"
          },
          "nodeType" : {
            "description" : "Type of the node.",
            "type" : "string"
          },
          "nodePermissions" : {
            "description" : "Node permissions.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/NodePermissions"
            }, {
              "$ref" : "#/components/schemas/ServicePermissions"
            } ]
          }
        }
      },
      "JMSTriggerOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the JMS trigger.",
            "type" : "string"
          },
          "lastError" : {
            "description" : "Last error reported for this JMS trigger.",
            "type" : "string"
          },
          "state" : {
            "description" : "Whether the JMS trigger is enabled, disabled, or suspended.",
            "type" : "string"
          },
          "status" : {
            "description" : "The status of the JMS trigger, which can be: Running or Not Running (reason), where reason identifies why the trigger is not running, such as Not Running (trigger disabled).",
            "type" : "string"
          },
          "aliasName" : {
            "description" : "JMS connection alias that the JMS trigger uses to retreive messages. ",
            "type" : "string"
          },
          "type" : {
            "description" : "Type of JMS trigger, which can be: standard SOAP (SOAP-JMS).",
            "type" : "string"
          },
          "acknowledgmentMode" : {
            "description" : "How Integration Server acknowledges messages received on behalf of a JMS trigger.",
            "type" : "string"
          },
          "executionUser" : {
            "description" : "The user whose credentials Integration Server uses when invoking services associated with the JMS trigger.",
            "type" : "string"
          },
          "joinExpires" : {
            "description" : "Whether the join expires after the time period specified in field expireAfter.",
            "type" : "boolean"
          },
          "expiresAfter" : {
            "description" : "How long Integration Server waits for the remaining documents in the join. The default join time-out is 1 day. (displayed in milliseconds)",
            "type" : "integer",
            "format" : "int32"
          },
          "reuse" : {
            "description" : "Whether this element can be dragged from the CentraSite Registry Explorer view to a BPM process or CAF project When this property is set to public, you can drag the asset to a BPM process or CAF project.",
            "type" : "string"
          },
          "processingMode" : {
            "description" : "Whether the JMS trigger uses a serial or concurrent processing mode.",
            "type" : "string"
          },
          "maxExecutionThreads" : {
            "description" : "Maximum number of messages that Integration Server can process for the trigger at concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "connectionCount" : {
            "description" : "Nnumber of connections this trigger makes to the JMS provider.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxBatchMessages" : {
            "description" : "Maximum number of messages that the trigger service can receive at one time.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxRetryAttempts" : {
            "description" : "Maximum number of times Integration Server attempts to re-execute the trigger service.",
            "type" : "integer",
            "format" : "int32"
          },
          "retryInterval" : {
            "description" : "Number of milliseconds that Integration Server waits between retry attempts.",
            "type" : "integer",
            "format" : "int32"
          },
          "onRetryFailure" : {
            "description" : "Action that Integration Server uses upon retry failure for an JMS trigger, where 0 specifies \"Throw service exception\" and 1 specifies \"Suspend and retry later\".",
            "type" : "string"
          },
          "resourceMonitoringService" : {
            "description" : "Service that programmatically checks the availability of resources used by a trigger.",
            "type" : "string"
          },
          "exactlyOnceDetectDuplicates" : {
            "description" : "Whether exactly-once processing is enabled for the JMS trigger. When enabled, Integration Server checks a message's redelivery count to determine whether the trigger has received the message before.",
            "type" : "boolean"
          },
          "exactlyOnceUseHistory" : {
            "description" : "Whether a document history database is maintained and used to determine whether a message is a duplicate.",
            "type" : "string"
          },
          "exactlyOnceUseHistoryTimeToLive" : {
            "description" : "Length of time the document history database maintains an entry for a message processed by the JMS trigger.",
            "type" : "string"
          },
          "documentResolverService" : {
            "description" : "Service that determines if the message status is New, Duplicate, or In Doubt.",
            "type" : "string"
          },
          "maxPrefetchSize" : {
            "description" : "Maximum number of messages that are retrieved and cache per request for this trigger. Using pre-fetch cache can speed up the retrieval of messages from webMethods Broker or Universal Messaging.",
            "type" : "string"
          },
          "joinType" : {
            "description" : "The type of join for a JMS trigger that receives messages from multiple destinations.",
            "type" : "string"
          },
          "destinations" : {
            "description" : "The list of destinations from which the trigger will receive messages.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JMSDestinationOut"
            }
          },
          "routingRules" : {
            "description" : "The list of routing rules that the trigger uses.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JMSRoutingRuleOut"
            }
          }
        }
      },
      "InternalServerPortPostIn" : {
        "type" : "object",
        "required" : [ "alias" ],
        "properties" : {
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string",
            "default" : "WmRoot"
          },
          "alias" : {
            "description" : "An alias for the port that is unique for this Integration Server.",
            "type" : "string"
          },
          "protocol" : {
            "description" : "Port protocol.",
            "type" : "string",
            "default" : "HTTP"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether this Internal Server port is enabled.",
            "type" : "boolean",
            "default" : false
          },
          "enterpriseGatewayHost" : {
            "description" : "The host name or IP address of the machine on which\r\nEnterprise Gateway Server is running.",
            "type" : "string"
          },
          "enterpriseGatewayPort" : {
            "description" : "The registration port on Enterprise Gateway Server.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxConnection" : {
            "description" : "The number of connections maintained between Enterprise\r\nGateway Server and the Internal Server.",
            "type" : "integer",
            "format" : "int32"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos", "requestClientCertification", "requireClientCertification" ],
            "default" : "basic"
          },
          "threadPool" : {
            "description" : "Whether port has a its own pool of threads.",
            "type" : "boolean"
          },
          "minimumThreads" : {
            "description" : "if threadpool is true, the minimum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 1
          },
          "maximumThreads" : {
            "description" : "if threadpool is true, the maximum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "threadPriority" : {
            "description" : "if threadpool is true, the priority of threads in the thread pool.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "username" : {
            "description" : "The name of the user on Enterprise Gateway Server that\r\nthe Internal Server should connect as.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password of the user on Enterprise Gateway Server\r\nthat the Internal Server should connect as.",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore that contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "kerberosSettings" : {
            "description" : "The Kerberos settings for the port. This field is present when clientAuth is \"requestKerberos\" or \"requireKerberos\".",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KerberosSettings"
            }
          }
        }
      },
      "CacheOut" : {
        "type" : "object",
        "required" : [ "cacheManagerName", "cacheName", "timeToIdleSeconds", "timeToLiveSeconds", "maxElementsInMemory", "maxEntriesLocalDisk", "diskExpiryThreadIntervalSeconds" ],
        "properties" : {
          "cacheManagerName" : {
            "description" : "Name of the cache manager to which the cache belongs.",
            "type" : "string"
          },
          "cacheName" : {
            "description" : "Name of the cache.",
            "type" : "string"
          },
          "timeToIdleSeconds" : {
            "description" : "Seconds an unmodified and unaccessed element will remain in the cache.",
            "type" : "string"
          },
          "timeToLiveSeconds" : {
            "description" : "Seconds an element will remain in the cache.",
            "type" : "string"
          },
          "maxElementsInMemory" : {
            "description" : "Maximum number of elements the cache will hold in memory.",
            "type" : "string"
          },
          "maxEntriesLocalDisk" : {
            "description" : "Maximum number of elements the cache will hold in the local file system.",
            "type" : "string"
          },
          "logging" : {
            "description" : "Ehcache logging setting.",
            "type" : "boolean",
            "default" : false
          },
          "clearOnFlush" : {
            "description" : "Ehcache clearOnFlush setting.",
            "type" : "boolean",
            "default" : true
          },
          "copyOnRead" : {
            "description" : "Ehcache copyOnRead setting.",
            "type" : "boolean",
            "default" : true
          },
          "copyOnWrite" : {
            "description" : "Ehcache copyOnWrite setting.",
            "type" : "boolean",
            "default" : true
          },
          "overflowToDisk" : {
            "description" : "Whether the cache uses local file system when maxElementsInMemory is exceeded.",
            "type" : "boolean",
            "default" : false
          },
          "overflowToOffHeap" : {
            "description" : "Whether cache uses off-heap memory when maxElementsInMemory is exceeded.",
            "type" : "boolean",
            "default" : false
          },
          "maxMemoryOffHeap" : {
            "description" : "Maximum off-heap memory the cache will use.",
            "type" : "integer",
            "format" : "int64"
          },
          "memoryStoreEvictionPolicy" : {
            "description" : "Policy to determine which elements are evicted from cache.",
            "type" : "string",
            "enum" : [ "LRU", "LFU" ],
            "default" : "LRU"
          },
          "diskExpiryThreadIntervalSeconds" : {
            "description" : "The interval between runs of the cache's expiry thread.",
            "type" : "integer",
            "format" : "int32"
          },
          "diskPersistent" : {
            "description" : "Whether to persist the cache to disk between JVM restarts.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "diskSpoolBufferSizeMB" : {
            "description" : "The amount of memory in megabytes to allocate for the write buffer to the disk.",
            "type" : "integer",
            "format" : "int64"
          },
          "eternal" : {
            "description" : "Whether the elements in the cache never expire.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "diskAccessStripes" : {
            "description" : "The number of disk access stripes.",
            "type" : "string",
            "default" : "1"
          },
          "cacheLoaderTimeoutMillis" : {
            "description" : "Timeout in milliseconds for cache loader related calls.",
            "type" : "integer",
            "format" : "int64",
            "default" : 30000
          },
          "maxEntriesInCache" : {
            "description" : "Maximum number of entries to be held in the cache.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "isInternal" : {
            "description" : "Whether cache is used internally by Integration Server. Care should be taken before modifying the configuration of an internal cache.",
            "type" : "boolean"
          },
          "cacheManagerAlive" : {
            "description" : "Whether cache's cache manager is alive.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "terracottaConfiguration" : {
            "$ref" : "#/components/schemas/TerracottaConfig"
          }
        }
      },
      "CsrfGuardInOut_Patch" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether CSRF guard is enabled.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "excludedUserAgents" : {
            "description" : "List of user agents through which Integration Server can be accessed without CSRF token.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "landingPages" : {
            "description" : "List of the landing pages (home pages) for the packages on Integration Servers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "unprotectedURLs" : {
            "description" : "List of URLs for which Integration Server does not have to check for CSRF tokens.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "denialAction" : {
            "description" : "Action to be taken when request does not contain an CSRF token or contains an invalid CSRF token.",
            "type" : "string",
            "enum" : [ "ERROR", "REDIRECT" ]
          }
        }
      },
      "GrpcProviderDescriptorActionOut" : {
        "type" : "object",
        "required" : [ "status", "message" ],
        "properties" : {
          "status" : {
            "description" : "Status of Grpc provider descriptor action.",
            "type" : "string"
          },
          "message" : {
            "description" : "Message regarding the Grpc provider descriptor.",
            "type" : "string"
          }
        }
      },
      "FtpsPortPostIn" : {
        "type" : "object",
        "required" : [ "alias", "number", "packageName" ],
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean",
            "default" : false
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "pasvAddr" : {
            "description" : "Specifies the address that should be sent by the PORT command.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "requestClientCertification", "requireClientCertification" ],
            "default" : "basic"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean",
            "default" : true
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "secureClients" : {
            "description" : "Prevents the FTPS listener from operating with non-secure clients..",
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "KeystoreInUpdate" : {
        "type" : "object",
        "properties" : {
          "keyStoreDescription" : {
            "description" : "Description of the keystore. ",
            "type" : "string"
          },
          "keyStoreType" : {
            "description" : "Certificate file format of the keystore file.",
            "type" : "string"
          },
          "keyStoreProvider" : {
            "description" : "Provider that is used for the keystore.",
            "type" : "string"
          },
          "keyStoreLocation" : {
            "description" : "Location of the keystore file on the server. This can be the full pathname or a relative path in relation to the Integration Server.",
            "type" : "string"
          },
          "keyStorePassword" : {
            "description" : "Password for the keystore file associated with this alias.",
            "type" : "string"
          },
          "configuredKeyAliases" : {
            "description" : "Key Aliases of the keystore. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyAlias"
            }
          },
          "isHsm" : {
            "description" : "Whether the keystore is stored on a Hardware Security Module (HSM) device.",
            "type" : "string",
            "enum" : [ "true", "false" ],
            "default" : "false"
          }
        }
      },
      "KerberosData_Patch" : {
        "type" : "object",
        "properties" : {
          "kerberosRealm" : {
            "description" : "The domain name of the Kerberos server, in all uppercase letters.",
            "type" : "string"
          },
          "kerberosKDC" : {
            "description" : "The host name of the machine on which the KDC resides.",
            "type" : "string"
          },
          "kerberosConfig" : {
            "description" : "The location of the Kerberos configuration file that contains the Kerberos configuration information.",
            "type" : "string"
          },
          "useSubjectCreds" : {
            "description" : "Whether to use a Kerberos V5 Generic Security Services (GSS) mechanism to obtain the necessary credentials from an existing subject set up by the JAAS authentication module.",
            "type" : "boolean"
          }
        }
      },
      "HttpsPortInUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "description" : "The port number",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "diagnostic" : {
            "description" : "Whether this port is the diagnostic port for Integration Server.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos", "requestClientCertification", "requireClientCertification", "idProvider" ]
          },
          "backlog" : {
            "description" : "When the port is suspended or receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32"
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "integer",
            "format" : "int64"
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean"
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of the threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "delay" : {
            "description" : "The number of milliseconds to delay before processing each request received on the port.",
            "type" : "integer",
            "format" : "int64"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "kerberos" : {
            "$ref" : "#/components/schemas/KerberosSettingsIn"
          },
          "idProvider" : {
            "description" : "The OpenID Provider to use to perform authentication for all requests sent to this port.",
            "type" : "string"
          },
          "jsseDisabledProtocols" : {
            "description" : "Specifies the list of disabled SSL and TLS protocol versions when Integration Server acts as SSL when the server is handling inbound requests.",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Specifies If the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          }
        }
      },
      "UMClientLoggerOut" : {
        "type" : "object",
        "properties" : {
          "logLevel" : {
            "description" : "Level of the information that is written to the log.",
            "type" : "string"
          },
          "logSize" : {
            "description" : "Maximum size of the log file.",
            "type" : "integer",
            "format" : "int32"
          },
          "logDepth" : {
            "description" : "Number of backup log files to keep on disk when using log rolling.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "List" : {
        "type" : "object",
        "properties" : { }
      },
      "ACLIn" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "description" : "Name of the access control list.",
            "type" : "string"
          },
          "allow" : {
            "description" : "List of groups whose members are allowed access to resources protected by the access control list.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "deny" : {
            "description" : "List of groups whose members are denied access to resources protected by the access control list.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "MQTTConnectionAliasIn" : {
        "type" : "object",
        "required" : [ "name", "description", "clientId" ],
        "properties" : {
          "name" : {
            "description" : "Name of the MQTT connection alias.",
            "type" : "string"
          },
          "type" : {
            "description" : "Type of common messaging provider. Currently, Integration Server supports MQTT version 3.1.1 only which is returned as MQTT3.",
            "type" : "string",
            "default" : "MQTT3"
          },
          "description" : {
            "description" : "Description of the MQTT connection alias.",
            "type" : "string"
          },
          "clientId" : {
            "description" : "Connection client ID of the MQTT connection alias. Integration Server generates a clientID automatically but you can supply your own.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Package in which to store the MQTT connection alias.",
            "type" : "string",
            "default" : "WmRoot"
          },
          "user" : {
            "description" : "User name for client authentication.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for client authentication.",
            "type" : "string"
          },
          "host" : {
            "description" : "URL containing the protocol, domain, and port of the MQTT server to which connections created using the MQTT connection alias will connect.",
            "type" : "string",
            "default" : "tcp://localhost:1883"
          },
          "cleanSessionEnabled" : {
            "description" : "Indicates if clean sessions are used for subscriptions.",
            "type" : "boolean",
            "default" : true
          },
          "timeout" : {
            "description" : "Maximum number of seconds that Integration Server waits for a network connection to the MQTT server to be established.",
            "type" : "string",
            "default" : "30"
          },
          "keepAlive" : {
            "description" : "Maximum number of seconds that can elapse between messages being sent to or received from the MQTT server using a connection created for this MQTT connection alias.",
            "type" : "integer",
            "format" : "int32",
            "default" : 60
          },
          "willEnabled" : {
            "description" : "Whether the MQTT server sends a last will message on behalf of Integration Server if Integration Server disconnects abruptly from the MQTT server.",
            "type" : "boolean",
            "default" : false
          },
          "willQos" : {
            "description" : "Quality of Service for the last will message. Inputting '0' will create an \"At most once\" QoS. Inputting '1' will create an \"At least once\" QoS. Inputting '2' will create an \"Exactly once\" QoS.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 0, 1, 2 ]
          },
          "willRetain" : {
            "description" : "Whether the MQTT server retains the last will message.",
            "type" : "boolean",
            "default" : false
          },
          "willTopic" : {
            "description" : "Topic to which the last will message is published. All subscribers to this topic will receive the last will message",
            "type" : "string"
          },
          "willPayload" : {
            "description" : "Contents of the last will message.",
            "type" : "string"
          },
          "willOnConnectPayload" : {
            "description" : "Message to send upon successful connection to the MQTT server.",
            "type" : "string"
          },
          "willOnDisconnectPayload" : {
            "description" : "Message to send upon disconnecting from the MQTT server.",
            "type" : "string"
          },
          "useSSL" : {
            "description" : "Whether to use SSL to connect to the MQTT server.",
            "type" : "boolean",
            "default" : false
          },
          "truststoreAlias" : {
            "description" : "Truststore alias to be used if SSL is enabled.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "Keystore alias to be used if two-way SSL is required.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Alias to the private key associated with the keystore.",
            "type" : "string"
          }
        }
      },
      "JMSTriggers" : {
        "type" : "object",
        "properties" : {
          "triggers" : {
            "description" : "All JMS triggers.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/JMSTriggerOut"
              } ]
            }
          }
        }
      },
      "HttpPort" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "diagnostic" : {
            "description" : "Indicates whether this port is the diagnostic port for Integration Server. Field is present only when true.",
            "type" : "boolean"
          },
          "protocol" : {
            "description" : "The protocol for the port.",
            "type" : "string",
            "enum" : [ "HTTP" ]
          },
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos" ]
          },
          "backlog" : {
            "description" : "When the port receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32"
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "string"
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean",
            "default" : false
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of the threads in the thread pool.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "threadsInUse" : {
            "description" : "If threadPool is true, the number of threads from the pool that are currently in use.",
            "type" : "integer",
            "format" : "int32"
          },
          "delay" : {
            "description" : "The number of milliseconds to delay before processing each request received on the port.",
            "type" : "integer",
            "format" : "int64"
          },
          "suspended" : {
            "description" : "Indicates whether the port is suspended. If false, the port is accepting requests.",
            "type" : "boolean"
          },
          "kerberos" : {
            "$ref" : "#/components/schemas/KerberosSettings"
          },
          "ipAccess" : {
            "$ref" : "#/components/schemas/IPAccess"
          },
          "resourceAccess" : {
            "$ref" : "#/components/schemas/ResourceAccess"
          },
          "message" : {
            "description" : "Information about the operation that just completed.",
            "type" : "string"
          }
        }
      },
      "OAuthGlobalSetting_Patch" : {
        "type" : "object",
        "properties" : {
          "requireHTTPS" : {
            "description" : "Indicates whether the authorization server should require an HTTPS connection to authorize requests",
            "type" : "boolean"
          },
          "authCodeLifetimeSeconds" : {
            "description" : "Specifies the length of time (in seconds) that the authorization code issued by the authorization server is valid",
            "type" : "integer",
            "format" : "int32"
          },
          "accessTokenLifetimeSeconds" : {
            "description" : "Specifies the length of time that access tokens issued by the authorization server are valid. If set to -1, it will be set to never expire.",
            "type" : "integer",
            "format" : "int32"
          },
          "authServerAlias" : {
            "description" : "Name of the external authorization server to ask whether or not an access token is valid",
            "type" : "string"
          },
          "tokenEndpointAuth" : {
            "description" : "Specifies whether the token endpoint accepts an existing session or requires credentials for authentication.",
            "type" : "string"
          },
          "requirePKCE" : {
            "description" : "Indicates whether clients must use PKCE (Proof Key for Code Exchange) with the authorization code grant.",
            "type" : "boolean"
          }
        }
      },
      "HotDeploymentData_Patch" : {
        "type" : "object",
        "properties" : {
          "enable" : {
            "description" : "Whether hot deployment of custom packages is enabled on this Integration Server.",
            "type" : "boolean"
          },
          "timeout" : {
            "description" : "Maximum number of seconds that Integration Server waits for in-flight processing to complete before attempting hot deployment.",
            "type" : "integer",
            "format" : "int32"
          },
          "autoRecover" : {
            "description" : "Whether Integration Server reverts to the previous version of a package when the deployment of a new version of the package fails.",
            "type" : "boolean"
          }
        }
      },
      "InternalServerPortPostOut" : {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "description" : "The packages associated with the port.",
            "type" : "string"
          },
          "portID" : {
            "description" : "A unique ID for the port created by Integration Server by combining enterpriseGatewayHost and enterpriseGatewayPort.",
            "type" : "string"
          },
          "alias" : {
            "description" : "An alias for the port that is unique for this Integration Server.",
            "type" : "string"
          },
          "protocol" : {
            "description" : "Port protocol.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether this Internal Server port is enabled.",
            "type" : "boolean"
          },
          "enterpriseGatewayHost" : {
            "description" : "The host name or IP address of the machine on which\r\nEnterprise Gateway Server is running.",
            "type" : "string"
          },
          "enterpriseGatewayPort" : {
            "description" : "The registration port on Enterprise Gateway Server.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxConnection" : {
            "description" : "The number of connections maintained between Enterprise\r\nGateway Server and the Internal Server.",
            "type" : "integer",
            "format" : "int32"
          },
          "clientAuth" : {
            "description" : "basic, digest, requestKerberos, requireKerberos, requestClientCertification, requireClientCertification",
            "type" : "string"
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean"
          },
          "minimumThreads" : {
            "description" : "if threadpool is true, the minimum number of threads in the thread pool for the port. ",
            "type" : "integer",
            "format" : "int32"
          },
          "maximumThreads" : {
            "description" : "if threadpool is true, the maximum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "if threadpool is true, the priority of threads in the thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "username" : {
            "description" : "The name of the user on Enterprise Gateway Server that\r\nthe Internal Server should connect as.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password of the user on Enterprise Gateway Server\r\nthat the Internal Server should connect as.",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore that contains the trusted root of a certificate or\r\n\r\nsigning authority (CA).",
            "type" : "string"
          },
          "kerberosSettings" : {
            "description" : "The Kerberos settings for the port. This field is present when clientAuth is \"requestKerberos\" or \"requireKerberos\".",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KerberosSettings"
            }
          },
          "resourceAccess" : {
            "$ref" : "#/components/schemas/ResourceAccess"
          }
        }
      },
      "ClientCertificateUpdateIn_Patch" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "description" : "User mapped to the client certificate.",
            "type" : "string"
          },
          "usage" : {
            "description" : "Purpose of the client certificate.",
            "type" : "string",
            "enum" : [ "SSL Authentication", "Verify", "Encrypt", "Verify and Encrypt", "Message Authentication" ]
          }
        }
      },
      "DashboardConfigUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "luceneMemorySize" : {
            "description" : "Amount of memory dedicated to the Lucene document engine (MB).",
            "type" : "integer",
            "format" : "int32"
          },
          "indexerThreadCount" : {
            "description" : "Number of resources that may be indexed concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "searcherThreadCount" : {
            "description" : "Number of search requests that may execute concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxResults" : {
            "description" : "The maximum number of results permitted by the server.",
            "type" : "integer",
            "format" : "int32"
          },
          "retentionDays" : {
            "description" : "The maximum amount of data to retain (days).",
            "type" : "integer",
            "format" : "int32"
          },
          "maxJdbcPoolConnections" : {
            "description" : "Number of concurrent JDBC connections allowed by the IS Statistics Data Collector module.",
            "type" : "integer",
            "format" : "int32"
          },
          "enableDataCollection" : {
            "description" : "Enable or Disable IS Statistics Data Collector module.",
            "type" : "boolean",
            "enum" : [ true, false ]
          }
        }
      },
      "EmailPortPutIn" : {
        "type" : "object",
        "required" : [ "packageName", "host", "user", "interval" ],
        "properties" : {
          "packageName" : {
            "description" : "Package with which this port is associated.",
            "type" : "string"
          },
          "host" : {
            "description" : "Name of the machine on which the IMAP or POP3 mail server is running.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name that Integration Server must use to log on to the mail server.",
            "type" : "string"
          },
          "interval" : {
            "description" : "Frequency, in seconds,  with which Integration Server checks the mail server for incoming email messages.",
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "type" : {
            "description" : "The type of mail server from which the email port will receive requests. Specify IMAP or POP3.",
            "type" : "string",
            "enum" : [ "IMAP", "POP3", "imap", "pop3" ],
            "default" : "IMAP"
          },
          "serverPort" : {
            "description" : "The port on which the mail server listens for requests.",
            "type" : "integer",
            "format" : "int32"
          },
          "authentication" : {
            "description" : "The type of authentication that Integration Server should use to connect to the specified e-mail server. Select Basic Authentication or OAuth",
            "type" : "string",
            "enum" : [ "Basic", "OAuth" ],
            "default" : "Basic"
          },
          "password" : {
            "description" : "The password the user name used to log on to the mail server.This field applies only to Basic Authentication.",
            "type" : "string"
          },
          "authURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request authorization code.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientID" : {
            "description" : "The unique public identifier that the OAuth server generates for Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The unique string that the OAuth server provides to Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "scope" : {
            "description" : "The e-mail server access permissions configured for Integration Server during registration. You can specify multiple scopes separated by a space.This field applies only to OAuth.",
            "type" : "string"
          },
          "accessTokenURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request an access token from the OAuth server.This field applies only to OAuth.",
            "type" : "string"
          },
          "redirectURL" : {
            "description" : "The URL that the OAuth server must use to send authentication responses to Integration Server.This field applies only to OAuth.",
            "type" : "string"
          },
          "tlsSettings" : {
            "description" : "The type of SSL encryption that Integration Server uses when communicating with an email server. You can configure the port to use None , Explicit, or Implicit.",
            "type" : "string",
            "enum" : [ "None", "Explicit", "Implicit" ],
            "default" : "None"
          },
          "trustStore" : {
            "description" : "Alias for the truststore that contains certificates presented by the email server to Integration Server.",
            "type" : "string"
          },
          "logout" : {
            "description" : "For use with IMAP and multi-threading only. Whether you want your server to log out after checking for mail.",
            "type" : "boolean",
            "default" : false
          },
          "runAsUser" : {
            "description" : "The user name under which requested services are to run.",
            "type" : "string"
          },
          "authenticateWithMessage" : {
            "description" : "When set to true, Integration Server checks for $user and $pass parameters in the Subject line of the email. The user name is the user under which the service is to run on Integration Server. When set to false, specify the user in the runAsUser field.",
            "type" : "boolean",
            "default" : true
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean",
            "default" : true
          },
          "globalService" : {
            "description" : "The service that you want Integration Server to execute for every email request.",
            "type" : "string"
          },
          "defaultService" : {
            "description" : "The service that you want Integration Server to execute if the email message does not supply a valid service in the subject line and the globalService field is blank.",
            "type" : "string"
          },
          "reply" : {
            "description" : "Whether you want Integration Server to send any output that the service generates to the original sender in an email attachment.",
            "type" : "boolean",
            "default" : false
          },
          "replyOnError" : {
            "description" : "Whether you want Integration Server to report errors to the original sender in the body portion of an email.",
            "type" : "boolean",
            "default" : false
          },
          "remove" : {
            "description" : "Whether you want Integration Server to delete a valid email from the IMAP server once Integration Server has successfully received the email.",
            "type" : "boolean",
            "default" : true
          },
          "deleteInvalid" : {
            "description" : "Whether you want Integration Server to delete invalid emails from the IMAP server.",
            "type" : "boolean",
            "default" : true
          },
          "multiThreaded" : {
            "description" : "Whether you want Integration Server to use multiple threads for this port.",
            "type" : "boolean",
            "default" : false
          },
          "numThreads" : {
            "description" : "The number of threads you want Integration Server to use for this port. This field is applicable only if multiThreaded is true.",
            "type" : "integer",
            "format" : "int32"
          },
          "invokePerPart" : {
            "description" : "Whether Integration Server invokes the service for each part of a multipart message or just once for the entire message.",
            "type" : "boolean",
            "default" : true
          },
          "includeHeaders" : {
            "description" : "Whether Integration Server includes the email headers when passing an email message to the content handler.",
            "type" : "boolean",
            "default" : false
          },
          "urlEncodedBody" : {
            "description" : "Whether the email body contains URL-encoded input parameters to be decoded into IData, placed in the pipeline, and passed to the service.",
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "JDBCFunctionAliasPatchOut" : {
        "type" : "object",
        "required" : [ "message", "name", "autocommit", "cache", "isolationLevel", "description" ],
        "properties" : {
          "message" : {
            "description" : "Success message, including any action needed to make the updated settings take effect.",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the function that points to a connection pool. Cannot be modified by PATCH operation.",
            "type" : "string"
          },
          "pool" : {
            "description" : "Alias of the connection pool at which the function points.",
            "type" : "string"
          },
          "autocommit" : {
            "description" : "SQL Autocommit. When active, each SQL statement is executed in its own transaction and automatically committed. Cannot be modified by PATCH operation.",
            "type" : "string",
            "enum" : [ "active", "inactive" ]
          },
          "cache" : {
            "description" : "SQL Statement cache enabled. Cannot be modified by PATCH operation.",
            "type" : "string",
            "enum" : [ "active", "inactive" ]
          },
          "isolationLevel" : {
            "description" : "SQL Transaction Isolation Level that defines the degree to which one transaction must be isolated from resource or data modifications made by other transactions. Cannot be modified by PATCH operation.",
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "description" : "Description of the function.Cannot be modified by Patch operation. Cannot be modified by PATCH operation.",
            "type" : "string"
          },
          "inFailFastMode" : {
            "description" : "Whether the function is currently in fail-fast mode. Cannot be modified by PATCH operation.",
            "type" : "boolean"
          },
          "failFastMode" : {
            "description" : "Whether fail-fast mode is enabled for the function.",
            "type" : "boolean"
          }
        }
      },
      "EnterpriseGatewayPort" : {
        "type" : "object",
        "properties" : {
          "externalPort" : {
            "$ref" : "#/components/schemas/EGExternalPort"
          },
          "registrationPort" : {
            "$ref" : "#/components/schemas/EGRegPort"
          }
        }
      },
      "LdapSettingsOut" : {
        "type" : "object",
        "properties" : {
          "isCDSRunning" : {
            "description" : "Whether Central User Management is running or not.",
            "type" : "boolean"
          },
          "provider" : {
            "description" : "Specifies the type of external directory server, if any, that this server uses for user account and group information. ",
            "type" : "string",
            "enum" : [ "local", "LDAP" ]
          },
          "cacheSize" : {
            "description" : "Maximum number of LDAP users Integration Server can keep in memory in the user cache.",
            "type" : "integer",
            "format" : "int32"
          },
          "cacheExpire" : {
            "description" : "Number of minutes an LDAP user's credentials\r\n(userid and password) can remain in the credential\r\ncache before being purged",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "CacheInUpdate" : {
        "type" : "object",
        "required" : [ "maxElementsInMemory", "maxEntriesLocalDisk", "diskExpiryThreadIntervalSeconds" ],
        "properties" : {
          "timeToIdleSeconds" : {
            "description" : "Seconds an unmodified and unaccessed element can remain in the cache. The default value of 0 indicates that the elements in this cache do not have a time-to-idle expiration.",
            "type" : "string",
            "default" : "0"
          },
          "timeToLiveSeconds" : {
            "description" : "Seconds an element can remain in the cache. The default value of 0 indicates that the elements in this cache do not have a time-to-live expiration. ",
            "type" : "string",
            "default" : "0"
          },
          "maxElementsInMemory" : {
            "description" : "Maximum number of elements the cache will hold in memory.",
            "type" : "string"
          },
          "maxEntriesLocalDisk" : {
            "description" : "Maximum number of elements the cache will hold in the local file system.",
            "type" : "string"
          },
          "logging" : {
            "description" : "Ehcache logging setting.",
            "type" : "boolean",
            "default" : false
          },
          "clearOnFlush" : {
            "description" : "Ehcache clearOnFlush setting.",
            "type" : "boolean",
            "default" : true
          },
          "copyOnRead" : {
            "description" : "Ehcache copyOnRead setting.",
            "type" : "boolean",
            "default" : true
          },
          "copyOnWrite" : {
            "description" : "Ehcache copyOnWrite setting.",
            "type" : "boolean",
            "default" : true
          },
          "overflowToDisk" : {
            "description" : "Whether cache uses the local file system when maxElementsInMemory is exceeded.",
            "type" : "boolean",
            "default" : false
          },
          "overflowToOffHeap" : {
            "description" : "Whether cache uses off-heap memory when maxElementsInMemory is exceeded.",
            "type" : "boolean",
            "default" : false
          },
          "maxMemoryOffHeap" : {
            "description" : "Maximum off-heap memory the cache will use.",
            "type" : "integer",
            "format" : "int64"
          },
          "memoryStoreEvictionPolicy" : {
            "description" : "Policy to determine which elements are evicted from cache.",
            "type" : "string",
            "enum" : [ "LRU", "LFU" ],
            "default" : "LRU"
          },
          "diskExpiryThreadIntervalSeconds" : {
            "description" : "The interval between runs of the cache's expiry thread.",
            "type" : "integer",
            "format" : "int32"
          },
          "diskPersistent" : {
            "description" : "Whether to persist the cache to disk between JVM restarts.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "diskSpoolBufferSizeMB" : {
            "description" : "The amount of memory in megabytes to allocate for the write buffer to the disk.",
            "type" : "integer",
            "format" : "int64"
          },
          "eternal" : {
            "description" : "Whether the elements in the cache never expire.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "diskAccessStripes" : {
            "description" : "The number of disk access stripes",
            "type" : "string",
            "default" : "1"
          },
          "cacheLoaderTimeoutMillis" : {
            "description" : "Timeout in milliseconds for cache loader related calls.",
            "type" : "integer",
            "format" : "int64",
            "default" : 30000
          },
          "maxEntriesInCache" : {
            "description" : "Maximum number of entries to be held in the cache.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "isInternal" : {
            "description" : "Whether cache is used internally by Integration Server. Care should be taken before modifying the configuration of an internal cache",
            "type" : "boolean"
          },
          "cacheManagerAlive" : {
            "description" : "Whether cache's cache manager is alive.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "terracottaConfiguration" : {
            "$ref" : "#/components/schemas/TerracottaConfig"
          }
        }
      },
      "EmailPortPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "description" : "Package with which this port is associated.",
            "type" : "string"
          },
          "host" : {
            "description" : "Name of the machine on which the IMAP or POP3 mail server is running.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name that Integration Server must use to log on to the mail server.",
            "type" : "string"
          },
          "interval" : {
            "description" : "Frequency, in seconds, with which Integration Server checks the mail server for incoming email messages.",
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "type" : {
            "description" : "The type of mail server from which the email port will receive requests. Specify IMAP or POP3.",
            "type" : "string",
            "enum" : [ "IMAP", "POP3", "imap", "pop3" ]
          },
          "serverPort" : {
            "description" : "The port on which the mail server listens for requests.",
            "type" : "integer",
            "format" : "int32"
          },
          "authentication" : {
            "description" : "The type of authentication that Integration Server should use to connect to the specified e-mail server. Select Basic Authentication or OAuth",
            "type" : "string",
            "enum" : [ "Basic", "OAuth" ]
          },
          "password" : {
            "description" : "The password the user name used to log on to the mail server.This field applies only to Basic Authentication.",
            "type" : "string"
          },
          "authURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request authorization code.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientID" : {
            "description" : "The unique public identifier that the OAuth server generates for Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The unique string that the OAuth server provides to Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "scope" : {
            "description" : "The e-mail server access permissions configured for Integration Server during registration. You can specify multiple scopes separated by a space.This field applies only to OAuth.",
            "type" : "string"
          },
          "accessTokenURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request an access token from the OAuth server.This field applies only to OAuth.",
            "type" : "string"
          },
          "redirectURL" : {
            "description" : "The URL that the OAuth server must use to send authentication responses to Integration Server.This field applies only to OAuth.",
            "type" : "string"
          },
          "tlsSettings" : {
            "description" : "The type of SSL encryption that Integration Server uses when communicating with an email server. You can configure the port to use None , Explicit, or Implicit.",
            "type" : "string",
            "enum" : [ "None", "Explicit", "Implicit" ]
          },
          "trustStore" : {
            "description" : "Alias for the truststore that contains certificates presented by the email server to Integration Server.",
            "type" : "string"
          },
          "logout" : {
            "description" : "For use with IMAP and multi-threading only. Whether you want your server to log out after checking for mail.",
            "type" : "boolean"
          },
          "runAsUser" : {
            "description" : "The user name under which requested services are to run.",
            "type" : "string"
          },
          "authenticateWithMessage" : {
            "description" : "When set to true, Integration Server checks for $user and $pass parameters in the Subject line of the email. The user name is the user under which the service is to run on Integration Server. When set to false, specify the user in the runAsUser field.",
            "type" : "boolean"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "globalService" : {
            "description" : "The service that you want Integration Server to execute for every email request.",
            "type" : "string"
          },
          "defaultService" : {
            "description" : "The service that you want Integration Server to execute if the email message does not supply a valid service in the subject line and the globalService field is blank.",
            "type" : "string"
          },
          "reply" : {
            "description" : "Whether you want Integration Server to send any output that the service generates to the original sender in an email attachment.",
            "type" : "boolean"
          },
          "replyOnError" : {
            "description" : "Whether you want Integration Server to report errors to the original sender in the body portion of an email.",
            "type" : "boolean"
          },
          "remove" : {
            "description" : "Whether you want Integration Server to delete a valid email from the IMAP server once Integration Server has successfully received the email.",
            "type" : "boolean"
          },
          "deleteInvalid" : {
            "description" : "Whether you want Integration Server to delete invalid emails from the IMAP server.",
            "type" : "boolean"
          },
          "multiThreaded" : {
            "description" : "Whether you want Integration Server to use multiple threads for this port.",
            "type" : "boolean"
          },
          "numThreads" : {
            "description" : "The number of threads you want Integration Server to use for this port. This field is applicable only if multiThreaded is true.",
            "type" : "integer",
            "format" : "int32"
          },
          "invokePerPart" : {
            "description" : "Whether Integration Server invokes the service for each part of a multipart message or just once for the entire message.",
            "type" : "boolean"
          },
          "includeHeaders" : {
            "description" : "Whether Integration Server includes the email headers when passing an email message to the content handler.",
            "type" : "boolean"
          },
          "urlEncodedBody" : {
            "description" : "Whether the email body contains URL-encoded input parameters to be decoded into IData, placed in the pipeline, and passed to the service.",
            "type" : "boolean"
          }
        }
      },
      "MQTTTriggerActionOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Descriptive success or failure message of performing an action on an MQTT trigger.",
            "type" : "string"
          }
        }
      },
      "InternalServerPortLink" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "The port alias.",
            "type" : "string"
          },
          "portID" : {
            "description" : "A unique ID for the port created by Integration Server by combining enterpriseGatewayHost and enterpriseGatewayPort.",
            "type" : "string"
          },
          "url" : {
            "description" : "The URL for the port.",
            "type" : "string"
          }
        }
      },
      "RuleAlertOptionInOut" : {
        "type" : "object",
        "required" : [ "ruleName", "ruleType", "alertSettings" ],
        "properties" : {
          "ruleName" : {
            "description" : "Name of the rule.",
            "type" : "string"
          },
          "ruleType" : {
            "description" : "Type of the rule.",
            "type" : "string",
            "enum" : [ "ALERT", "DENY" ]
          },
          "alertSettings" : {
            "description" : "Whether alert setting is default or rule specific.",
            "type" : "string",
            "enum" : [ "Custom", "Default" ]
          },
          "alertType" : {
            "description" : "Type of the alert.",
            "type" : "string",
            "enum" : [ "None", "Email", "FlowService" ],
            "default" : "None"
          },
          "alertOnEvery" : {
            "description" : "Whether to alert on every rule violation.",
            "type" : "boolean",
            "enum" : [ true, false ],
            "default" : true
          },
          "alertInterval" : {
            "description" : "Alert interval in minutes, when alert is disabled then on every rule violation, then the alerts will be grouped and will be sent in fixed time interval.",
            "type" : "integer",
            "format" : "int32"
          },
          "emailTo" : {
            "description" : "When alert type is Email, then on rule violation the alert will be sent to these email ids.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "flowServiceName" : {
            "description" : "When alert type is Flow Service, then on rule violation this flow service will be invoked.",
            "type" : "string"
          },
          "runAsUser" : {
            "description" : "When alert type is Flow Service, then on rule violation the flow service will be invoked with this user.",
            "type" : "string"
          }
        }
      },
      "EnterpriseGatewayPort_Patch" : {
        "type" : "object",
        "properties" : {
          "externalPort" : {
            "$ref" : "#/components/schemas/EGExternalPort"
          },
          "registrationPort" : {
            "$ref" : "#/components/schemas/EGRegPort"
          }
        }
      },
      "LicenseUpdateIn" : {
        "type" : "object",
        "properties" : {
          "licenseKeyFile" : {
            "description" : "The path to where the license key file is stored.",
            "type" : "string"
          },
          "terracottaLicenseFile" : {
            "description" : "The path to where the Terracotta license file is stored",
            "type" : "string"
          }
        }
      },
      "HealthGaugeAllInfoOut" : {
        "type" : "object",
        "properties" : {
          "indicators" : {
            "description" : "All health indicators.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/HealthGauge"
              } ]
            }
          }
        }
      },
      "UrlAliasOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the URL alias.",
            "type" : "string"
          },
          "urlPath" : {
            "description" : "Specifies the path to the resource on Integration Server.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Indicates name of the package with which alias is associated.",
            "type" : "string"
          },
          "association" : {
            "description" : "The contents indicate the tool used to create the URL alias.",
            "type" : "string"
          },
          "portList" : {
            "description" : "Indicates single URL alias can be used with multiple destinations.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PortDetail"
            }
          },
          "isEmptyAlias" : {
            "description" : "Indicates name of the alias as empty alias.",
            "type" : "boolean"
          },
          "message" : {
            "description" : "Status of UrlAlias",
            "type" : "string"
          }
        }
      },
      "JMSConnectionAliasOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the JMS alias.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the JMS connection alias is enabled.",
            "type" : "boolean"
          },
          "connected" : {
            "description" : "Whether the JMS connection alias is connected.",
            "type" : "boolean"
          },
          "hasTriggers" : {
            "description" : "Indicates if any JMS triggers use this JMS connection alias.",
            "type" : "boolean"
          },
          "csqCount" : {
            "description" : "Current number of messages in the client side queue (CSQ) for this JMS connection alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "description" : "A description of the JMS connection alias.",
            "type" : "string"
          },
          "transactionType" : {
            "description" : "Type of transaction for sessions that use this JMS connection alias.",
            "type" : "string"
          },
          "clientID" : {
            "description" : "Client identifier associated with the connections established by this JMS connection alias.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name required to acquire a connection from the connection factory.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password required to acquire a connection from the connection factory.",
            "type" : "string"
          },
          "createConnectionUsing" : {
            "description" : "How administered objects (connection factories and destinations) will be looked up.",
            "type" : "string"
          },
          "jndiAliasName" : {
            "description" : "Alias to the JNDI provider that the JMS connection alias uses to look up administered objects. This field applies only when createConnectionUsing is JNDI_LOOKUP.",
            "type" : "string"
          },
          "connectionFactoryLookupName" : {
            "description" : "Lookup name for the connection factory that you want to use to create a connection to the JMS provider specified in this JMS connection alias. This field applies only when createConnectionUsing is JNDI_LOOKUP.",
            "type" : "string"
          },
          "createAdministeredObjectsOnDemand" : {
            "description" : "Whether Integration Server creates a connection factory or destination on the JNDI provider if the object is not found at the time Integration Server looks up the object. This field applies only when the JMS provider is Universal Messaging.",
            "type" : "boolean"
          },
          "enableFollowTheMaster" : {
            "description" : "Whether Integration Server always connects to the master realm server in the Universal Messaging cluster. This setting affects producer and consumer connections created using this JMS connection alias.",
            "type" : "boolean"
          },
          "monitorWmConnectionFactory" : {
            "description" : "How Integration Server monitors the webMethods connection factory object on the JNDI server for changes where NONE means no monitoring is done, CLIENT_POLL corresponds to specifying an interval for poll changes (connectionFactoryPollInterval) , JNDI_POLL corresponds to polling for changes with an interval defined by webMethods Connection Factory , and LISTENER corresponds to monitoring the connection factory by registering an event listener. This field applies only when createConnectionUsing value is JNDI_LOOKUP and Broker is the JMS provider.",
            "type" : "string"
          },
          "connectionFactoryPollingInterval" : {
            "description" : "Number of minutes between polling attempts. The polling interval must be a positive integer. This field is required when monitorWmConnectionFactory is set to CLIENT_POLL. This field applies only when createConnectionUsing value is JNDI_LOOKUP and Broker is the JMS provider.",
            "type" : "integer",
            "format" : "int32"
          },
          "brokerHost" : {
            "description" : "Name (DNSname:port or ipaddress:port) of the machine on which the Broker Server acting as the JMS provider resides. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "brokerName" : {
            "description" : "Name of the Broker as defined on the Broker Server. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "clientGroup" : {
            "description" : "Name of the client group to which you want Integration Server to belong when it acts as a JMS client. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "brokerList" : {
            "description" : "Comma-delimited list of Broker Servers on which the connection between the Integration Server (acting as the JMS client) and the webMethods Broker can exist. Use the following format: {Broker Name]@<host>[:port]. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "keystore" : {
            "description" : "Full path to this Integration Server's keystore file. The keystore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "keystoreType" : {
            "description" : "File type of the Integration Server's keystore file. The keystoreType is required only when configuring an SSL connection to the Broker This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "truststore" : {
            "description" : "The full path to this Integration Server client's trust store file. The trustore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "trustoreType" : {
            "description" : "The file type of the Integration Server's trust store file, which is JKS. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "encrypted" : {
            "description" : "Whether the connection between the Integration Server and the Broker is encrypted. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "boolean"
          },
          "classLoader" : {
            "description" : "Name of the class loader used with this JMS connection alias.",
            "type" : "string"
          },
          "maximumCsqSize" : {
            "description" : "Maximum number of messages that can exist in the client side queue for this JMS connection alias. A value of -1 indicates there is no limit.",
            "type" : "integer",
            "format" : "int32"
          },
          "csqDrainInOrder" : {
            "description" : "Whether Integration Server drains the client side queue by sending the messages to the JMS provider in the same order in which Integration Server placed the messages in the client side queue.",
            "type" : "boolean"
          },
          "createTemporaryQueue" : {
            "description" : "Whether Integration Server creates a temporary queue on the JMS provider to handle request-reply operations that do not specify a replyTo destination.",
            "type" : "boolean"
          },
          "enableRequestReplyListener" : {
            "description" : "Whether Integration Server creates a single dedicated MessageConsumer for receiving synchronous replies sent to the temporary queue for this JMS connection alias.",
            "type" : "boolean"
          },
          "manageDestinations" : {
            "description" : "Whether users can use Designer to modify Destinations on Broker or Universal Messaging",
            "type" : "boolean"
          },
          "createNewConnectionPerTrigger" : {
            "description" : "Whether Integration Server creates a separate connection to the JMS provider for each trigger.",
            "type" : "boolean"
          },
          "producerCachingMode" : {
            "description" : "Whether caching of JMS Session and MessageProducer objects is enabled for this JMS connection alias.",
            "type" : "string"
          },
          "minPoolSizePerUnspecifiedDestination" : {
            "description" : "The minimum number of entries (JMS Session objects) for the default session pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxPoolSizePerUnspecifiedDestination" : {
            "description" : "The maximum number of entries (JMS Session objects) for the default session pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "minPoolSizePerDestination" : {
            "description" : "The minimum number of entries (Message Producers) in each destination-specific pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxPoolSizePerDestination" : {
            "description" : "The maximum number of entries in each destination-specific pool. A value of 0 (or blank) indicates that Integration Server does not create separate pools for any of the destinations.",
            "type" : "integer",
            "format" : "int32"
          },
          "cacheProducersQueueList" : {
            "description" : "A semicolon-delimited list of the queues for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API. ",
            "type" : "string"
          },
          "destinationLookupNames" : {
            "description" : "A semicolon delimited list of the lookup names for the destinations for which Integration Server creates destination pools. This field applies only when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing value is JNDI_LOOKUP.",
            "type" : "string"
          },
          "cacheProducersTopicList" : {
            "description" : "A semicolon-delimited list of the topics for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "idleTimeout" : {
            "description" : "The number of milliseconds before an inactive pool entry will be removed from the pool. This setting applies to the default pool as well as each destination specific pool.\nA value of 0 indicates that pool entries never expire. A value of -1 indicates the system default will be used. The system default is defined by setting watt.server.jms.producer.pooledSession.timeout which has a default value of 60000 ms.",
            "type" : "integer",
            "format" : "int32"
          },
          "producerMaxRetryAttempts" : {
            "description" : "The maximum number of times Integration Server automatically retries a pub.jms:send service that fails because of a transient error. Set to 0 to disable automatic retry for implementations of the pub.jms:send service that use this JMS connection alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "producerRetryInterval" : {
            "description" : "The number of milliseconds that Integration Server waits between attempts to retry a pub.jms:send service that uses this JMS connection alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "loggingType" : {
            "description" : "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this JMS connection alias to send and/or receive messages.",
            "type" : "string"
          },
          "enableProducerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages when a message producer uses this JMS connection alias to send messages to a destination in producerIncludedStrings.",
            "type" : "boolean"
          },
          "producerIncludedStrings" : {
            "description" : "The destination names for which Integration Server performs additional logging when sending messages to the destination. Use a semicolon (;) to separate each destination name. A value of [ALL] indicates that Integration Server performs enhanced logging for every destination to which this JMS connection alias sends messages.",
            "type" : "string"
          },
          "enableConsumerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this JMS connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerMessageIncludedStrings",
            "type" : "boolean"
          },
          "consumerIncludedStrings" : {
            "description" : "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this JMS connection alias to receive messages.",
            "type" : "string"
          }
        }
      },
      "FtpPortPostIn" : {
        "type" : "object",
        "required" : [ "alias", "number", "packageName" ],
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean",
            "default" : false
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "pasvAddr" : {
            "description" : "Specifies the address that should be sent by the PORT command.",
            "type" : "string"
          }
        }
      },
      "WebSocketPortPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "Package with which this port is associated.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "IP address to which to bind this port. Use a bind address if your machine has multiple IP addresses and you want the port to use this specific address.",
            "type" : "string"
          },
          "backlog" : {
            "description" : "The number of requests that can remain in the queue for an enabled port before Integration Server begins rejecting requests.",
            "type" : "integer",
            "format" : "int32"
          },
          "minThread" : {
            "description" : "The minimum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "The maximum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "Priority with which the Java treats threads from this thread pool. The larger the number, the higher the priority.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
          },
          "idleTimeout" : {
            "description" : "When to close the WebSocket client connection if the server has not received a request from the client within this timeout value.",
            "type" : "integer",
            "format" : "int64"
          },
          "clientAuth" : {
            "description" : "The type of client authentication you want Integration Server to perform for requests that arrive on this WebSocket or WebSocketSecure port. Integration Server uses user name and password.",
            "type" : "string",
            "enum" : [ "basic" ]
          },
          "secure" : {
            "description" : "Whether this port uses TLS for secure communications. This must be set to true for a WebSocketSecure port",
            "type" : "boolean"
          },
          "keystoreAlias" : {
            "description" : "Name of the keystoreAlias used by the WebSocketSecure port where the keystore contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Name of the keyAlias within a keyStoreAlias used by the WebSocketSecure port.",
            "type" : "string"
          }
        }
      },
      "WebSocketPortPutIn" : {
        "type" : "object",
        "required" : [ "number", "packageName" ],
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "Package to which this port is assigned.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean",
            "default" : false
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "IP address to which to bind this port. Use a bind address if your machine has multiple IP addresses and you want the port to use this specific address.",
            "type" : "string"
          },
          "backlog" : {
            "description" : "The number of requests that can remain in the queue for an enabled port before Integration Server begins rejecting requests.",
            "type" : "integer",
            "format" : "int32",
            "default" : 6000
          },
          "minThread" : {
            "description" : "The minimum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "maxThread" : {
            "description" : "The maximum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 200
          },
          "threadPriority" : {
            "description" : "Priority with which the Java treats threads from this thread pool. The larger the number, the higher the priority.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
            "default" : 5
          },
          "idleTimeout" : {
            "description" : "When to close the WebSocket client connection if the server has not received a request from the client within this timeout value.",
            "type" : "integer",
            "format" : "int64",
            "default" : 300000
          },
          "clientAuth" : {
            "description" : "The type of client authentication you want Integration Server to perform for requests that arrive on this WebSocket or WebSocketSecure port. Integration Server uses user name and password.",
            "type" : "string",
            "enum" : [ "basic" ],
            "default" : "basic"
          },
          "secure" : {
            "description" : "Whether this port uses TLS for secure communications. This must be set to true for a WebSocketSecure port",
            "type" : "boolean",
            "default" : false
          },
          "keystoreAlias" : {
            "description" : "Name of the keystoreAlias used by the WebSocketSecure port where the keystore contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Name of the keyAlias within a keyStoreAlias used by the WebSocketSecure port.",
            "type" : "string"
          }
        }
      },
      "LdapConfigurationPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "description" : "The complete URL of the LDAP server. The URL has the format protocol ://hostname :portnumber",
            "type" : "string"
          },
          "principal" : {
            "description" : "The user ID  Integration Server supplies to connect to the LDAP server",
            "type" : "string"
          },
          "credential" : {
            "description" : "The password that Integration Server suppliees to connect to the LDAP server, that is, the Principal's password.",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Maximum number of seconds the Integration Server will wait while trying to connect to the LDAP server. After this time has passed, the Integration Server will try the\r\nnext configured LDAP server on the list.",
            "type" : "integer",
            "format" : "int32"
          },
          "poolMin" : {
            "description" : "Minimum number of connections allowed in\r\nthe pool that the Integration Server maintains for\r\nconnecting to the LDAP server.",
            "type" : "integer",
            "format" : "int32"
          },
          "poolMax" : {
            "description" : "Maximum number of connections allowed in\r\nthe pool that the Integration Server maintains for\r\nconnecting to the LDAP server.",
            "type" : "integer",
            "format" : "int32"
          },
          "useAffix" : {
            "description" : "Whether to build a distinguished name by adding a prefix and suffix to the user name. Specify true to build a distinguished name by adding a prefix and suffix to the user name. Specify false to build a query that searches a specified root directory\r\nfor the user.",
            "type" : "boolean"
          },
          "dnPrefix" : {
            "description" : "String that specifies the beginning of a DN to pass to the LDAP server.",
            "type" : "string"
          },
          "dnSuffix" : {
            "description" : "String that specifies the end of a DN to pass to the LDAP server.",
            "type" : "string"
          },
          "userID" : {
            "description" : "Identifies an LDAP userid, such as cn or uid.",
            "type" : "string"
          },
          "userRootDN" : {
            "description" : "Enter the full distinguished name. The Integration Server will issue a query that starts searching for users in the entered directory.",
            "type" : "string"
          },
          "userEmail" : {
            "description" : "Name of the attribute which contains the email address of the user in LDAP server.",
            "type" : "string"
          },
          "group" : {
            "description" : "Integration Server group with which the user is associated.",
            "type" : "string"
          },
          "memberAttribute" : {
            "description" : "Name of the attribute in a group's directory entry that identifies each member of the group.",
            "type" : "string"
          },
          "groupID" : {
            "description" : "LDAP group, such as CN.",
            "type" : "string"
          },
          "groupRootDN" : {
            "description" : "The full distinguished name of the location at which Integration Server is to start searching. Integration Server will issue a query that starts searching for group in the entered directory.",
            "type" : "string"
          },
          "priority" : {
            "description" : "Priority of this LDAP directory configuration in relation to other LDAP directory configurations.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IssuerCertMappingsData" : {
        "type" : "object",
        "properties" : {
          "truststoreAlias" : {
            "description" : "Truststore alias associated with the issuer.",
            "type" : "string"
          },
          "certificateAlias" : {
            "description" : "Certificate alias for the certificate associated with the truststore alias.",
            "type" : "string"
          }
        }
      },
      "CreateRuleIn" : {
        "type" : "object",
        "required" : [ "ruleName" ],
        "properties" : {
          "ruleName" : {
            "description" : "Enterprise Gateway rule name.",
            "type" : "string"
          },
          "ruleDescription" : {
            "description" : "Rule description.",
            "type" : "string"
          },
          "isRuleEnabled" : {
            "description" : "Whether rule is enabled or disabled.",
            "type" : "boolean",
            "enum" : [ false, true ],
            "default" : false
          },
          "requestType" : {
            "description" : "The rule will be applicable only for selected request types.",
            "type" : "string",
            "enum" : [ "ALL", "INVOKE", "REST", "SOAP" ],
            "default" : "ALL"
          },
          "resourcePath" : {
            "description" : "List of resources for which this rule will be applicable.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "customErrorMessage" : {
            "description" : "The custom error message to send to the clients, when the rule gets violated.",
            "type" : "string"
          },
          "action" : {
            "description" : "Action to be taken on rule violation.",
            "type" : "string",
            "enum" : [ "DENY", "ALERT" ],
            "default" : "DENY"
          },
          "filters" : {
            "$ref" : "#/components/schemas/FiltersInOut"
          }
        }
      },
      "JMSTriggerActionOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Descriptive success or failure message after performing an action on a JMS trigger.",
            "type" : "string"
          }
        }
      },
      "RemoteServers" : {
        "type" : "object",
        "properties" : {
          "remoteServers" : {
            "description" : "All remote server aliases.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/RemoteServerData"
              } ]
            }
          }
        }
      },
      "WebSocketPortPostIn" : {
        "type" : "object",
        "required" : [ "alias", "number", "packageName" ],
        "properties" : {
          "alias" : {
            "description" : "An unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean",
            "default" : false
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "IP address to which to bind this port. Use a bind address if your machine has multiple IP addresses and you want the port to use this specific address.",
            "type" : "string"
          },
          "backlog" : {
            "description" : "The number of requests that can remain in the queue for an enabled port before Integration Server begins rejecting requests.",
            "type" : "integer",
            "format" : "int32",
            "default" : 6000
          },
          "minThread" : {
            "description" : "The minimum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "maxThread" : {
            "description" : "The maximum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 200
          },
          "threadPriority" : {
            "description" : "Priority with which the Java treats threads from this thread pool. The larger the number, the higher the priority.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
            "default" : 5
          },
          "idleTimeout" : {
            "description" : "When to close the WebSocket client connection if the server has not received a request from the client within this timeout value.",
            "type" : "integer",
            "format" : "int64",
            "default" : 300000
          },
          "clientAuth" : {
            "description" : "The type of client authentication you want Integration Server to perform for requests that arrive on this WebSocket or WebSocketSecure port. Integration Server uses user name and password.",
            "type" : "string",
            "enum" : [ "basic" ],
            "default" : "basic"
          },
          "secure" : {
            "description" : "Whether this port uses TLS for secure communications. This must be set to true for a WebSocketSecure port",
            "type" : "boolean",
            "default" : false
          },
          "keystoreAlias" : {
            "description" : "Name of the keystoreAlias used by the WebSocketSecure port where the keystore contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Name of the keyAlias within a keyStoreAlias used by the WebSocketSecure port.",
            "type" : "string"
          }
        }
      },
      "WebSocketPortOut" : {
        "type" : "object",
        "required" : [ "alias", "number", "packageName" ],
        "properties" : {
          "ipAccess" : {
            "$ref" : "#/components/schemas/IPAccess"
          },
          "resourceAccess" : {
            "$ref" : "#/components/schemas/ResourceAccess"
          },
          "message" : {
            "description" : "Message regarding the requested operation.",
            "type" : "string"
          },
          "alias" : {
            "description" : "An unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean",
            "default" : false
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "IP address to which to bind this port. Use a bind address if your machine has multiple IP addresses and you want the port to use this specific address.",
            "type" : "string"
          },
          "backlog" : {
            "description" : "The number of requests that can remain in the queue for an enabled port before Integration Server begins rejecting requests.",
            "type" : "integer",
            "format" : "int32",
            "default" : 6000
          },
          "minThread" : {
            "description" : "The minimum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "maxThread" : {
            "description" : "The maximum number of threads Integration Server maintains in the thread pool for this port.",
            "type" : "integer",
            "format" : "int32",
            "default" : 200
          },
          "threadPriority" : {
            "description" : "Priority with which the Java treats threads from this thread pool. The larger the number, the higher the priority.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
            "default" : 5
          },
          "idleTimeout" : {
            "description" : "When to close the WebSocket client connection if the server has not received a request from the client within this timeout value.",
            "type" : "integer",
            "format" : "int64",
            "default" : 300000
          },
          "clientAuth" : {
            "description" : "The type of client authentication you want Integration Server to perform for requests that arrive on this WebSocket or WebSocketSecure port. Integration Server uses user name and password.",
            "type" : "string",
            "enum" : [ "basic" ],
            "default" : "basic"
          },
          "secure" : {
            "description" : "Whether this port uses TLS for secure communications. This must be set to true for a WebSocketSecure port",
            "type" : "boolean",
            "default" : false
          },
          "keystoreAlias" : {
            "description" : "Name of the keystoreAlias used by the WebSocketSecure port where the keystore contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Name of the keyAlias within a keyStoreAlias used by the WebSocketSecure port.",
            "type" : "string"
          }
        }
      },
      "GlobalVariableInOut" : {
        "type" : "object",
        "required" : [ "key" ],
        "properties" : {
          "key" : {
            "description" : "Name of the global variable.",
            "type" : "string"
          },
          "value" : {
            "description" : "Value of the global variable.",
            "type" : "string"
          },
          "secure" : {
            "description" : "Whether the global variable value is to be handled in a secure manner. If true, Integration Server encrypts the value and saves it as an outbound password.",
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "TimeDuration" : {
        "type" : "object",
        "properties" : {
          "duration" : {
            "description" : "Duration.",
            "type" : "integer",
            "format" : "int32"
          },
          "timeUnit" : {
            "description" : "Unit of time.",
            "type" : "string",
            "enum" : [ "Days", "Hours", "Minutes" ]
          }
        }
      },
      "CacheInUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "timeToIdleSeconds" : {
            "description" : "Seconds an unmodified and unaccessed element can remain in the cache. The default value of 0 indicates that the elements in this cache do not have a time-to-idle expiration.",
            "type" : "string"
          },
          "timeToLiveSeconds" : {
            "description" : "Seconds an element can remain in the cache. The default value of 0 indicates that the elements in this cache do not have a time-to-live expiration. ",
            "type" : "string"
          },
          "maxElementsInMemory" : {
            "description" : "Maximum number of elements the cache will hold in memory.",
            "type" : "string"
          },
          "maxEntriesLocalDisk" : {
            "description" : "Maximum number of elements the cache will hold in the local file system.",
            "type" : "string"
          },
          "logging" : {
            "description" : "Ehcache logging setting.",
            "type" : "boolean"
          },
          "clearOnFlush" : {
            "description" : "Ehcache clearOnFlush setting.",
            "type" : "boolean"
          },
          "copyOnRead" : {
            "description" : "Ehcache copyOnRead setting.",
            "type" : "boolean"
          },
          "copyOnWrite" : {
            "description" : "Ehcache copyOnWrite setting.",
            "type" : "boolean"
          },
          "overflowToDisk" : {
            "description" : "Whether cache uses the local file system when maxElementsInMemory is exceeded.",
            "type" : "boolean"
          },
          "overflowToOffHeap" : {
            "description" : "Whether cache uses off-heap memory when maxElementsInMemory is exceeded.",
            "type" : "boolean"
          },
          "maxMemoryOffHeap" : {
            "description" : "Maximum off-heap memory the cache will use.",
            "type" : "integer",
            "format" : "int64"
          },
          "memoryStoreEvictionPolicy" : {
            "description" : "Policy to determine which elements are evicted from cache.",
            "type" : "string",
            "enum" : [ "LRU", "LFU" ]
          },
          "diskExpiryThreadIntervalSeconds" : {
            "description" : "The interval between runs of the cache's expiry thread.",
            "type" : "integer",
            "format" : "int32"
          },
          "diskPersistent" : {
            "description" : "Whether to persist the cache to disk between JVM restarts.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "diskSpoolBufferSizeMB" : {
            "description" : "The amount of memory in megabytes to allocate for the write buffer to the disk.",
            "type" : "integer",
            "format" : "int64"
          },
          "eternal" : {
            "description" : "Whether the elements in the cache never expire.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "diskAccessStripes" : {
            "description" : "The number of disk access stripes",
            "type" : "string"
          },
          "cacheLoaderTimeoutMillis" : {
            "description" : "Timeout in milliseconds for cache loader related calls.",
            "type" : "integer",
            "format" : "int64"
          },
          "maxEntriesInCache" : {
            "description" : "Maximum number of entries to be held in the cache.",
            "type" : "integer",
            "format" : "int32"
          },
          "isInternal" : {
            "description" : "Whether cache is used internally by Integration Server. Care should be taken before modifying the configuration of an internal cache",
            "type" : "boolean"
          },
          "cacheManagerAlive" : {
            "description" : "Whether cache's cache manager is alive.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "terracottaConfiguration" : {
            "$ref" : "#/components/schemas/TerracottaConfig"
          }
        }
      },
      "JWTGlobalSettingsData" : {
        "type" : "object",
        "properties" : {
          "audience" : {
            "description" : "Audience value to use for this Integration Server. Specify a valid string or URI.",
            "type" : "string"
          },
          "maxGlobalSkew" : {
            "description" : "Maximum number of seconds by which the JWT issuer and Integration Server clocks can differ and still allow JWT expiry (exp) and not before (nbf) validations to succeed.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IPAccess" : {
        "type" : "object",
        "required" : [ "accessMode" ],
        "properties" : {
          "global" : {
            "description" : "Indicates that the IP access for a port is inherited from the global IP access settings. This field is present only when true.",
            "type" : "boolean",
            "default" : false
          },
          "accessMode" : {
            "description" : "The IP access mode is used to determine which hosts are permitted on the port. When you explicitly assign IP access settings to a port, those settings override the global settings for Integration Server. If you do not assign IP access settings to a port or delete the IP access settings for a port, the port uses the global settings. \"allowByDefault\" accepts all hosts except those in the denyList. \"denyByDefault\" rejects all hosts except those in the allowList.",
            "type" : "string",
            "enum" : [ "allowByDefault", "denyByDefault" ]
          },
          "allowList" : {
            "description" : "An allow list to specify hosts that are permitted to access this port when accessMode is \"denyByDefault\". The values in this list may be host names or IP addresses. Entries may be wildcarded such as \"*.some-company.com\" and \"123.45.6.*\".",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "denyList" : {
            "description" : "A deny list to specify hosts that are prohibited from accessing this port when accessMode is \"allowByDefault\". The values in this list may be host names or IP addresses. Host names may be wildcarded such as \"*.some-company.com\" and \"123.45.6.*\".",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "HttpsPort" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "diagnostic" : {
            "description" : "Indicates whether this port is the diagnostic port for Integration Server. Field is present only when true.",
            "type" : "boolean"
          },
          "protocol" : {
            "description" : "The protocol for the port.",
            "type" : "string",
            "enum" : [ "HTTPS" ]
          },
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos", "requestClientCertification", "requireClientCertification", "idProvider" ]
          },
          "backlog" : {
            "description" : "When the port receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32"
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "string"
          },
          "threadPool" : {
            "description" : "Indicates whether the port has its own pool of threads.",
            "type" : "boolean",
            "default" : false
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of the threads in the thread pool.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "threadsInUse" : {
            "description" : "If threadPool is true, the number of threads from the pool that are currently in use.",
            "type" : "integer",
            "format" : "int32"
          },
          "delay" : {
            "description" : "The number of milliseconds to delay before processing each request received on the port.",
            "type" : "integer",
            "format" : "int64"
          },
          "suspended" : {
            "description" : "Indicates whether the port is suspended. If false, the port is accepting requests.",
            "type" : "boolean"
          },
          "kerberos" : {
            "$ref" : "#/components/schemas/KerberosSettings"
          },
          "ipAccess" : {
            "$ref" : "#/components/schemas/IPAccess"
          },
          "resourceAccess" : {
            "$ref" : "#/components/schemas/ResourceAccess"
          },
          "message" : {
            "description" : "Information about the operation that just completed.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "idProvider" : {
            "description" : "The OpenID Provider to use to perform authentication for all requests sent to this port.",
            "type" : "string"
          },
          "jsseDisabledProtocols" : {
            "description" : "Specifies the list of disabled SSL and TLS protocol versions when Integration Server acts as SSL when the server is handling inbound requests.",
            "type" : "string"
          }
        }
      },
      "JDBCPoolAliasOut" : {
        "type" : "object",
        "properties" : {
          "poolAliases" : {
            "description" : "All JDBC connection pool aliases",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/JDBCPoolAlias"
              } ]
            }
          }
        }
      },
      "JMSConnectionAliasUpdate" : {
        "type" : "object",
        "required" : [ "description", "clientId", "connectionFactoryLookupName" ],
        "properties" : {
          "description" : {
            "description" : "A description of the JMS connection alias.",
            "type" : "string"
          },
          "transactionType" : {
            "description" : "The type of transaction for sessions that use this JMS connection alias. ",
            "type" : "string",
            "enum" : [ "NO_TRANSACTION", "LOCAL_TRANSACTION", "XA_TRANSACTION" ],
            "default" : "NO_TRANSACTION"
          },
          "clientId" : {
            "description" : "The JMS client identifier associated with the connections established by this JMS connection alias. The clientId must be specified when createConnectionUsing is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name required to acquire a connection from the connection factory.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password required to acquire a connection from the connection factory.",
            "type" : "string"
          },
          "createConnectionUsing" : {
            "description" : "How administered objects (connection factories and destinations) will be looked up.",
            "type" : "string",
            "enum" : [ "JNDI_LOOKUP", "NATIVE_WEBMETHODS_API" ],
            "default" : "JNDI_LOOKUP"
          },
          "jndiAliasName" : {
            "description" : "Alias to the JNDI provider that the JMS connection alias uses to look up administered objects. This field applies only when the createConnectionUsing value is JNDI_LOOKUP.",
            "type" : "string"
          },
          "connectionFactoryLookupName" : {
            "description" : "Lookup name for the connection factory that you want to use to create a connection to the JMS provider specified in this JMS connection alias. This field applies only when the createConnectionUsing value is JNDI_LOOKUP.",
            "type" : "string"
          },
          "createAdministeredObjectsOnDemand" : {
            "description" : "Whether Integration Server creates a connection factory or destination on the JNDI provider if the object is not found at the time Integration Server looks up the object. This field applies only when the JMS provider is Universal Messaging.",
            "type" : "boolean"
          },
          "enableFollowTheMaster" : {
            "description" : "Whether Integration Server always connects to the master realm server in the Universal Messaging cluster. This setting affects producer and consumer connections created using this JMS connection alias.",
            "type" : "boolean",
            "default" : true
          },
          "monitorWmConnectionFactory" : {
            "description" : "How Integration Server monitors the webMethods connection factory object on the JNDI server for changes where NONE means no monitoring is done, CLIENT_POLL corresponds to specifying an interval for poll changes (connectionFactoryPollInterval) , JNDI_POLL corresponds to polling for changes with an interval defined by webMethods Connection Factory , and LISTENER corresponds to monitoring the connection factory by registering an event listener. This field applies only when Universal Messaging is the JMS provider.",
            "type" : "string",
            "enum" : [ "NONE", "CLIENT_POLL", "JNDI_POLL", "LISTENER" ],
            "default" : "NONE"
          },
          "connectionFactoryPollingInterval" : {
            "description" : "Number of minutes between polling attempts. The polling interval must be a positive integer. This field is required when monitorWmConnectionFactory is set to CLIENT_POLL. This field applies only when the JMS provider is Univesal Messaging.",
            "type" : "integer",
            "format" : "int32",
            "default" : 60
          },
          "brokerHost" : {
            "description" : "Name (DNSname:port or ipaddress:port) of the machine on which the Broker Server acting as the JMS provider resides. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "default" : "localhost:6849"
          },
          "brokerName" : {
            "description" : "Name of the Broker as defined on the Broker Server. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "default" : "Broker #1"
          },
          "clientGroup" : {
            "description" : "Name of the client group to which you want Integration Server to belong when it acts as a JMS client. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "default" : "IS-JMS"
          },
          "brokerList" : {
            "description" : "Comma-delimited list of Broker Servers on which the connection between the Integration Server (acting as the JMS client) and the webMethods Broker can exist. Use the following format: {Broker Name]@<host>[:port]. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "keystore" : {
            "description" : "Full path to this Integration Server's keystore file. The keystore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "keystoreType" : {
            "description" : "File type of the Integration Server's keystore file. The keystoreType is required only when configuring an SSL connection to the Broker This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "enum" : [ "PKCS12", "JKS" ]
          },
          "truststore" : {
            "description" : "The full path to this Integration Server client's trust store file. The trustore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "trustoreType" : {
            "description" : "The file type of the Integration Server's trust store file, which is JKS. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "default" : "JKS"
          },
          "encrypted" : {
            "description" : "Whether the connection between the Integration Server and the Broker is encrypted. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "boolean"
          },
          "classLoader" : {
            "description" : "Name of the class loader used with this JMS connection alias.",
            "type" : "string",
            "default" : "INTEGRATION_SERVER"
          },
          "maximumCsqSize" : {
            "description" : "Maximum number of messages that can exist in the client side queue for this JMS connection alias. A value of -1 indicates there is no limit.",
            "type" : "integer",
            "format" : "int32",
            "default" : -1
          },
          "csqDrainInOrder" : {
            "description" : "Whether Integration Server drains the client side queue by sending the messages to the JMS provider in the same order in which Integration Server placed the messages in the client side queue.",
            "type" : "boolean",
            "default" : true
          },
          "createTemporaryQueue" : {
            "description" : "Whether Integration Server creates a temporary queue on the JMS provider to handle request-reply operations that do not specify a replyTo destination.",
            "type" : "boolean",
            "default" : true
          },
          "enableRequestReplyListener" : {
            "description" : "Whether or not Integration Server creates a single dedicated MessageConsumer for receiving synchronous replies sent to the temporary queue for this JMS connection alias.",
            "type" : "boolean",
            "default" : false
          },
          "manageDestinations" : {
            "description" : "Whether users can use Designer to modify Destinations on Broker or Universal Messaging",
            "type" : "boolean",
            "default" : true
          },
          "createNewConnectionPerTrigger" : {
            "description" : "Whether Integration Server creates a separate connection to the JMS provider for each trigger.",
            "type" : "boolean",
            "default" : false
          },
          "producerCachingMode" : {
            "description" : "Whether caching of JMS Session and MessageProducer objects is enabled for this JMS connection alias.",
            "type" : "string",
            "enum" : [ "DISABLED", "ENABLED_PER_DESTINATION" ],
            "default" : "DISABLED"
          },
          "minPoolSizePerUnspecifiedDestination" : {
            "description" : "The minimum number of entries (JMS Session objects) for the default session pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxPoolSizePerUnspecifiedDestination" : {
            "description" : "The maximum number of entries (JMS Session objects) for the default session pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "minPoolSizePerDestination" : {
            "description" : "The minimum number of entries (Message Producers) in each destination-specific pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxPoolSizePerDestination" : {
            "description" : "The maximum number of entries in each destination-specific pool. A value of 0 (or blank) indicates that Integration Server does not create separate pools for any of the destinations.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "cacheProducersQueueList" : {
            "description" : "A semicolon-delimited list of the queues for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API. ",
            "type" : "string"
          },
          "destinationLookupNames" : {
            "description" : "A semicolon delimited list of the lookup names for the destinations for which Integration Server creates destination pools. This field applies only when producerCachingMode is set to ENABLED_PER_DESTINATION andcreateConnectionUsing value is JNDI_LOOKUP. ",
            "type" : "string"
          },
          "cacheProducersTopicList" : {
            "description" : "A semicolon-delimited list of the topics for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "idleTimeout" : {
            "description" : "The number of milliseconds before an inactive pool entry will be removed from the pool. This setting applies to the default pool as well as each destination specific pool. A value of 0 indicates that pool entries never expire. A value of -1 indicates the system default will be used. The system default is defined by setting watt.server.jms.producer.pooledSession.timeout which has a default value of 60000 ms.",
            "type" : "integer",
            "format" : "int32"
          },
          "producerMaxRetryAttempts" : {
            "description" : "The maximum number of times Integration Server automatically retries a pub.jms:send service that fails because of a transient error. Set to 0 to disable automatic retry for implementations of the pub.jms:send service that use this JMS connection alias.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "producerRetryInterval" : {
            "description" : "The number of milliseconds that Integration Server waits between attempts to retry a pub.jms:send service that uses this JMS connection alias.",
            "type" : "integer",
            "format" : "int32",
            "default" : 1000
          },
          "loggingType" : {
            "description" : "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this JMS connection alias to send and/or receive messages.",
            "type" : "string",
            "enum" : [ "SERVER_LOG", "MESSAGING_AUDIT_LOG" ]
          },
          "enableProducerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages when a message producer uses this JMS connection alias to send messages to a destination in producerIncludedStrings.",
            "type" : "boolean"
          },
          "producerIncludedStrings" : {
            "description" : "The destination names for which Integration Server performs additional logging when sending messages to the destination. Use a semicolon (;) to separate each destination name. A value of [ALL] indicates that Integration Server performs enhanced logging for every destination to which this JMS connection alias sends messages.",
            "type" : "string",
            "default" : "[ALL]"
          },
          "enableConsumerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this JMS connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerMessageIncludedStrings",
            "type" : "boolean"
          },
          "consumerIncludedStrings" : {
            "description" : "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this JMS connection alias to receive messages.",
            "type" : "string",
            "default" : "[ALL]"
          }
        }
      },
      "EGExternalPort" : {
        "type" : "object",
        "properties" : {
          "backlog" : {
            "description" : "When the port receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32"
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "integer",
            "format" : "int64"
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean"
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the thread pool for the port.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of the threads in the thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "kerberosSettings" : {
            "$ref" : "#/components/schemas/KerberosSettings"
          },
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "protocol" : {
            "description" : "The protocol for the port. ",
            "type" : "string",
            "enum" : [ "HTTP", "HTTPS" ]
          },
          "enabled" : {
            "description" : "Whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          }
        }
      },
      "PackagePatchList" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the patch release.",
            "type" : "string"
          },
          "version" : {
            "description" : "Version of the patch release.",
            "type" : "string"
          },
          "build" : {
            "description" : "Build number of the patch release.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the patch release.",
            "type" : "string"
          },
          "time" : {
            "description" : "Time of the patch release.",
            "type" : "string"
          },
          "jvm_version" : {
            "description" : "Minimum version of the JVM required to run this patch.",
            "type" : "string"
          },
          "publisher" : {
            "description" : "Publisher of the patch release.",
            "type" : "string"
          },
          "patch_nums" : {
            "description" : "A list of patches that have been applied to this release of the package, if this information was provided by the package publisher.",
            "type" : "string"
          }
        }
      },
      "GrpcProviderDescriptorServiceListOut" : {
        "type" : "object",
        "properties" : {
          "serviceName" : {
            "description" : "Name of the Grpc provider descriptor service.",
            "type" : "string"
          },
          "fullSvcName" : {
            "description" : "Full name of the Grpc provider descriptor service.",
            "type" : "string"
          },
          "javaPackage" : {
            "description" : "Java package name where service is located.",
            "type" : "boolean"
          },
          "protoPackage" : {
            "description" : "Proto package name.",
            "type" : "string"
          },
          "methodMap" : {
            "description" : "Method mapping of the service list",
            "type" : "object"
          }
        }
      },
      "GrpcChannelOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the Grpc channel.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the Grpc channel.",
            "type" : "string"
          },
          "port" : {
            "description" : "Port Number used by Grpc channel.",
            "type" : "integer",
            "format" : "int32"
          },
          "isDefault" : {
            "description" : "Indicates if the channel is default.",
            "type" : "boolean"
          },
          "packageName" : {
            "description" : "Package name of the Grpc channel.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates if the channel is enabled.",
            "type" : "boolean"
          },
          "services" : {
            "description" : "All Grpc services in the channel",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GrpcChannelServiceOut"
            }
          }
        }
      },
      "JDBCPoolAliasUpdateOut" : {
        "type" : "object",
        "required" : [ "message", "name" ],
        "properties" : {
          "message" : {
            "description" : "Success message. Shows the action need to be taken to make the updated settings take effect.",
            "type" : "string"
          },
          "name" : {
            "description" : "Alias name for JDBC connection pool.",
            "type" : "string"
          },
          "minConnections" : {
            "description" : "Minimum number of connections the pool must keep open at all times.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "maxConnections" : {
            "description" : "Maximum number of connections the pool can have open at one time.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "idleMilliseconds" : {
            "description" : "Number of milliseconds the pool can keep an unused connection open.",
            "type" : "integer",
            "format" : "int32",
            "default" : 60000
          },
          "url" : {
            "description" : "URL for the database server.",
            "type" : "string"
          },
          "uid" : {
            "description" : "Database user for Integration Server to use to connect to the database.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for Integration Server to use to connect to the database.",
            "type" : "string"
          },
          "driver" : {
            "description" : "Database driver alias for Integration Server to use to connect to the pool.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JDBC connection pool.",
            "type" : "string"
          },
          "spyParms" : {
            "description" : "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Spy diagnostic feature. This parameter also defines DataDirect Spy attributes.",
            "type" : "string",
            "default" : "SpyAttributes=(log=(file)logs/spy/<alias_name>.log;logTName=yes;timestamp=yes)"
          },
          "snoopParms" : {
            "description" : "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Snoop tool. This parameter also defines DataDirect Snoop tool attributes.",
            "type" : "string",
            "default" : "ddtdbg.ProtocolTraceEnable=true;ddtdbg.ProtocolTraceMaxline=16;ddtdbg.ProtocolTraceLocation=logs/snoop/<alias_name>.log;ddtdbg.ProtocolTraceShowTime=true"
          },
          "spyEnabled" : {
            "description" : "Whether the DataDirect Spy diagnostic feature for DataDirect Connect JDBC drivers is enabled.",
            "type" : "boolean",
            "default" : false
          },
          "snoopEnabled" : {
            "description" : "Whether the DataDirect Snoop tool for DataDirect Connect JDBC drivers is enabled. ",
            "type" : "boolean",
            "default" : false
          },
          "poolThresholdPercentage" : {
            "description" : "Number of connections, expressed as a percentage of maxcon, that should be available in the pool at all times.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "waitingThread" : {
            "description" : "Maximum number of requests for connection that can be waiting at one time.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "defaultSpyParms" : {
            "description" : "Default spy parameters.",
            "type" : "string",
            "default" : "false"
          },
          "defaultSnoopParms" : {
            "description" : "Default snoop parameters.",
            "type" : "string",
            "default" : "false"
          }
        }
      },
      "HealthGaugeUpdateOut" : {
        "type" : "object",
        "required" : [ "updatedProperties" ],
        "properties" : {
          "updatedProperties" : {
            "description" : "Updated properties for the indicator.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HealthIndicatorProperty"
            }
          },
          "message" : {
            "description" : "Success message for the result of the health indicator update.",
            "type" : "string"
          }
        }
      },
      "AuditLoggerOut" : {
        "type" : "object",
        "properties" : {
          "auditLoggers" : {
            "description" : "All audit loggers.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/AuditLoggerData"
              } ]
            }
          }
        }
      },
      "FtpsPort" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "protocol" : {
            "description" : "The protocol for the port.",
            "type" : "string",
            "enum" : [ "FTPS" ]
          },
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "pasvAddr" : {
            "description" : "Specifies the address that should be sent by the PORT command.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "requestClientCertification", "requireClientCertification" ]
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "ipAccess" : {
            "$ref" : "#/components/schemas/IPAccess"
          },
          "resourceAccess" : {
            "$ref" : "#/components/schemas/ResourceAccess"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "secureClients" : {
            "description" : "Prevents the FTPS listener from operating with non-secure clients..",
            "type" : "boolean",
            "default" : true
          },
          "message" : {
            "description" : "Information about the operation that just completed.",
            "type" : "string"
          }
        }
      },
      "JMSRoutingRuleOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the JMS trigger routing rule.",
            "type" : "string"
          },
          "localFilter" : {
            "description" : "Filter that Integration server applie to the JMS message body.",
            "type" : "string"
          },
          "service" : {
            "description" : "The service associated with the routing rule.",
            "type" : "string"
          }
        }
      },
      "NonStopConfiguration" : {
        "type" : "object",
        "properties" : {
          "timeoutBehaviorType" : {
            "description" : "How the cache responds to timeouts in the cluster.",
            "type" : "string",
            "enum" : [ "exception", "localReads", "noop", "custom" ],
            "default" : "exception"
          },
          "enabled" : {
            "description" : "Whether the non-stop configuration enabled for the cache. ",
            "type" : "string"
          },
          "immediateTimeout" : {
            "description" : "Whether to time out immediately if unable to connect to the cluster.",
            "type" : "boolean"
          },
          "timeoutMillis" : {
            "description" : "How long to try to connect to the cluster before a timeout occurs.",
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "TradingNetworks" : {
        "type" : "object",
        "properties" : {
          "productCode" : {
            "description" : "Trading Networks product code.",
            "type" : "string"
          },
          "maxPartners" : {
            "description" : "Maximum number of allowed partners for Trading Networks.",
            "type" : "string"
          }
        }
      },
      "MessagingTriggers" : {
        "type" : "object",
        "properties" : {
          "triggers" : {
            "description" : "All webMethods triggers.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/MessagingTriggerOut"
              } ]
            }
          }
        }
      },
      "AuditLoggerEntryOut" : {
        "type" : "object",
        "properties" : {
          "logEntries" : {
            "description" : "Audit logger display lines.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/AuditLogRec"
              }, {
                "$ref" : "#/components/schemas/ServerLogDataOut"
              } ]
            }
          }
        }
      },
      "EmailNotificationOut" : {
        "type" : "object",
        "properties" : {
          "smtpServer" : {
            "description" : "Address of the Simple Mail Transfer Protocol (SMTP) server through which Integration Server issues email messages.",
            "type" : "string"
          },
          "port" : {
            "description" : "Port that Integration Server connects to on the specified SMTP server.",
            "type" : "string"
          },
          "tlsSettings" : {
            "description" : "Type of SSL encryption that Integration Server uses when communicating with the specified SMTP server port.",
            "type" : "string"
          },
          "trustStoreAlias" : {
            "description" : "Alias for the truststore that contains the list of certificates that Integration Server uses to validate the trust relationship between Integration Server and the SMTP server. ",
            "type" : "string"
          },
          "internalEmail" : {
            "description" : "Email address to which Integration Server sends a message when an internal server error occurs or a critical log entry is written. ",
            "type" : "string"
          },
          "serviceEmail" : {
            "description" : "Email address to which Integration Server sends a message when a service failure occurs.",
            "type" : "string"
          },
          "defaultEmailCharset" : {
            "description" : "The character set Integration Server uses for the emails that it sends.",
            "type" : "string"
          },
          "username" : {
            "description" : "The email address of the account that Integration Server uses to connect to the SMTP server.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password for the account that Integration Server uses to connect to the SMTP server.",
            "type" : "string"
          }
        }
      },
      "CacheManagers" : {
        "type" : "object",
        "properties" : {
          "cacheManagers" : {
            "description" : "All cache managers.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/CacheManagerOut"
              } ]
            }
          }
        }
      },
      "ResourceAccess" : {
        "type" : "object",
        "required" : [ "accessMode" ],
        "properties" : {
          "accessMode" : {
            "description" : "The access mode is used to determine which folder and services may be accessed through the port. \"allowByDefault\" allows access to all resources except those in the denyList. \"denyByDefault\" prevents access to all resources except those in the allowList. If you do not assign access settings to a port or delete the access settings for a port, the port uses the the default access settings, which has an accessMode of \"denyByDefault\" and a few core services in the allowList.",
            "type" : "string",
            "enum" : [ "allowByDefault", "denyByDefault" ]
          },
          "allowList" : {
            "description" : "An allow list to specify which folders and services can be accessed through this port when accessMode is \"denyByDefault\".",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "denyList" : {
            "description" : "A deny list to specify which folders and services cannot be accessed through this port when accessMode is \"allowByDefault\".",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GrpcProviderDescriptorOut" : {
        "type" : "object",
        "properties" : {
          "node_nsName" : {
            "description" : "Name of the Grpc provider descriptor.",
            "type" : "string"
          },
          "node_pkg" : {
            "description" : "Description of the Grpc provider descriptor package.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates if the Grpc provider descriptor is enabled.",
            "type" : "boolean"
          },
          "channelName" : {
            "description" : "Channel name belongs to Grpc provider descriptor",
            "type" : "string"
          },
          "serviceList" : {
            "description" : "Service list of the Grpc Provider Descriptor",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GrpcProviderDescriptorServiceListOut"
            }
          }
        }
      },
      "FtpsPortList" : {
        "type" : "object",
        "properties" : {
          "ports" : {
            "description" : "The list of FTPS ports.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/FtpPortLink"
              }, {
                "$ref" : "#/components/schemas/FtpsPort"
              } ]
            }
          }
        }
      },
      "LdapConfiguration" : {
        "type" : "object",
        "properties" : {
          "index" : {
            "description" : "Index of the LDAP Configuration.",
            "type" : "integer",
            "format" : "int32"
          },
          "priority" : {
            "description" : "Priority of the LDAP directory configuration in relation to other LDAP directory configurations. Priority determines the order in which Integraation Server will search LDAP directories.",
            "type" : "integer",
            "format" : "int32"
          },
          "url" : {
            "description" : "Complete URL of the LDAP server. The URL has the format protocol://hostname:portnumber",
            "type" : "string"
          },
          "principal" : {
            "description" : "The user ID the Integration Server supplies to connect to the LDAP server.",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Maximum number of seconds Integration Server waits while trying to connect to the LDAP server. After this time has passed, the Integration Server will try the\r\nnext configured LDAP server on the list.",
            "type" : "integer",
            "format" : "int32"
          },
          "poolMin" : {
            "description" : "Minimum number of connections allowed in\r\nthe pool that Integration Server maintains for\r\nconnecting to the LDAP server.",
            "type" : "integer",
            "format" : "int32"
          },
          "poolMax" : {
            "description" : "Maximum number of connections allowed in\r\nthe pool that Integration Server maintains for\r\nconnecting to the LDAP server.",
            "type" : "integer",
            "format" : "int32"
          },
          "useAffix" : {
            "description" : "When set to true, Integration Server builds a distinguished name by adding a prefix and suffix to the user name. When set to false, Integration Server builds a query that searches a specified root directory\r\nfor the user.",
            "type" : "boolean"
          },
          "dnPrefix" : {
            "description" : "String that specifies the beginning of a DN to pass to the LDAP server.",
            "type" : "string"
          },
          "dnSuffix" : {
            "description" : "String that specifies the end of a DN to pass to the LDAP server.",
            "type" : "string"
          },
          "userID" : {
            "description" : "Identifies an LDAP userid, such as cn or uid.",
            "type" : "string"
          },
          "userRootDN" : {
            "description" : "The full distinguished name of the location at which you want to start searching. The Integration Server will issue a query that starts searching for users in the entered directory.",
            "type" : "string"
          },
          "userEmail" : {
            "description" : "Name of the attribute which contains the email address of the user in the LDAP server.",
            "type" : "string"
          },
          "group" : {
            "description" : "Integration Server group with which the user is associated.",
            "type" : "string"
          },
          "memberAttribute" : {
            "description" : "Name of the attribute in a group's directory entry that identifies each member of the group.",
            "type" : "string"
          },
          "groupID" : {
            "description" : "An LDAP group attribute, such as CN.",
            "type" : "string"
          },
          "groupRootDN" : {
            "description" : "The full distinguished name of the location at which Integration Server is to start searching. Integration Server will issue a query that starts searching for the group in the entered location.",
            "type" : "string"
          }
        }
      },
      "MQTTConnectionAliasOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the MQTT connection alias.",
            "type" : "string"
          },
          "type" : {
            "description" : "Type of common messaging provider. Currently, Integration Server supports MQTT version 3.1.1 only which is returned as MQTT3.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the MQTT connection alias.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Package in which the MQTT connection alias information is stored.",
            "type" : "string"
          },
          "clientId" : {
            "description" : "Connection client ID of the MQTT connection alias.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether or not the MQTT connection alias is enabled. ",
            "type" : "boolean"
          },
          "lastError" : {
            "description" : "The most recent error related to the MQTT connection alias.",
            "type" : "string"
          },
          "hasTriggers" : {
            "description" : "Whether any MQTT triggers currenntly use this alias.",
            "type" : "boolean"
          },
          "status" : {
            "description" : "The status of the MQTT connection which can be \"Running\", \"Starting\", or \"Not Running\".",
            "type" : "string"
          },
          "host" : {
            "description" : "URL containing the protocol, domain, and port of the MQTT server to which connections created using the MQTT connection alias will connect.",
            "type" : "string"
          },
          "cleanSessionEnabled" : {
            "description" : "Indicates if clean sessions are used for subscriptions.",
            "type" : "boolean"
          },
          "timeout" : {
            "description" : "Maximum number of seconds that Integration Server waits for a network connection to the MQTT server to be established.",
            "type" : "string"
          },
          "keepAlive" : {
            "description" : "Maximum number of seconds that can elapse between messages being sent to or received from the MQTT server using a connection created for this MQTT connection alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "willEnabled" : {
            "description" : "Whether the MQTT server sends a last will message on behalf of Integration Server if Integration Server disconnects abruptly from the MQTT server.",
            "type" : "boolean"
          },
          "willQos" : {
            "description" : "Quality of Service for the last will message. Inputting '0' will create an \"At most once\" QoS. Inputting '1' will create an \"At least once\" QoS. Inputting '2' will create an \"Exactly once\" QoS.",
            "type" : "integer",
            "format" : "int32"
          },
          "willRetain" : {
            "description" : "Whether the MQTT server retains the last will message. ",
            "type" : "boolean"
          },
          "willTopic" : {
            "description" : "Topic to which the last will message is published. All subscribers to this topic will receive the last will message",
            "type" : "string"
          },
          "willPayload" : {
            "description" : "Contents of the last will message.",
            "type" : "string"
          },
          "willOnConnectPayload" : {
            "description" : "Message to send upon successful connection to the MQTT server.",
            "type" : "string"
          },
          "willOnDisconnectPayload" : {
            "description" : "Message to send upon disconnecting from the MQTT server.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name for client authentication.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for client authentication. Password will be masked.",
            "type" : "string"
          },
          "useSSL" : {
            "description" : "Whether SSL is used to connect to the MQTT server.",
            "type" : "boolean"
          },
          "truststoreAlias" : {
            "description" : "Truststore alias to be used if SSL is enabled.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "Keystore alias to be used if SSL is enabled.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Key alias associated with the keystore.",
            "type" : "string"
          },
          "clientIdPrefix" : {
            "description" : "Prefix set by Integration Server that is added to the beginning of a user-specified clientId.",
            "type" : "string"
          }
        }
      },
      "Token" : {
        "type" : "object",
        "properties" : {
          "client_id" : {
            "description" : "The ID of the client the token is issued for.",
            "type" : "string"
          },
          "scopes" : {
            "description" : "The scopes associated with the client the token is issued for.",
            "type" : "string"
          },
          "ownerId" : {
            "description" : "The resource owner using the client application.",
            "type" : "string"
          },
          "grantType" : {
            "description" : "",
            "type" : "string"
          },
          "tokenType" : {
            "description" : "",
            "type" : "string"
          },
          "accessTokenId" : {
            "description" : "Specifies the ID of the access token issued for the client application",
            "type" : "string"
          },
          "refreshTokenId" : {
            "description" : "The ID of the refresh token issued for the client application.",
            "type" : "string"
          },
          "remainingRefreshes" : {
            "description" : "Specifies the number of times the access token can be refreshed before it expires.",
            "type" : "string"
          },
          "createdTime" : {
            "description" : "The time the token was issued.",
            "type" : "string"
          },
          "lastRefreshedTime" : {
            "description" : "The last time the token was refreshed.",
            "type" : "string"
          },
          "expireTime" : {
            "description" : "The expiration time of the token.",
            "type" : "string"
          },
          "clientName" : {
            "description" : "The name of the client the token is issued for.",
            "type" : "string"
          },
          "clientVersion" : {
            "description" : "The version of the client for which OAuth issued the token.",
            "type" : "string"
          }
        }
      },
      "RestartStatus" : {
        "type" : "object",
        "properties" : {
          "restartNeeded" : {
            "description" : "Whether restart is needed.",
            "type" : "boolean"
          },
          "restartReasons" : {
            "description" : "Reasons why restart is needed.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Users" : {
        "type" : "object",
        "properties" : {
          "users" : {
            "description" : "All user accounts.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/UserOut"
              } ]
            }
          }
        }
      },
      "CacheManagerIn" : {
        "type" : "object",
        "required" : [ "cacheManagerName" ],
        "properties" : {
          "cacheManagerName" : {
            "description" : "Name of the cache manager.",
            "type" : "string"
          },
          "tsaURL" : {
            "description" : "Comma-separated list of the URLs for each server in a Terracotta Server Array. ",
            "type" : "string"
          },
          "rejoin" : {
            "description" : "Whether to automatically rejoin a Terracotta Server Array if disconnected.",
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "MessagingTriggerActionOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Descriptive success or failure message of performing an action on a webMethods messaging trigger.",
            "type" : "string"
          }
        }
      },
      "ProxyServerData" : {
        "type" : "object",
        "required" : [ "proxyAlias", "host", "port", "protocol" ],
        "properties" : {
          "proxyAlias" : {
            "description" : "Name of the alias.",
            "type" : "string"
          },
          "host" : {
            "description" : "Host Name or IP address of the proxy server. ",
            "type" : "string"
          },
          "port" : {
            "description" : "Port number of the proxy server. ",
            "type" : "integer",
            "format" : "int32"
          },
          "username" : {
            "description" : "User name Integration Server must use to access the proxy server. ",
            "type" : "string"
          },
          "password" : {
            "description" : "Password Integration Server must use to access the proxy server. ",
            "type" : "string"
          },
          "isDefault" : {
            "description" : "Whether the proxy server alias is the default proxy server alias for a particular protocol. ",
            "type" : "boolean",
            "default" : false
          },
          "protocol" : {
            "description" : "Protocol for communicating with the proxy server. Supported protocols are: HTTP, HTTPS, FTP, or SOCKS. ",
            "type" : "string",
            "enum" : [ "HTTP", "HTTPS", "FTP", "SOCKS" ]
          },
          "ftpType" : {
            "description" : "If FTP is used, specifies the type of command Integration Server must use to issue an outbound request to the FTP proxy server. Valid values are 0-7 where the values are mapped as follows: 0:No proxy, 1:ftp_user@ftp_host no proxy auth, 2:ftp_user@ftp_host proxy auth, 3:site command, 4:open command, 5:ftp_user@proxy_user@ftp_host, 6:proxy_user@ftp_host, 7:ftp_user@ftp_host proxy_user",
            "type" : "integer",
            "format" : "int32"
          },
          "socksVersion" : {
            "description" : "If SOCKS is used, specifies the version of SOCKS protocol Integration Server will use to connect to the proxy server. Valid values are 4 and 5 where the values are mapped as follows:  4:SOCKS v4, 5:SOCKS v5",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EmailPortOut" : {
        "type" : "object",
        "required" : [ "alias", "packageName", "host", "user", "interval" ],
        "properties" : {
          "message" : {
            "description" : "Message regarding the requested operation.",
            "type" : "string"
          },
          "alias" : {
            "description" : "An alias for the port that is unique for this Integration Server.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Package with which this port is associated.",
            "type" : "string"
          },
          "host" : {
            "description" : "Name of the machine on which the IMAP or POP3 mail server is running.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name that Integration Server must use to log on to the mail server.",
            "type" : "string"
          },
          "interval" : {
            "description" : "Frequency, in seconds, with which Integration Server checks the mail server for incoming email messages.",
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "type" : {
            "description" : "The type of mail server from which the email port will receive requests. Specify IMAP or POP3.",
            "type" : "string",
            "enum" : [ "IMAP", "POP3", "imap", "pop3" ],
            "default" : "IMAP"
          },
          "serverPort" : {
            "description" : "The port on which the mail server listens for requests.",
            "type" : "integer",
            "format" : "int32"
          },
          "authentication" : {
            "description" : "The type of authentication that Integration Server should use to connect to the specified e-mail server. Select Basic Authentication or OAuth",
            "type" : "string",
            "enum" : [ "Basic", "OAuth" ],
            "default" : "Basic"
          },
          "password" : {
            "description" : "The password the user name used to log on to the mail server.This field applies only to Basic Authentication.",
            "type" : "string"
          },
          "authURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request authorization code.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientID" : {
            "description" : "The unique public identifier that the OAuth server generates for Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The unique string that the OAuth server provides to Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "scope" : {
            "description" : "The e-mail server access permissions configured for Integration Server during registration. You can specify multiple scopes separated by a space.This field applies only to OAuth.",
            "type" : "string"
          },
          "accessTokenURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request an access token from the OAuth server.This field applies only to OAuth.",
            "type" : "string"
          },
          "redirectURL" : {
            "description" : "The URL that the OAuth server must use to send authentication responses to Integration Server.This field applies only to OAuth.",
            "type" : "string"
          },
          "tlsSettings" : {
            "description" : "The type of SSL encryption that Integration Server uses when communicating with an email server. You can configure the port to use None , Explicit, or Implicit.",
            "type" : "string",
            "enum" : [ "None", "Explicit", "Implicit" ],
            "default" : "None"
          },
          "trustStore" : {
            "description" : "Alias for the truststore that contains certificates presented by the email server to Integration Server.",
            "type" : "string"
          },
          "logout" : {
            "description" : "For use with IMAP and multi-threading only. Whether you want your server to log out after checking for mail.",
            "type" : "boolean",
            "default" : false
          },
          "runAsUser" : {
            "description" : "The user name under which requested services are to run.",
            "type" : "string"
          },
          "authenticateWithMessage" : {
            "description" : "When set to true, Integration Server checks for $user and $pass parameters in the Subject line of the email. The user name is the user under which the service is to run on Integration Server. When set to false, specify the user in the runAsUser field.",
            "type" : "boolean",
            "default" : true
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean",
            "default" : true
          },
          "globalService" : {
            "description" : "The service that you want Integration Server to execute for every email request.",
            "type" : "string"
          },
          "defaultService" : {
            "description" : "The service that you want Integration Server to execute if the email message does not supply a valid service in the subject line and the globalService field is blank.",
            "type" : "string"
          },
          "reply" : {
            "description" : "Whether you want Integration Server to send any output that the service generates to the original sender in an email attachment.",
            "type" : "boolean",
            "default" : false
          },
          "replyOnError" : {
            "description" : "Whether you want Integration Server to report errors to the original sender in the body portion of an email.",
            "type" : "boolean",
            "default" : false
          },
          "remove" : {
            "description" : "Whether you want Integration Server to delete a valid email from the IMAP server once Integration Server has successfully received the email.",
            "type" : "boolean",
            "default" : true
          },
          "deleteInvalid" : {
            "description" : "Whether you want Integration Server to delete invalid emails from the IMAP server.",
            "type" : "boolean",
            "default" : true
          },
          "multiThreaded" : {
            "description" : "Whether you want Integration Server to use multiple threads for this port.",
            "type" : "boolean",
            "default" : false
          },
          "numThreads" : {
            "description" : "The number of threads you want Integration Server to use for this port. This field is applicable only if multiThreaded is true.",
            "type" : "integer",
            "format" : "int32"
          },
          "invokePerPart" : {
            "description" : "Whether Integration Server invokes the service for each part of a multipart message or just once for the entire message.",
            "type" : "boolean",
            "default" : true
          },
          "includeHeaders" : {
            "description" : "Whether Integration Server includes the email headers when passing an email message to the content handler.",
            "type" : "boolean",
            "default" : false
          },
          "urlEncodedBody" : {
            "description" : "Whether the email body contains URL-encoded input parameters to be decoded into IData, placed in the pipeline, and passed to the service.",
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "HttpPortIn" : {
        "type" : "object",
        "required" : [ "alias", "number", "packageName", "clientAuth" ],
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "diagnostic" : {
            "description" : "Indicates whether this port is the diagnostic port for Integration Server.",
            "type" : "boolean",
            "default" : false
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication gnostiused by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos" ]
          },
          "backlog" : {
            "description" : "When the port is suspended or receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32",
            "default" : 200
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "integer",
            "format" : "int64",
            "default" : 20000
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean",
            "default" : false
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of threads in the thread pool.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "delay" : {
            "description" : "The number of milliseconds to delay before processing each request received on the port.",
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          },
          "kerberos" : {
            "$ref" : "#/components/schemas/KerberosSettings"
          }
        }
      },
      "ServerThreadPoolOut" : {
        "type" : "object",
        "properties" : {
          "maximumThreads" : {
            "description" : "Maximum number of threads that Integration Server maintains in the server thread pool.",
            "type" : "integer",
            "format" : "int64",
            "default" : 75
          },
          "minimumThreads" : {
            "description" : "Minimum number of threads that Integration Server maintains in the server thread pool.",
            "type" : "integer",
            "format" : "int64",
            "default" : 10
          },
          "availableThreadsWarningThresholdPercentage" : {
            "description" : "Percentage of available threads in the server thread pool at which point Integration Server issues a warning.",
            "type" : "integer",
            "format" : "int64",
            "default" : 15
          },
          "availableThreadsWarningThreshold" : {
            "description" : "Number of available threads in the server thread pool at which point the server issues a warning.",
            "type" : "integer",
            "format" : "int64"
          },
          "schedulerThreadThrottle" : {
            "description" : "Number of threads in the server thread pool that the scheduler function is permitted to use. ",
            "type" : "integer",
            "format" : "int64"
          },
          "schedulerThreadThrottlePercentage" : {
            "description" : "Percentage of threads in the server thread pool that the scheduler function is permitted to use. ",
            "type" : "integer",
            "format" : "int64",
            "default" : 75
          },
          "availableThread" : {
            "description" : "Number of available threads in the server thread pool.",
            "type" : "integer",
            "format" : "int64"
          },
          "availableThreadsPercentage" : {
            "description" : "Percentage of available threads in the server thread pool. ",
            "type" : "integer",
            "format" : "int64"
          },
          "schedulerCurrentThread" : {
            "description" : "The total number of threads in the server thread pool that are being used by the scheduler. ",
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "DoSGlobalFilterInOut" : {
        "type" : "object",
        "properties" : {
          "whenLimitExceeds" : {
            "description" : "The action to be taken when the number of requests from a non-trusted IP address exceeds the specified limits",
            "type" : "string",
            "enum" : [ "Block" ],
            "default" : "Block"
          },
          "isDOSEnabled" : {
            "description" : "Whether Gloabl DoS is enabled.",
            "type" : "boolean",
            "enum" : [ true, false ],
            "default" : false
          },
          "maximumRequests" : {
            "description" : "The maximum number of requests that Enterprise Gateway Server can accept from a specific IP address in a given time interval.",
            "type" : "integer",
            "format" : "int32"
          },
          "requestsInSeconds" : {
            "description" : "The maximum number of requests that Enterprise Gateway Server can accept from a specific IP address in a given time interval(in seconds).",
            "type" : "integer",
            "format" : "int32"
          },
          "inProgressRequests" : {
            "description" : "The maximum number of requests in progress in given time interval.",
            "type" : "integer",
            "format" : "int32"
          },
          "blockInterval" : {
            "description" : "The number of minutes the requests to be blocked.",
            "type" : "integer",
            "format" : "int32"
          },
          "customErrorMessage" : {
            "description" : "The custom message to send to the clients, when a request is denied.",
            "type" : "string"
          },
          "trustedIPRange" : {
            "description" : "The IP addresses or range of trusted IPv4 or IPv6 addresses so that requests from these IP addresses are always allowed.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "UserOut" : {
        "type" : "object",
        "required" : [ "username" ],
        "properties" : {
          "username" : {
            "description" : "Username",
            "type" : "string"
          },
          "groups" : {
            "description" : "Groups to which the user belongs.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "enabled" : {
            "description" : "Whether the user account is enabled.",
            "type" : "boolean"
          },
          "password" : {
            "description" : "Password",
            "type" : "string"
          },
          "openIDProvider" : {
            "description" : "OpenID Provider that authenticates an OpenID Provider user. ",
            "type" : "string"
          },
          "allowDigestAuth" : {
            "description" : "Whether password digest is allowed as an authentication option.",
            "type" : "boolean"
          }
        }
      },
      "SFTPUserAliasPostIn" : {
        "type" : "object",
        "required" : [ "alias", "userName", "authenticationType", "sftpServerAlias" ],
        "properties" : {
          "alias" : {
            "description" : "Alias for the SFTP user.",
            "type" : "string"
          },
          "userName" : {
            "description" : "The user name for the SFTP user account.",
            "type" : "string"
          },
          "authenticationType" : {
            "description" : "The type of authentication that Integration Server uses to authenticate itself to the SFTP server.",
            "type" : "string",
            "enum" : [ "password", "publicKey" ]
          },
          "sftpServerAlias" : {
            "description" : "The alias of the SFTP server to which you want the specified user to connect.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password for the specified SFTP user. This field applies when authenticationType is set to password.",
            "type" : "string"
          },
          "passPhrase" : {
            "description" : "The passphrase for the private key for the specified SFTP user. Supply a passPhrase only if the private key specified in privateKeLocation requires a passphrase. This field applies when authenticationType is set to publicKey.",
            "type" : "string"
          },
          "privateKeyFileLocation" : {
            "description" : "The location of the private key of the specified SFTP user. This field applies when authenticationType is set to publicKey.",
            "type" : "string"
          },
          "maximumRetries" : {
            "description" : "The number of times Integration Server attempts to connect to the SFTP server. The maximum allowed value is 6. The minimum allowed value is 1. The default is 6 retries. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
            "type" : "integer",
            "format" : "int32",
            "default" : 6
          },
          "connectionTimeout" : {
            "description" : "The number of  seconds that Integration Server waits for a response from the SFTP server before timing out and terminating the request. The default is 0, which indicates that the session never times out. ",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "sessionTimeout" : {
            "description" : "The number of minutes Integration Server waits before terminating an idle session. The default is 10 minutes.",
            "type" : "integer",
            "format" : "int32"
          },
          "compression" : {
            "description" : "The compression algorithm for the data.",
            "type" : "string",
            "enum" : [ "none", "zlib" ]
          },
          "compressionLevel" : {
            "description" : "The compression level to use if you set the compression field to zlib. The minimum allowed value is 1. The maximum is 6. The default is 6. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
            "type" : "integer",
            "format" : "int32",
            "default" : 6
          },
          "strictHostKeyChecking" : {
            "description" : "Whether Integration Server verifies the host key of the SFTP server before establishing a connection to the SFTP server.",
            "type" : "string",
            "default" : "yes"
          }
        }
      },
      "RuleOut" : {
        "type" : "object",
        "required" : [ "ruleName" ],
        "properties" : {
          "alertOption" : {
            "$ref" : "#/components/schemas/RuleAlertOptionInOut"
          },
          "ruleName" : {
            "description" : "Enterprise Gateway rule name.",
            "type" : "string"
          },
          "ruleDescription" : {
            "description" : "Rule description.",
            "type" : "string"
          },
          "isRuleEnabled" : {
            "description" : "Whether rule is enabled or disabled.",
            "type" : "boolean",
            "enum" : [ false, true ],
            "default" : false
          },
          "requestType" : {
            "description" : "The rule will be applicable only for selected request types.",
            "type" : "string",
            "enum" : [ "ALL", "INVOKE", "REST", "SOAP" ],
            "default" : "ALL"
          },
          "resourcePath" : {
            "description" : "List of resources for which this rule will be applicable.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "customErrorMessage" : {
            "description" : "The custom error message to send to the clients, when the rule gets violated.",
            "type" : "string"
          },
          "action" : {
            "description" : "Action to be taken on rule violation.",
            "type" : "string",
            "enum" : [ "DENY", "ALERT" ],
            "default" : "DENY"
          },
          "filters" : {
            "$ref" : "#/components/schemas/FiltersInOut"
          }
        }
      },
      "PackagesInstallFromInboundOut" : {
        "type" : "object",
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "description" : "Descriptive success or failure response for the package install.",
            "type" : "string"
          }
        }
      },
      "SFTPUserAliases" : {
        "type" : "object",
        "required" : [ "sftpUserAliasLinks" ],
        "properties" : {
          "sftpUserAliasLinks" : {
            "description" : "Alias for the SFTP user.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "sftpUserAliases" : {
            "description" : "Description of the SFTP user alias. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SFTPUserAliasOut"
            }
          }
        }
      },
      "Terracotta" : {
        "type" : "object",
        "properties" : {
          "terracottaLicenseFileSet" : {
            "description" : "The location of the Terracotta file.",
            "type" : "string"
          },
          "isBigMemoryLicensed" : {
            "description" : "Whether BigMemory is licensed.",
            "type" : "boolean"
          },
          "expirationDate" : {
            "description" : "The license expiration date.",
            "type" : "string"
          },
          "actionRequired" : {
            "description" : "Instructs the user to restart the server when the Terracotta license file is changed.",
            "type" : "string"
          }
        }
      },
      "CertificateInfo" : {
        "type" : "object",
        "required" : [ "subjectCN", "issuerCN", "issuer", "serialNum" ],
        "properties" : {
          "subjectCN" : {
            "description" : "SubjectCN of the certificate.",
            "type" : "string"
          },
          "issuerCN" : {
            "description" : "IssuerCN of the certificate.",
            "type" : "string"
          },
          "issuer" : {
            "description" : "Issuer of the certificate.",
            "type" : "string"
          },
          "serialNum" : {
            "description" : "Serial number of the certificate.",
            "type" : "string"
          }
        }
      },
      "OutBoundHTTPSettingOut" : {
        "type" : "object",
        "properties" : {
          "userAgent" : {
            "description" : "Value that Integration Server uses in the HTTP User-Agent request header when requesting a web document. ",
            "type" : "string"
          },
          "maximumRedirects" : {
            "description" : "Number of times that Integration Server allows a request to be redirected before returning an I/O exception to the client.",
            "type" : "integer",
            "format" : "int64",
            "default" : 5
          },
          "timeoutSeconds" : {
            "description" : "Number of seconds that Integration Server waits for a response from the target server.",
            "type" : "integer",
            "format" : "int64",
            "default" : 300
          },
          "retries" : {
            "description" : "Number of times that Integration Server reissues a request that has timed out before returning an exception to the client.",
            "type" : "integer",
            "format" : "int64",
            "default" : 10
          }
        }
      },
      "ServerCertificates_Patch" : {
        "type" : "object",
        "properties" : {
          "sslKeyStoreAlias" : {
            "description" : "Alias for the keystore containing the private key and server certificate to use when presenting Integration Server's SSL credentials.",
            "type" : "string"
          },
          "sslKeyAlias" : {
            "description" : "Key alias for the private key to use when presenting Integration Server's SSL credentials.",
            "type" : "string"
          },
          "signKeyStoreAlias" : {
            "description" : "Alias for the keystore containing the private keys and certificates to use to sign outgoing messages.",
            "type" : "string"
          },
          "signKeyAlias" : {
            "description" : "Key alias for the private key to use to sign outgoing messagees.",
            "type" : "string"
          },
          "decryptKeyStoreAlias" : {
            "description" : "Alias for the keystore containing the private keys and certificates used to decrypt incoming messages.",
            "type" : "string"
          },
          "decryptKeyAlias" : {
            "description" : "Key alias for the private key to use when decrypting incoming messages.",
            "type" : "string"
          },
          "trustStoreAlias" : {
            "description" : "Alias for the truststore that contains the certificates of the signing authorities associated with the selected keystore.",
            "type" : "string"
          },
          "jvmKeyStore" : {
            "description" : "Alias for the keystore used for the JVM.",
            "type" : "string"
          },
          "jvmTrustStore" : {
            "description" : "Alias for the truststore used for the JVM.",
            "type" : "string"
          }
        }
      },
      "JDBCDriverAlias" : {
        "type" : "object",
        "required" : [ "name", "className" ],
        "properties" : {
          "name" : {
            "description" : "Alias for the JDBC driver.",
            "type" : "string"
          },
          "className" : {
            "description" : "Java class name for the JDBC driver.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JDBC driver alias.",
            "type" : "string"
          }
        }
      },
      "RulePriorityIn" : {
        "type" : "object",
        "required" : [ "ruleName", "ruleType" ],
        "properties" : {
          "ruleName" : {
            "description" : "Rule name.",
            "type" : "string"
          },
          "ruleType" : {
            "description" : "Rule type.",
            "type" : "string",
            "enum" : [ "DENY", "ALERT" ]
          }
        }
      },
      "NodeIn_Patch" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the node.",
            "type" : "string"
          },
          "nodePermissions" : {
            "description" : "Node permissions.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/NodePermissions"
            }, {
              "$ref" : "#/components/schemas/ServicePermissions"
            } ]
          }
        }
      },
      "JournalLoggerData" : {
        "type" : "object",
        "required" : [ "CompCode", "Facs" ],
        "properties" : {
          "CompCode" : {
            "description" : "Server logger component code",
            "type" : "string"
          },
          "CompDesc" : {
            "description" : "Server logger component description",
            "type" : "string"
          },
          "Facs" : {
            "description" : "Server logger facility codes for the component",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JournalLoggerFacCode"
            }
          }
        }
      },
      "FtpPortList" : {
        "type" : "object",
        "properties" : {
          "ports" : {
            "description" : "The list of FTP ports.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/FtpPortLink"
              }, {
                "$ref" : "#/components/schemas/FtpPort"
              } ]
            }
          }
        }
      },
      "JDBCFunctionAliasOut" : {
        "type" : "object",
        "properties" : {
          "functionAliases" : {
            "description" : "All JDBC functions.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/JDBCFunctionAlias"
              } ]
            }
          }
        }
      },
      "JMSConnectionAliasActionOut" : {
        "type" : "object",
        "properties" : { }
      },
      "SessionOut" : {
        "type" : "object",
        "properties" : {
          "sessionTimeoutMinutes" : {
            "description" : "Number of minutes after which an idle user session times out.",
            "type" : "integer",
            "format" : "int64",
            "default" : 25
          },
          "sessionLimitEnable" : {
            "description" : "Whether Integration Server limits the number of concurrent stateful sessions.",
            "type" : "string",
            "enum" : [ "true", "false", "yes", "no" ],
            "default" : "yes"
          },
          "sessionMax" : {
            "description" : "Maximum number of concurrent stateful sessions allowed on the Integration Server.",
            "type" : "integer",
            "format" : "int64",
            "default" : 2147483647
          },
          "sessionWarningPercentage" : {
            "description" : "Threshold, expressed as a percentage of sessionMax, at which Integration Server starts to warn of insufficient available stateful sessions.",
            "type" : "integer",
            "format" : "int64",
            "default" : 25
          }
        }
      },
      "MobileAppProtectionInOut_Patch" : {
        "type" : "object",
        "properties" : {
          "mobileApplications" : {
            "description" : "List of mobile applications.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mobileAppDeviceTypes" : {
            "description" : "List of mobile application device types.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SAMLIssuerInOut_Patch" : {
        "type" : "object",
        "properties" : {
          "issuer" : {
            "description" : "Name of the SAML token issuer.",
            "type" : "string"
          },
          "truststoreAlias" : {
            "description" : "Truststore alias associated with the SAML token issuer.",
            "type" : "string"
          },
          "certificateAlias" : {
            "description" : "Certificate alias associated with the Truststore alias.",
            "type" : "string"
          },
          "clockSkew" : {
            "description" : "Clock difference between the Integration Server and the SAML token issuer.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ServerThreadPoolIn" : {
        "type" : "object",
        "properties" : {
          "maximumThreads" : {
            "description" : "Maximum number of threads that Integration Server maintains in the thread pool.",
            "type" : "integer",
            "format" : "int64"
          },
          "minimumThreads" : {
            "description" : "Minimum number of threads that the server maintains in the thread pool.",
            "type" : "integer",
            "format" : "int64"
          },
          "availableThreadsWarningThreshold" : {
            "description" : "Percentage of available threads in the server thread pool at which Integreation Server starts to warn of insufficient available threads.",
            "type" : "integer",
            "format" : "int64"
          },
          "schedulerThreadThrottlePercentage" : {
            "description" : "Percentage of threads in the server thread pool that the scheduler function is permitted to use. ",
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "SFTPServerAliasPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "description" : "Version of the SFTP client.",
            "type" : "string",
            "enum" : [ "v1", "v2" ]
          },
          "hostName" : {
            "description" : "The host name or IP address of the SFTP server.",
            "type" : "string"
          },
          "port" : {
            "description" : "The port number of the SFTP server. The port number must be within the range of 0 and 65535 (inclusive).",
            "type" : "integer",
            "format" : "int32"
          },
          "hostKeyLocation" : {
            "description" : "Public key of the SFTP server.",
            "type" : "string"
          },
          "preferredKeyExchangeAlgorithms" : {
            "description" : "The algorithms that Integration Server presents to the SFTP server for key exchange.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "proxyAlias" : {
            "description" : "The proxy alias through which the request to the SFTP server is to be routed.",
            "type" : "string"
          },
          "preferredMACS2C" : {
            "description" : "A list of preferred server-to-client Message Authentication Code (MAC) algorithms.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredMACC2S" : {
            "description" : "A list of preferred client-to-server Message Authentication Code (MAC) algorithms.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredCiphersS2C" : {
            "description" : "A list of preferred server-to-client ciphers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredCiphersC2S" : {
            "description" : "A list of preferred client-to-server ciphers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "minDHKeySize" : {
            "description" : "The minimum DH key size. The default value is 1024. This field applies when the SFTP client version is v2.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxDHKeySize" : {
            "description" : "The maximum DH key size. The default value is 8192. This field applies when the SFTP client version is v2.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "GrpcChannelsOut" : {
        "type" : "object",
        "properties" : {
          "grpcChannels" : {
            "description" : "All Grpc channels.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/GrpcChannelOut"
              } ]
            }
          }
        }
      },
      "AuditLoggerCategories" : {
        "type" : "object",
        "properties" : {
          "categoryName" : {
            "description" : "Security category name.",
            "type" : "string"
          },
          "isEnable" : {
            "description" : "Whether the security logger will log security-related events for the category. ",
            "type" : "boolean"
          }
        }
      },
      "OAuthExternalServer_Patch" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Alias for the external authorization server. The following characters are prohibited: ? [ ] / \\ = + < > : ; \" , * | ^ @",
            "type" : "string"
          },
          "introspectionEndpoint" : {
            "description" : "The URL of the introspection endpoint for the external authorization server. Integration Server uses the introspection endpoint to determine if access tokens used in client requests are currently active.",
            "type" : "string"
          },
          "clientId" : {
            "description" : "The ID of the user account that Integration Server uses when sending requests to the introspection endpoint of the external authorization server.",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The password for the user account that Integration Server uses when sending requests to the introspection endpoint of the external authorization server.",
            "type" : "string"
          },
          "user" : {
            "description" : "The Integration Server user account that Integration Server uses to execute the client request. If the client is requesting a service, this is the user account that Integration Server uses to execute the service, which occurs after Integration Server calls the introspection endpoint.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "The alias of the keystore on Integration Server that holds the digital certificate that Integration Server sends to the external authorization server during the mutual (two-way) SSL handshake.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "The alias of the Integration Server private key and associated digital certificate that Integration Server sends to the external authorization server during the mutual (two-way) SSL handshake.",
            "type" : "string"
          },
          "truststoreAlias" : {
            "description" : "The alias of the truststore on Integration Server that holds the Certificate Authority (CA) certificate of the external authorization server.",
            "type" : "string"
          },
          "defaultScope" : {
            "description" : "Default scope that takes effect when no scope is explicitly stated in the response from the external authorization server's introspection endpoint.",
            "type" : "string"
          }
        }
      },
      "Keystores" : {
        "type" : "object",
        "required" : [ "keystoreLinks" ],
        "properties" : {
          "keystoreLinks" : {
            "description" : "Alias for the keystore.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "keystoreAliases" : {
            "description" : "Description of the keystore. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeystoreOut"
            }
          }
        }
      },
      "JNDIConnectionAliasUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "providerURL" : {
            "description" : "The URL of the initial context for sessions with the JNDI provider.",
            "type" : "string"
          },
          "initialContextFactory" : {
            "description" : "The class name of the JNDI provider. The initial context is the starting point that the JNDI provider users to resolve names for naming and directory operations.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JNDI connection alias.",
            "type" : "string"
          },
          "otherProperties" : {
            "description" : "The additional properties for JNDI configuration required by the JNDI provider.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "The alias for the keystore that contains the client certificates for Integration Server to use when connecting to the JNDI provider.",
            "type" : "string"
          },
          "keystoreFormatPropertyName" : {
            "description" : "The JNDI property name for storing the keystore format.",
            "type" : "string"
          },
          "keystoreKeyAlias" : {
            "description" : "The alias to the key that contains the private key for connecting to the JNDI provider.The key alias must be in the keystore specified in keystoreAlias.",
            "type" : "string"
          },
          "keystorePasswordPropertyName" : {
            "description" : "The JNDI property name for storing the keystore password. This field is required if a keystoreAlias value is set for the JNDI connection alias.",
            "type" : "string"
          },
          "keystorePropertyName" : {
            "description" : "The JNDI property name for storing the keystore location. This field is required if a keystoreAlias value is set for the JNDI connection alias.",
            "type" : "string"
          },
          "privateKeyPropertyName" : {
            "description" : "The JNDI property name for storing the private key name. ",
            "type" : "string"
          },
          "providerURLFailoverList" : {
            "description" : "One or more provider URLs that Integration Server should use if the connection to the primary JNDI provider fails.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "securityCredentials" : {
            "description" : "The security credentials that the JMS administrator provides to the JNDI provider.",
            "type" : "string"
          },
          "securityPrincipal" : {
            "description" : "The name of the security principal that the JMS administrator provides to the JNDI provider.",
            "type" : "string"
          },
          "trustoreAlias" : {
            "description" : "The alias for the truststore that contains the certificates of the Certificate Authority (CA) for the JNDI provider.",
            "type" : "string"
          },
          "truststorePasswordPropertyName" : {
            "description" : "The JNDI property name for storing the truststore password. This field is required if the truststoreAlias value is set for the JNDI connection alias. ",
            "type" : "string"
          },
          "truststorePropertyName" : {
            "description" : "The JNDI property name for storing the truststore location. This field is required if the truststoreAlias value is set for the JNDI connection alias.",
            "type" : "string"
          },
          "useSSL" : {
            "description" : "Whether to use SSL to connect to the JNDI provider.",
            "type" : "boolean"
          }
        }
      },
      "JDBCDriverAliasIn_Patch" : {
        "type" : "object",
        "properties" : {
          "className" : {
            "description" : "Java class name for the JDBC driver.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JDBC driver alias.",
            "type" : "string"
          }
        }
      },
      "Map" : {
        "type" : "object",
        "properties" : { }
      },
      "ProxyServerUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "newAlias" : {
            "description" : "New alias name for the proxy server.",
            "type" : "string"
          },
          "host" : {
            "description" : "Host Name or IP address of the proxy server. ",
            "type" : "string"
          },
          "port" : {
            "description" : "Port number of the proxy server. ",
            "type" : "integer",
            "format" : "int32"
          },
          "username" : {
            "description" : "User name Integration Server must use to access the proxy server. ",
            "type" : "string"
          },
          "password" : {
            "description" : "Password Integration Server must use to access the proxy server. ",
            "type" : "string"
          },
          "isDefault" : {
            "description" : "Whether the proxy server is the default proxy server for a particular protocol. ",
            "type" : "boolean"
          },
          "protocol" : {
            "description" : "Protocol to be used for the proxy server. Supported protocols are: HTTP, HTTPS, FTP, or SOCKS. ",
            "type" : "string",
            "enum" : [ "HTTP", "HTTPS", "FTP", "SOCKS" ]
          },
          "ftpType" : {
            "description" : "If FTP is used, specifies the type of command Integration Server must use to issue an outbound request to the FTP proxy server. Valid values are 0-7 where the values are mapped as follows: 0:No proxy, 1:ftp_user@ftp_host no proxy auth, 2:ftp_user@ftp_host proxy auth, 3:site command, 4:open command, 5:ftp_user@proxy_user@ftp_host, 6:proxy_user@ftp_host, 7:ftp_user@ftp_host proxy_user",
            "type" : "integer",
            "format" : "int32"
          },
          "socksVersion" : {
            "description" : "If SOCKS is used, specifies the version of SOCKS protocol Integration Server will use to connect to the proxy server. Valid values are 4 and 5 where the values are mapped as follows:  4:SOCKS v4, 5:SOCKS v5",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "JMSDestinationOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the destination from which the JMS trigger receives messages.",
            "type" : "string"
          },
          "destinationType" : {
            "description" : "Type of destination.",
            "type" : "string"
          },
          "messageSelector" : {
            "description" : "An expression used to receive a subset of messages from this destination.",
            "type" : "string"
          },
          "durableSubscriberName" : {
            "description" : "Name of the durable subscriber associated with this destination.",
            "type" : "string"
          },
          "ignoreLocallyPublished" : {
            "description" : "Whether the JMS the trigger ignores messages sent using the same JMS connection alias as the JMS trigger.",
            "type" : "boolean"
          }
        }
      },
      "RemoteServerUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "Alias",
            "type" : "string"
          },
          "newAlias" : {
            "description" : "New alias for the remote server.",
            "type" : "string"
          },
          "host" : {
            "description" : "Host name or IP address for the remote server.",
            "type" : "string"
          },
          "port" : {
            "description" : "Port number to which requests will be sent on the remote server.",
            "type" : "integer",
            "format" : "int32"
          },
          "user" : {
            "description" : "User name for submitting requests.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for user account. ",
            "type" : "string"
          },
          "ssl" : {
            "description" : "Whether to use SSL to connect to the remote server. ",
            "type" : "boolean"
          },
          "keystoreAlias" : {
            "description" : "Keystore alias for the keystore containing the private keys and certificates used for authentication with the remote server.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Key alias for a private key and associated certificate chain.",
            "type" : "string"
          },
          "acl" : {
            "description" : "Execute ACL that determines which user groups can use the remote server alias. ",
            "type" : "string"
          },
          "keepAlive" : {
            "description" : "Maximum number of client keep alive connections that can be retained for reuse with the remote server.",
            "type" : "integer",
            "format" : "int32"
          },
          "timeout" : {
            "description" : "Keep alive timeout (minutes) for an idle connection to the remote server.",
            "type" : "number",
            "format" : "float"
          },
          "retryServer" : {
            "description" : "Host name or IP address of a remote server to connect to if the local Integration Server cannot connect to primary remote server.",
            "type" : "string"
          }
        }
      },
      "JWTIssuerOut" : {
        "type" : "object",
        "properties" : {
          "issuers" : {
            "description" : "List of all trusted issuers.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JWTIssuer"
            }
          }
        }
      },
      "AuditLoggerData" : {
        "type" : "object",
        "required" : [ "loggerName", "enabled", "database", "asynchronous", "guaranteed", "maxQueueSize", "maxRetries", "retryWait", "hasLevel", "hasSecurity", "queueType" ],
        "properties" : {
          "loggerName" : {
            "description" : "Name of audit logger.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the audit logger is enabled.",
            "type" : "boolean"
          },
          "licensed" : {
            "description" : "Whether the audit logger is licensed for this Integration Server/",
            "type" : "boolean"
          },
          "database" : {
            "description" : "Whether the audit logger writes to a database instead of a file.",
            "type" : "boolean"
          },
          "asynchronous" : {
            "description" : "Whether the audit Logger is asynchronous.",
            "type" : "boolean"
          },
          "guaranteed" : {
            "description" : "Whether the audit logger keeps the internal queue on disk.",
            "type" : "boolean"
          },
          "maxQueueSize" : {
            "description" : "Maximum number of log entries for the internal queue.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxRetries" : {
            "description" : "Maximum times the audit logger should retry writing the entry to the destination if the first attempt fails because of a transient error.",
            "type" : "integer",
            "format" : "int32"
          },
          "retryWait" : {
            "description" : "Number of seconds the audit logger waits between tries to connect to the database. ",
            "type" : "integer",
            "format" : "int64"
          },
          "hasLevel" : {
            "description" : "Whether the audit logger has a log level that can be updated.",
            "type" : "boolean"
          },
          "level" : {
            "description" : "The log level for the audit logger. This applies to the messaging audit logger. ",
            "type" : "string"
          },
          "hasSecurity" : {
            "description" : "Whether the audit logger is the security audit logger.",
            "type" : "boolean"
          },
          "hasMessaging" : {
            "description" : "Whether the audit Logger is the messaging audit logger.",
            "type" : "boolean"
          },
          "canDisable" : {
            "description" : "Whether the audit logger can be disabled.",
            "type" : "boolean"
          },
          "dBAllowed" : {
            "description" : "Whether the audit logger can write to a database.",
            "type" : "boolean"
          },
          "fSAllowed" : {
            "description" : "Whether the audit logger can write to the file system.",
            "type" : "boolean"
          },
          "connectionAlias" : {
            "description" : "Universal Messaging connection alias the audit logger uses to write to the audit logging queue on Universal Messaging.",
            "type" : "string"
          },
          "queueType" : {
            "description" : "Whether the audit logging queue for the audit logger is an internal, light-weight queue or a Universal Messaging queue.",
            "type" : "string"
          },
          "readerThreads" : {
            "description" : "Number of threads that Integration Server uses to retrieve log entries from the Universal Messaging queue and then write the log entries to the audit logger destination.",
            "type" : "integer",
            "format" : "int32"
          },
          "securityCategories" : {
            "description" : "Security actions for which to log security-related events. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditLoggerCategories"
            }
          },
          "result" : {
            "description" : "Whether the security audit logger generates audit data for a security even upon success, failure, or both.",
            "type" : "string"
          },
          "startup" : {
            "description" : "Whether the security audit logger writes security events that occur during Integration Server startup.",
            "type" : "string"
          },
          "logLevel" : {
            "description" : "The logging level for the messaging audit logger.",
            "type" : "string"
          }
        }
      },
      "HttpsPortInUpdate" : {
        "type" : "object",
        "required" : [ "number", "packageName", "clientAuth" ],
        "properties" : {
          "number" : {
            "description" : "The port number",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "diagnostic" : {
            "description" : "Whether this port is the diagnostic port for Integration Server.",
            "type" : "boolean",
            "default" : false
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos", "requestClientCertification", "requireClientCertification", "idProvider" ]
          },
          "backlog" : {
            "description" : "When the port is suspended or receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32",
            "default" : 200
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "integer",
            "format" : "int64",
            "default" : 20000
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean",
            "default" : false
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of the threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "delay" : {
            "description" : "The number of milliseconds to delay before processing each request received on the port.",
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "kerberos" : {
            "$ref" : "#/components/schemas/KerberosSettingsIn"
          },
          "idProvider" : {
            "description" : "The OpenID Provider to use to perform authentication for all requests sent to this port.",
            "type" : "string"
          },
          "jsseDisabledProtocols" : {
            "description" : "Specifies the list of disabled SSL and TLS protocol versions when Integration Server acts as SSL when the server is handling inbound requests.",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Specifies If the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          }
        }
      },
      "KeystoreOut" : {
        "type" : "object",
        "required" : [ "alias", "type", "provider", "location" ],
        "properties" : {
          "alias" : {
            "description" : "Alias for the keystore file.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the keystore alias.",
            "type" : "string"
          },
          "type" : {
            "description" : "Certificate file format of the keystore file.",
            "type" : "string"
          },
          "provider" : {
            "description" : "Provider that is used for the keystore.",
            "type" : "string"
          },
          "location" : {
            "description" : "Location of the keystore file on the server. This can be the full pathname or a relative path in relation to the Integration Server.",
            "type" : "string"
          },
          "isHsm" : {
            "description" : "Whether the keystore is stored on a Hardware Security Module (HSM) device.",
            "type" : "string",
            "enum" : [ "true", "false" ],
            "default" : "false"
          },
          "configuredKeyAliases" : {
            "$ref" : "#/components/schemas/List"
          }
        }
      },
      "MessagingTriggerOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the webMethods messaging trigger.",
            "type" : "string"
          },
          "aliasName" : {
            "description" : "Name of the messaging connection alias used by the webMethods messaging trigger.",
            "type" : "string"
          },
          "type" : {
            "description" : "Indicates the webMethods messaging provider used with the messaging connection alias. The Type can be Broker or Universal Messaging.",
            "type" : "string"
          },
          "lastError" : {
            "description" : "Last error reported for this webMethods messaging trigger.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Whether the trigger is enabled.",
            "type" : "boolean"
          },
          "joinExpiresAfter" : {
            "description" : "Number of millieseconds that Integration Server waits for the remaining documents in the join condition.",
            "type" : "string"
          },
          "queueCapacity" : {
            "description" : "Current maximum capacity for the trigger queue. If the current queue capacity is different from the configured queue capacity (that is, the Queue Capacity Throttle is set to less than 100%), the configured queue capacity is displayed in parenthesis.",
            "type" : "integer",
            "format" : "int32"
          },
          "queueRefillLevel" : {
            "description" : "Current refill level for the trigger queue. If the current refill level is different from the configured refill level (that is, the Queue Capacity Throttle is set to less than 100%), the configured refill level is displayed in parenthesis.",
            "type" : "integer",
            "format" : "int32"
          },
          "ackQueueSize" : {
            "description" : "Maximum number of pending document acknowledgements for this trigger.",
            "type" : "string"
          },
          "maxRetryAttempts" : {
            "description" : "Maximum number of times Integration Servercan re-execute the trigger service if the trigger service fails because of an ISRuntimeException",
            "type" : "integer",
            "format" : "int32"
          },
          "retryInterval" : {
            "description" : "Number of milliseconds that Integration Server waits between attempts to re-execute the trigger service",
            "type" : "integer",
            "format" : "int32"
          },
          "onRetryFailure" : {
            "description" : "How Integration Server handles retry failure for this trigger.",
            "type" : "string"
          },
          "resourceMonitoringService" : {
            "description" : "The service that Integration Server executes to determine the availability of resources associated with the trigger service.",
            "type" : "string"
          },
          "processingMode" : {
            "description" : "Whether Integration Server processes the documents in the trigger queue concurrently or serially.",
            "type" : "string"
          },
          "maxExecutionThreads" : {
            "description" : "Maximum number of server threads that can process documents for this trigger concurrently.",
            "type" : "integer",
            "format" : "int32"
          },
          "suspendOnError" : {
            "description" : "Whether Integration Server suspends document processing and document retrieval automatically when a trigger service ends with an exception",
            "type" : "boolean"
          },
          "exactlyOnceDetectDuplicates" : {
            "description" : "Whether Integration Server uses duplicate detection to ensure exactly-once processing for documents received by this trigger",
            "type" : "boolean"
          },
          "exactlyOnceUseHistory" : {
            "description" : "Whether a document history will be maintained and used to determine whether a document is a duplicate.",
            "type" : "boolean"
          },
          "exactOnceHistoryTimeToLive" : {
            "description" : "Length of time the document history database maintains an entry for a document processed by the trigger",
            "type" : "integer",
            "format" : "int32"
          },
          "priorityEnabled" : {
            "description" : "Whether priority messaging for the trigger is enabled or disabled.",
            "type" : "boolean"
          },
          "conditions" : {
            "description" : "webMethods messaging trigger conditions.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessagingConditionOut"
            }
          },
          "triggerClientId" : {
            "description" : "The client ID for the webMethods messaging trigger.",
            "type" : "string"
          },
          "defaultClientId" : {
            "description" : "The client ID for the default client on Integration Server.",
            "type" : "string"
          },
          "retrievalState" : {
            "description" : "Whether document retrieval is active or suspended for this trigger.",
            "type" : "string"
          },
          "processingState" : {
            "description" : "Whether document processing is active or suspended for this trigger.",
            "type" : "string"
          },
          "currentThreadsProccesing" : {
            "description" : "The current number of server threads processing documents for this trigger.",
            "type" : "integer",
            "format" : "int32"
          },
          "volatileQueue" : {
            "description" : "The current number of documents in the volatile queue for the trigger.",
            "type" : "integer",
            "format" : "int32"
          },
          "persistedQueue" : {
            "description" : "The current number of documents in the persisted queue for the trigger.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "GrpcChannelInUpdate" : {
        "type" : "object",
        "properties" : {
          "port" : {
            "description" : "Port number to run the Grpc Channel.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AccountLocking" : {
        "type" : "object",
        "properties" : {
          "lockingEnabled" : {
            "description" : "Whehter account locking is enabled.",
            "type" : "boolean"
          },
          "maxLoginAttempts" : {
            "$ref" : "#/components/schemas/LoginAttemptFrequency"
          },
          "lockoutDuration" : {
            "$ref" : "#/components/schemas/TimeDuration"
          },
          "policyApplicability" : {
            "description" : "Users to which account locking policy applies.",
            "type" : "string",
            "enum" : [ "allUsers", "allUsersExceptPredefinedUsers" ]
          }
        }
      },
      "CacheIn" : {
        "type" : "object",
        "required" : [ "cacheManagerName", "cacheName", "maxElementsInMemory", "maxEntriesLocalDisk", "diskExpiryThreadIntervalSeconds" ],
        "properties" : {
          "cacheManagerName" : {
            "description" : "Name of the cache manager in which to create the cache.",
            "type" : "string"
          },
          "cacheName" : {
            "description" : "Name of the cache.",
            "type" : "string"
          },
          "timeToIdleSeconds" : {
            "description" : "Seconds an unmodified and unaccessed element can remain in the cache. The default value of 0 indicates that the elements in this cache do not have a time-to-idle expiration.",
            "type" : "string",
            "default" : "0"
          },
          "timeToLiveSeconds" : {
            "description" : "Seconds an element can remain in the cache. The default value of 0 indicates that the elements in this cache do not have a time-to-live expiration. ",
            "type" : "string",
            "default" : "0"
          },
          "maxElementsInMemory" : {
            "description" : "Maximum number of elements the cache can hold in on-heap memory.",
            "type" : "string"
          },
          "maxEntriesLocalDisk" : {
            "description" : "Maximum number of elements the cache can hold in the local file system.",
            "type" : "string"
          },
          "logging" : {
            "description" : "Ehcache logging setting.",
            "type" : "boolean",
            "default" : false
          },
          "clearOnFlush" : {
            "description" : "Ehcache clearOnFlush setting.",
            "type" : "boolean",
            "default" : true
          },
          "copyOnRead" : {
            "description" : "Ehcache copyOnRead setting.",
            "type" : "boolean",
            "default" : true
          },
          "copyOnWrite" : {
            "description" : "Ehcache copyOnWrite setting.",
            "type" : "boolean",
            "default" : true
          },
          "overflowToDisk" : {
            "description" : "Whether cache uses local file system when maxElementsInMemory is exceeded.",
            "type" : "boolean",
            "default" : false
          },
          "overflowToOffHeap" : {
            "description" : "Whether cache uses off-heap memory when maxElementsInMemory is exceeded.",
            "type" : "boolean",
            "default" : false
          },
          "maxMemoryOffHeap" : {
            "description" : "Maximum off-heap memory the cache can use.",
            "type" : "integer",
            "format" : "int64"
          },
          "memoryStoreEvictionPolicy" : {
            "description" : "Policy to determine which elements are evicted from cache, LRU (Least Recently Used) or LFU (Least Frequently Used).",
            "type" : "string",
            "enum" : [ "LRU", "LFU" ],
            "default" : "LRU"
          },
          "diskExpiryThreadIntervalSeconds" : {
            "description" : "The interval, measured in seconds, between runs of the cache's expiry thread. The default is 120. ",
            "type" : "integer",
            "format" : "int32"
          },
          "diskPersistent" : {
            "description" : "Whether to persist the cache to disk between JVM restarts.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "diskSpoolBufferSizeMB" : {
            "description" : "The amount of memory in megabytes to allocate for the write buffer to the disk. The default is 30 MB. ",
            "type" : "integer",
            "format" : "int64"
          },
          "eternal" : {
            "description" : "Whether the elements in the cache never expire. The default is false. ",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "diskAccessStripes" : {
            "description" : "The number of disk access stripes.",
            "type" : "string",
            "default" : "1"
          },
          "cacheLoaderTimeoutMillis" : {
            "description" : "Timeout in milliseconds for cache loader related calls.",
            "type" : "integer",
            "format" : "int64",
            "default" : 30000
          },
          "maxEntriesInCache" : {
            "description" : "Maximum number of entries to be held in the cache.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "isInternal" : {
            "description" : "Whether cache is used internally by Integration Server. Care should be taken before modifying the configuration of an internal cache.",
            "type" : "boolean"
          },
          "cacheManagerAlive" : {
            "description" : "Whether cache's cache manager is alive.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "terracottaConfiguration" : {
            "$ref" : "#/components/schemas/TerracottaConfig"
          }
        }
      },
      "ScheduledTaskPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "Type of the task.",
            "type" : "string",
            "enum" : [ "once", "repeat", "complex" ]
          },
          "service" : {
            "description" : "Fully qualified name of the service that Integration Server executes.",
            "type" : "string"
          },
          "runAsUser" : {
            "description" : "User whose credentials are used to run the service.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the task.",
            "type" : "string"
          },
          "target" : {
            "description" : "Integration Server on which the task will run. Set to $any for any server connected to the database, $all for all servers in a cluster of Integration Servers, or the specific server name. ",
            "type" : "string"
          },
          "inputs" : {
            "description" : "Input to the service that Integration Server will execute.",
            "type" : "object"
          },
          "lateness" : {
            "description" : "The maximum number of minutes Integration Server waits before taking the specified latenessAction, if the task is overdue. This applies to simple repeating and complex repeating tasks.",
            "type" : "integer",
            "format" : "int32"
          },
          "latenessAction" : {
            "description" : "The action Integration Server performs if the task is overdue. Set to 0 for run immediately, 1 for run at next scheduled interval, 2 for suspend. This applies to simple repeating and complex repeating tasks.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 0, 1, 2 ]
          },
          "interval" : {
            "description" : "Execution interval in seconds. This applies to simple repeating tasks.",
            "type" : "integer",
            "format" : "int64"
          },
          "doNotOverlap" : {
            "description" : "Whether Integration Server waits for the previous execution of the service to complete before starting the next. This applies to simple repeating and complex repeating tasks.",
            "type" : "boolean"
          },
          "startDate" : {
            "description" : "Date of the first execution in the format YYYY/MM/DD. The startDate is required for a one-time task.",
            "type" : "string"
          },
          "startTime" : {
            "description" : "Time of the first execution in the format HH:MM:SS. The startTime is required for a one-time task.",
            "type" : "string"
          },
          "endDate" : {
            "description" : "Date of the last execution in the format YYYY/MM/D. This field applies to repeating tasks only.",
            "type" : "string"
          },
          "endTime" : {
            "description" : "Time of the last execution in the format HH:MM:SS. This field applies to repeating tasks only.",
            "type" : "string"
          },
          "delay" : {
            "description" : "Delay in seconds, if startDate is not specified for a repeating or complex task. If startDate is not provided, then Integration Server calculates the start date as system time plus delay value.",
            "type" : "integer",
            "format" : "int64"
          },
          "minuteList" : {
            "description" : "List of specific minutes when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "hourList" : {
            "description" : "List of specific hours when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dayOfMonthList" : {
            "description" : "List of specific dates (1 - 31) when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "monthList" : {
            "description" : "List of specific months when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]
            }
          },
          "dayOfWeekList" : {
            "description" : "List of specific days of the week when a complex task will run.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
            }
          }
        }
      },
      "SFTPUserAliasOut" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "Alias for the SFTP user.",
            "type" : "string"
          },
          "userName" : {
            "description" : "The user name for the SFTP user account.",
            "type" : "string"
          },
          "authenticationType" : {
            "description" : "The type of authentication that Integration Server uses to authenticate itself to the SFTP server.",
            "type" : "string"
          },
          "sftpServerAlias" : {
            "description" : "The alias of the SFTP server to which you want the specified user to connect.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password for the specified SFTP user. This field applies when authenticationType is set to password.",
            "type" : "string"
          },
          "passPhrase" : {
            "description" : "The passphrase for the private key for the specified SFTP user. This field applies when authenticationType is set to publicKey and if the private key specified in privateKeLocation requires a passphrase.",
            "type" : "string"
          },
          "privateKeyFileLocation" : {
            "description" : "The location of the private key of the specified SFTP user. This field applies when authenticationType is set to publicKey.",
            "type" : "string"
          },
          "maximumRetries" : {
            "description" : "The number of times Integration Server attempts to connect to the SFTP server. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
            "type" : "integer",
            "format" : "int32"
          },
          "connectionTimeout" : {
            "description" : "The number of seconds that Integration Server waits for a response from the SFTP server before timing out and terminating the request.",
            "type" : "integer",
            "format" : "int32"
          },
          "sessionTimeout" : {
            "description" : "The number of minutes Integration Server waits before terminating an idle session.",
            "type" : "integer",
            "format" : "int32"
          },
          "compression" : {
            "description" : "The compression algorithm used to reduce the amount of data that is transmitted.",
            "type" : "string"
          },
          "compressionLevel" : {
            "description" : "The compression level to use if the compression field is set to zlib. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
            "type" : "integer",
            "format" : "int32"
          },
          "strictHostkeyChecking" : {
            "description" : "Whether Integration Server verifies the host key of the SFTP server before establishing a connection to the SFTP server.",
            "type" : "string"
          }
        }
      },
      "LdapConfigurationUpdateIn" : {
        "type" : "object",
        "required" : [ "url", "principal", "credential", "useAffix", "groupID" ],
        "properties" : {
          "priority" : {
            "description" : "Priority of this LDAP directory configuration. ",
            "type" : "integer",
            "format" : "int32"
          },
          "url" : {
            "description" : "Complete URL of the LDAP server. The URL has the format protocol://hostname:portnumber",
            "type" : "string"
          },
          "principal" : {
            "description" : "The user ID the Integration Server supplies to connect to the LDAP server",
            "type" : "string"
          },
          "credential" : {
            "description" : "The password that Integration Server supplies to connect to the LDAP server, that is, the Principal's password.",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Maximum number of seconds Integration Server will wait while trying to connect to the LDAP server. After this time has passed, the Integration Server will try the\r\nnext configured LDAP server on the list.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "poolMin" : {
            "description" : "Minimum number of connections allowed in\r\nthe pool that the Integration Server maintains for\r\nconnecting to the LDAP server.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "poolMax" : {
            "description" : "Maximum number of connections allowed in\r\nthe pool that the Integration Server maintains for\r\nconnecting to the LDAP server.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "useAffix" : {
            "description" : "Whether to build a distinguished name by adding a prefix and suffix. Specify true to build a distinguished name by adding a prefix and suffix to the user name. Specify false to build a query that searches a specified root directory\r\nfor the user.",
            "type" : "boolean"
          },
          "dnPrefix" : {
            "description" : "String that specifies the beginning of a DN to pass to the LDAP server.",
            "type" : "string"
          },
          "dnSuffix" : {
            "description" : "String that specifies the end of a DN to pass to the LDAP server.",
            "type" : "string"
          },
          "userID" : {
            "description" : "Identifies an LDAP userid, such as cn or uid.",
            "type" : "string"
          },
          "userRootDN" : {
            "description" : "The full distinguished name of the location at which Integration Server is to start searching on the LDAP server. Integration Server will issue a query that starts searching for users in the entered directory.",
            "type" : "string"
          },
          "userEmail" : {
            "description" : "Name of the attribute that contains the email address of the user in LDAP server.",
            "type" : "string"
          },
          "group" : {
            "description" : "Integration Server group with which the user is associated.",
            "type" : "string"
          },
          "memberAttribute" : {
            "description" : "Name of the attribute in a group's directory entry that identifies each member of the group.",
            "type" : "string"
          },
          "groupID" : {
            "description" : "Identifies an LDAP group, such as CN.",
            "type" : "string"
          },
          "groupRootDN" : {
            "description" : "The full distinguished name of the location at which Integration Server is to start searching on the LDAP server. Integration Server will issue a query that starts searching for the group in the entered directory.",
            "type" : "string"
          }
        }
      },
      "HttpsPortIn" : {
        "type" : "object",
        "required" : [ "alias", "number", "packageName", "clientAuth" ],
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "diagnostic" : {
            "description" : "Whether this port is the diagnostic port for Integration Server.",
            "type" : "boolean",
            "default" : false
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos", "requestClientCertification", "requireClientCertification", "idProvider" ]
          },
          "backlog" : {
            "description" : "When the port is suspended or receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32",
            "default" : 200
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "integer",
            "format" : "int64",
            "default" : 20000
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean",
            "default" : false
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of threads in the thread pool.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "delay" : {
            "description" : "The number of milliseconds to delay before processing each request received on the port.",
            "type" : "integer",
            "format" : "int64",
            "default" : 0
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component. ",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          },
          "kerberos" : {
            "$ref" : "#/components/schemas/KerberosSettingsIn"
          },
          "jsseDisabledProtocols" : {
            "description" : "Specifies the list of disabled SSL and TLS protocol versions when Integration Server acts as SSL when the server is handling inbound requests.",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Specifies If the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "idProvider" : {
            "description" : "The OpenID Provider to use to perform authentication for all requests sent to this port.",
            "type" : "string"
          }
        }
      },
      "ProxyServerActionOut" : {
        "type" : "object",
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "description" : "Message regarding the proxy server alias action.",
            "type" : "string"
          }
        }
      },
      "SecurityProviderIn" : {
        "type" : "object",
        "required" : [ "providerClass" ],
        "properties" : {
          "providerClass" : {
            "description" : "Full name of the Security Provider class",
            "type" : "string"
          }
        }
      },
      "GroupIn" : {
        "type" : "object",
        "required" : [ "groupName" ],
        "properties" : {
          "groupName" : {
            "description" : "Group name.",
            "type" : "string"
          },
          "users" : {
            "description" : "Users that belong to the group.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ProxyServers" : {
        "type" : "object",
        "properties" : {
          "proxyServers" : {
            "description" : "All proxy server aliases.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/ProxyServerData"
              } ]
            }
          }
        }
      },
      "CsrfGuardInOut" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether CSRF guard is enabled.",
            "type" : "boolean",
            "enum" : [ true, false ],
            "default" : false
          },
          "excludedUserAgents" : {
            "description" : "List of user agents through which Integration Server can be accessed without CSRF token.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "landingPages" : {
            "description" : "List of the landing pages (home pages) for the packages on Integration Servers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "unprotectedURLs" : {
            "description" : "List of URLs for which Integration Server does not have to check for CSRF tokens.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "denialAction" : {
            "description" : "Action to be taken when request does not contain an CSRF token or contains an invalid CSRF token.",
            "type" : "string",
            "enum" : [ "ERROR", "REDIRECT" ],
            "default" : "ERROR"
          }
        }
      },
      "JDBCDriverAliasPutIn" : {
        "type" : "object",
        "required" : [ "className" ],
        "properties" : {
          "className" : {
            "description" : "Java class name for the JDBC driver.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JDBC driver alias.",
            "type" : "string"
          }
        }
      },
      "PortDetail" : {
        "type" : "object",
        "properties" : {
          "port" : {
            "description" : "Indicates the port number",
            "type" : "integer",
            "format" : "int32"
          },
          "urlPath" : {
            "description" : "Indicates the url path",
            "type" : "string"
          }
        }
      },
      "ACLs" : {
        "type" : "object",
        "properties" : {
          "acls" : {
            "description" : "All access control lists.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/ACLOut"
              } ]
            }
          }
        }
      },
      "TruststoreInUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "keyStoreDescription" : {
            "description" : "Description of the truststore alias. ",
            "type" : "string"
          },
          "keyStoreType" : {
            "description" : "Certificate file format of the truststore.",
            "type" : "string"
          },
          "keyStoreProvider" : {
            "description" : "Provider that is used for the truststore.",
            "type" : "string"
          },
          "keyStoreLocation" : {
            "description" : "Location of the truststore file on the server. This can be the full pathname, or a relative path in relation to the Integration Server.",
            "type" : "string"
          },
          "keyStorePassword" : {
            "description" : "Password for the truststore file associated with this alias.",
            "type" : "string"
          }
        }
      },
      "HealthGaugeActionOut" : {
        "type" : "object",
        "required" : [ "name", "action", "message" ],
        "properties" : {
          "name" : {
            "description" : "Indicator name.",
            "type" : "string",
            "enum" : [ "Adapters", "JDBC", "JMS", "JNDIAliases", "RemoteServers", "SFTPServers", "UMAliases", "Cluster", "Diskspace", "Memory", "ServiceThread", "Sessions" ]
          },
          "action" : {
            "description" : "Action successfully executed on the indicator.",
            "type" : "string",
            "enum" : [ "disable", "enable" ]
          },
          "message" : {
            "description" : "Success message for the result of the administrative action.",
            "type" : "string"
          }
        }
      },
      "InternalServerPortList" : {
        "type" : "object",
        "properties" : {
          "internalServerPorts" : {
            "description" : "All Internal Server ports.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/InternalServerPortLink"
              }, {
                "$ref" : "#/components/schemas/InternalServerPortPostOut"
              } ]
            }
          }
        }
      },
      "ClientRegistrationInput_Patch" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "The name of the client. The name cannot contain the following characters: & ( ) \\ ; , / \" : ' < >",
            "type" : "string"
          },
          "version" : {
            "description" : "Specifies the version number of the client.",
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "description" : "Type of client as described in RFC 6749.",
            "type" : "string",
            "enum" : [ "Confidential", "Public" ]
          },
          "description" : {
            "description" : "Description of the client.",
            "type" : "string"
          },
          "redirect_uris" : {
            "description" : "The client's redirection endpoints.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scopes" : {
            "description" : "List of scopes attached to the client.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "authorizationCodeGrant" : {
            "description" : "Indicates whether client can use the authorization code grant.",
            "type" : "boolean"
          },
          "implicitGrant" : {
            "description" : "Indicates whether client can use the implicit grant",
            "type" : "boolean"
          },
          "clientCredentialsGrant" : {
            "description" : "Indicates whether client can use the client credentials grant.",
            "type" : "boolean"
          },
          "resourceOwnerCredentialsGrant" : {
            "description" : "",
            "type" : "boolean"
          },
          "tokenLifetime" : {
            "description" : "Specifies the length of time (in seconds) that the access token is valid",
            "type" : "integer",
            "format" : "int64"
          },
          "tokenRefreshCount" : {
            "description" : "Specifies the number of times the access token can be refreshed.",
            "type" : "integer",
            "format" : "int32"
          },
          "enabled" : {
            "description" : "Indicates whether client is enabled. If true, client can request authorization and use access tokens.",
            "type" : "boolean"
          },
          "registrationClientUri" : {
            "description" : "",
            "type" : "string"
          },
          "registrationAccessToken" : {
            "description" : "",
            "type" : "string"
          }
        }
      },
      "MasterPasswordExpirationIn" : {
        "type" : "object",
        "properties" : {
          "expirationInterval" : {
            "description" : "Number of days after which a password expires.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AlertOptionInOut" : {
        "type" : "object",
        "properties" : {
          "alertType" : {
            "description" : "Type of the alert.",
            "type" : "string",
            "enum" : [ "None", "Email", "FlowService" ],
            "default" : "None"
          },
          "alertOnEvery" : {
            "description" : "Whether to alert on every rule violation.",
            "type" : "boolean",
            "enum" : [ true, false ],
            "default" : true
          },
          "alertInterval" : {
            "description" : "Alert interval in minutes, when alert is disabled then on every rule violation, then the alerts will be grouped and will be sent in fixed time interval.",
            "type" : "integer",
            "format" : "int32"
          },
          "emailTo" : {
            "description" : "When alert type is Email, then on rule violation the alert will be sent to these email ids.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "flowServiceName" : {
            "description" : "When alert type is Flow Service, then on rule violation this flow service will be invoked.",
            "type" : "string"
          },
          "runAsUser" : {
            "description" : "When alert type is Flow Service, then on rule violation the flow service will be invoked with this user.",
            "type" : "string"
          }
        }
      },
      "JDBCFunctionAliasPatchIn_Patch" : {
        "type" : "object",
        "properties" : {
          "pool" : {
            "description" : "Alias of the connection pool at which to point the function.",
            "type" : "string"
          },
          "failFastMode" : {
            "description" : "Whether fail-fast mode is enabled for the function.",
            "type" : "boolean"
          }
        }
      },
      "ScheduledTaskOut" : {
        "type" : "object",
        "properties" : {
          "taskId" : {
            "description" : "A unique ID for the task.",
            "type" : "string"
          },
          "type" : {
            "description" : "Type of the task.",
            "type" : "string",
            "enum" : [ "once", "repeat", "complex" ]
          },
          "description" : {
            "description" : "Description of the task.",
            "type" : "string"
          },
          "service" : {
            "description" : "Fully qualified name of the service that Integration Server executes.",
            "type" : "string"
          },
          "target" : {
            "description" : "Integration Server on which the task will run.",
            "type" : "string"
          },
          "inputs" : {
            "description" : "Input to the service that Integration Server executes.",
            "type" : "object"
          },
          "lateness" : {
            "description" : "The maximum number of minutes Integration Server waits to take the specified latenessAction, if the task is overdue. This applies to simple repeating and complex repeating tasks.",
            "type" : "integer",
            "format" : "int32"
          },
          "latenessAction" : {
            "description" : "The action Integration Server takes if the task is overdue. A value 0 means run immediately, 1 means run at next scheduled internal, 2 means suspend. This applies to simple repeating and complex repeating tasks.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 0, 1, 2 ]
          },
          "nextRun" : {
            "description" : "Next run in seconds for a task.",
            "type" : "number",
            "format" : "double"
          },
          "interval" : {
            "description" : "Execution interval in seconds. This applies to simple repeating tasks.",
            "type" : "integer",
            "format" : "int64"
          },
          "executionState" : {
            "description" : "Execution state of the task. Values can be: ready, running, or suspended.",
            "type" : "string"
          },
          "scheduledState" : {
            "description" : "Whether task is expired or unexpired.",
            "type" : "string"
          },
          "doNotOverlap" : {
            "description" : "Whether Integration Server waits for the previous execution of the service to complete before starting the next. This applies to simple repeating and complex repeating tasks.",
            "type" : "boolean"
          },
          "startDate" : {
            "description" : "Date of the first execution of the task.",
            "type" : "string"
          },
          "startTime" : {
            "description" : "Tme of the first execution of the task.",
            "type" : "string"
          },
          "endDate" : {
            "description" : "Date of the last execution of the task.",
            "type" : "string"
          },
          "endTime" : {
            "description" : "Time of the last execution of the task.",
            "type" : "string"
          },
          "minuteList" : {
            "description" : "List of specific minutes when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "hourList" : {
            "description" : "List of specific hours when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dayOfMonthList" : {
            "description" : "List of specific dates (1 - 31) when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "monthList" : {
            "description" : "List of specific months when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]
            }
          },
          "dayOfWeekList" : {
            "description" : "List of specific days of the week when a complex task will run.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
            }
          },
          "lastError" : {
            "description" : "Last localized Exception text.",
            "type" : "string"
          },
          "runAsUser" : {
            "description" : "User whose credentials are used to run the service.",
            "type" : "string"
          }
        }
      },
      "KeyAlias" : {
        "type" : "object",
        "properties" : {
          "keyAlias" : {
            "description" : "Key Alias",
            "type" : "string"
          },
          "password" : {
            "description" : "Password",
            "type" : "string"
          }
        }
      },
      "ServerLogDataOut" : {
        "type" : "object",
        "properties" : {
          "logEntries" : {
            "description" : "Server log display entries.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GrpcChannelServiceOut" : {
        "type" : "object",
        "properties" : {
          "serviceName" : {
            "description" : "Name of the service.",
            "type" : "string"
          },
          "providerDescriptor" : {
            "description" : "Name of the provider descriptor.",
            "type" : "string"
          },
          "methods" : {
            "description" : "All methods in the channel service",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GrpcChannelMethodOut"
            }
          }
        }
      },
      "MasterPasswordActionOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Message regarding action performed on the master password. ",
            "type" : "string"
          }
        }
      },
      "KeystoreIn" : {
        "type" : "object",
        "required" : [ "keyStoreName", "keyStoreType", "keyStoreProvider", "keyStoreLocation", "keyStorePassword", "configuredKeyAliases" ],
        "properties" : {
          "keyStoreName" : {
            "description" : "Alias for the keystore file.",
            "type" : "string"
          },
          "keyStoreDescription" : {
            "description" : "Description of the keystore alias. ",
            "type" : "string"
          },
          "keyStoreType" : {
            "description" : "Certificate file format of the keystore file.",
            "type" : "string",
            "enum" : [ "JKS", "PKCS12" ]
          },
          "keyStoreProvider" : {
            "description" : "Provider that is used for the keystore.",
            "type" : "string"
          },
          "keyStoreLocation" : {
            "description" : "Location of the keystore file on the server. This can be the full pathname or a relative path in relation to the Integration Server.",
            "type" : "string"
          },
          "keyStorePassword" : {
            "description" : "Password for the keystore file associated with this alias.",
            "type" : "string"
          },
          "configuredKeyAliases" : {
            "description" : "Key Aliases of the keystore. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyAlias"
            }
          },
          "isHsm" : {
            "description" : "Whether the keystore is stored on a Hardware Security Module (HSM) device.",
            "type" : "string",
            "enum" : [ "true", "false" ],
            "default" : "false"
          }
        }
      },
      "ServerAbout" : {
        "type" : "object",
        "properties" : {
          "productname" : {
            "description" : "Name of the product: Integration Server",
            "type" : "string"
          },
          "instancename" : {
            "description" : "Name of the Integration Server instance.",
            "type" : "string"
          },
          "version" : {
            "description" : "Integration Server version.",
            "type" : "string"
          },
          "build" : {
            "description" : "Integration Server build number.",
            "type" : "string"
          },
          "ssl" : {
            "description" : "Status of JCE Unlimited Strength policy.",
            "type" : "string"
          },
          "clustered" : {
            "description" : "Whether this instance is a member of an Integration Server cluster.",
            "type" : "boolean"
          },
          "restartStatus" : {
            "$ref" : "#/components/schemas/RestartStatus"
          },
          "systemAttrs" : {
            "$ref" : "#/components/schemas/SystemAttrs"
          },
          "systemInfo" : {
            "$ref" : "#/components/schemas/SystemInfo"
          },
          "securityProviders" : {
            "description" : "Security providers",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SecurityProviders"
            }
          }
        }
      },
      "GlobalVariableUpdateIn" : {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "description" : "Value of the global variable",
            "type" : "string"
          }
        }
      },
      "ExtendedSettingInput_Patch" : {
        "type" : "object",
        "properties" : {
          "settingName" : {
            "description" : "The name and value of the extended setting, i.e., watt.adminapi.group.readOnly=true ",
            "type" : "string"
          }
        }
      },
      "SingleSignOnOut" : {
        "type" : "object",
        "properties" : {
          "samlUrl" : {
            "description" : "URL Of the SAML resolver in My webMethods Server. ",
            "type" : "string",
            "default" : "http://localhost:8585/services/SAML"
          }
        }
      },
      "ScheduledTaskActionOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Message regarding the scheduled task action.",
            "type" : "string"
          }
        }
      },
      "CacheManagerOut" : {
        "type" : "object",
        "required" : [ "cacheManagerName" ],
        "properties" : {
          "cacheManagerName" : {
            "description" : "Name of the cache manager.",
            "type" : "string"
          },
          "tsaURL" : {
            "description" : "URL of a Terracotta Server Array.",
            "type" : "string"
          },
          "rejoin" : {
            "description" : "Whether to automatically rejoin a cluster if disconnected.",
            "type" : "boolean",
            "default" : true
          },
          "diskStorePath" : {
            "description" : "File system path of cache manager's disk store.",
            "type" : "string"
          },
          "isInternal" : {
            "description" : "Indicates if cache manager is part of the Integration Server product.",
            "type" : "boolean"
          },
          "totalBigMemory" : {
            "description" : "Total current BigMemory usage by all caches in the cache manager",
            "type" : "string"
          },
          "caches" : {
            "description" : "All caches in the cache manager",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/CacheOut"
              } ]
            }
          }
        }
      },
      "PackageUpdates" : {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "description" : "A package name",
            "type" : "string"
          },
          "packageUpdates" : {
            "description" : "The installed updates for a package",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ACLIn_Patch" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the access control list.",
            "type" : "string"
          },
          "allow" : {
            "description" : "List of groups whose members are allowed access to resources protected by the access control list.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "deny" : {
            "description" : "List of groups whose members are denied access to resources protected by the access control list.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "MQTTConnectionAliasInPatch_Patch" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "description" : "Description of the MQTT connection alias.",
            "type" : "string"
          },
          "clientId" : {
            "description" : "Connection client ID of the MQTT connection alias.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Package in which to store the MQTT connection alias.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name for client authentication.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for client authentication.",
            "type" : "string"
          },
          "host" : {
            "description" : "URL containing the protocol, domain, and port of the MQTT server to which connections created using the MQTT connection alias will connect.",
            "type" : "string"
          },
          "cleanSessionEnabled" : {
            "description" : "Indicates if clean sessions are used for subscriptions.",
            "type" : "boolean"
          },
          "timeout" : {
            "description" : "Maximum number of seconds that Integration Server waits for a network connection to the MQTT server to be established.",
            "type" : "string"
          },
          "keepAlive" : {
            "description" : "Maximum number of seconds that can elapse between messages being sent to or received from the MQTT server using a connection created for this MQTT connection alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "willEnabled" : {
            "description" : "Indicates whether the MQTT server sends a last will message on behalf of Integration Server if Integration Server disconnects abruptly from the MQTT server.",
            "type" : "boolean"
          },
          "willQos" : {
            "description" : "Quality of Service for the last-will message. Inputting '0' will create an \"At most once\" QoS. Inputting '1' will create an \"At least once\" QoS. Inputting '2' will create an \"Exactly once\" QoS.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 0, 1, 2 ]
          },
          "willRetain" : {
            "description" : "Whether the MQTT server retains the last will message.",
            "type" : "boolean"
          },
          "willTopic" : {
            "description" : "Topic to which the last will message is published. All subscribers to this topic will receive the last will message.",
            "type" : "string"
          },
          "willPayload" : {
            "description" : "Contents of the last will message.",
            "type" : "string"
          },
          "willOnConnectPayload" : {
            "description" : "Message to send upon successful connection to the MQTT server.",
            "type" : "string"
          },
          "willOnDisconnectPayload" : {
            "description" : "Message to send upon disconnecting from the MQTT server.",
            "type" : "string"
          },
          "useSSL" : {
            "description" : "Whether to use SSL to connect to the MQTT server.",
            "type" : "boolean"
          },
          "truststoreAlias" : {
            "description" : "Truststore alias to be used if SSL is enabled.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "Keystore alias to be used if SSL is enabled.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Alias to the private key associated with the keystore.",
            "type" : "string"
          }
        }
      },
      "PortLink" : {
        "type" : "object",
        "required" : [ "alias", "url" ],
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "alias" : {
            "description" : "The port alias.",
            "type" : "string"
          },
          "url" : {
            "description" : "The port URL.",
            "type" : "string"
          },
          "primary" : {
            "description" : "Whether this port is the primary port for Integration Server. Field is present only when true.",
            "type" : "boolean"
          },
          "diagnostic" : {
            "description" : "Indicates whether this port is the diagnostic port for Integration Server. Field is present only when true.",
            "type" : "boolean"
          }
        }
      },
      "ClientCertificates" : {
        "type" : "object",
        "required" : [ "certificates" ],
        "properties" : {
          "certificates" : {
            "description" : "The imported client certificates.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ClientCertificateOut"
            }
          }
        }
      },
      "OAuthScopeList" : {
        "type" : "object",
        "properties" : {
          "scopes" : {
            "description" : "List of scopes.",
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "scopeInputData" : {
            "$ref" : "#/components/schemas/OAuthScope"
          }
        }
      },
      "UpdateRuleIn_Patch" : {
        "type" : "object",
        "properties" : {
          "ruleType" : {
            "description" : "Type of the rule.",
            "type" : "string",
            "enum" : [ "DENY", "ALERT" ]
          },
          "ruleName" : {
            "description" : "Enterprise Gateway rule name.",
            "type" : "string"
          },
          "ruleDescription" : {
            "description" : "Rule description.",
            "type" : "string"
          },
          "isRuleEnabled" : {
            "description" : "Whether rule is enabled or disabled.",
            "type" : "boolean",
            "enum" : [ false, true ]
          },
          "requestType" : {
            "description" : "The rule will be applicable only for selected request types.",
            "type" : "string",
            "enum" : [ "ALL", "INVOKE", "REST", "SOAP" ]
          },
          "resourcePath" : {
            "description" : "List of resources for which this rule will be applicable.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "customErrorMessage" : {
            "description" : "The custom error message to send to the clients, when the rule gets violated.",
            "type" : "string"
          },
          "action" : {
            "description" : "Action to be taken on rule violation.",
            "type" : "string",
            "enum" : [ "DENY", "ALERT" ]
          },
          "filters" : {
            "$ref" : "#/components/schemas/FiltersInOut"
          }
        }
      },
      "MessagingConditionDetailsOut" : {
        "type" : "object",
        "properties" : {
          "documentType" : {
            "description" : "Name of the publishable document type used in the condition for the webMethods messaging trigger.",
            "type" : "string"
          },
          "filter" : {
            "description" : "For a trigger that receives documents from Broker, the filter that Broker and/or Integration Server applies to each received document. For a trigger that receives documents from Universal Messaging, the local filter that Integration Server applies to  each received document.",
            "type" : "string"
          },
          "umFilter" : {
            "description" : "For a trigger that receives documents from Universal Messaging, the provider filter that Universal Messaging applies to each received document.",
            "type" : "string"
          }
        }
      },
      "OAuthScope_Patch" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Specifies a unique name for the scope.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the scope.",
            "type" : "string"
          },
          "urlTemplates" : {
            "description" : "Specifies the list of folders and individual services that the client can access on behalf of the resource owner.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "FoldersAndServices" : {
            "description" : "Specifies a URL template for each HTTP method.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "OAuthScope" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Specifies a unique name for the scope.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the scope.",
            "type" : "string"
          },
          "urlTemplates" : {
            "description" : "Specifies the list of folders and individual services that the client can access on behalf of the resource owner.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "FoldersAndServices" : {
            "description" : "Specifies a URL template for each HTTP method.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "QuiesceDetail" : {
        "type" : "object",
        "properties" : {
          "isQuiesceMode" : {
            "description" : "Whether this instance of Integration Server is in quiesce mode.",
            "type" : "boolean"
          },
          "mode" : {
            "description" : "Mode for this instance of Integration Server where mode can be QUIESCE or ACTIVE.",
            "type" : "string",
            "enum" : [ "QUIESCE", "ACTIVE" ]
          },
          "isIntegrationAgent" : {
            "description" : "Whether this is an Integration Agent.",
            "type" : "boolean"
          },
          "port" : {
            "$ref" : "#/components/schemas/QuiescePortDetails"
          },
          "options" : {
            "$ref" : "#/components/schemas/QuiesceOptions"
          }
        }
      },
      "PasswordExpiration" : {
        "type" : "object",
        "properties" : {
          "expirationEnabled" : {
            "description" : "Whether password expiration is enabled.",
            "type" : "boolean"
          },
          "expirationInterval" : {
            "description" : "Number of days after which a password expires.",
            "type" : "integer",
            "format" : "int32"
          },
          "noticeEmailAddresses" : {
            "description" : "Email addresses to which a password expiration notice is sent.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "daysToExpireNotice" : {
            "description" : "Number of days before password expiration that Integration Sever sends email notices.",
            "type" : "integer",
            "format" : "int32"
          },
          "applicableUsers" : {
            "description" : "User accounts to which password expiration settings apply.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JDBCDriverAliasUpdateOut" : {
        "type" : "object",
        "required" : [ "message", "name" ],
        "properties" : {
          "message" : {
            "description" : "Success message, including any action needed for the updates to take effect.",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the JDBC driver alias.",
            "type" : "string"
          },
          "className" : {
            "description" : "Java class name for the JDBC driver.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JDBC driver alias.",
            "type" : "string"
          }
        }
      },
      "LdapConfigurationIn" : {
        "type" : "object",
        "required" : [ "url", "principal", "credential", "useAffix", "groupID" ],
        "properties" : {
          "url" : {
            "description" : "Complete URL of the LDAP server. The URL has the format protocol://hostname:portnumber",
            "type" : "string"
          },
          "principal" : {
            "description" : "The user ID the Integration Server supplies to connect to the LDAP server",
            "type" : "string"
          },
          "credential" : {
            "description" : "The password that Integration Server supplies to connect to the LDAP server, that is, the Principal's password.",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Maximum number of seconds Integration Server will wait while trying to connect to the LDAP server. After this time has passed, the Integration Server will try the\r\nnext configured LDAP server on the list.",
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          },
          "poolMin" : {
            "description" : "Minimum number of connections allowed in\r\nthe pool that the Integration Server maintains for\r\nconnecting to the LDAP server.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "poolMax" : {
            "description" : "Maximum number of connections allowed in\r\nthe pool that the Integration Server maintains for\r\nconnecting to the LDAP server.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "useAffix" : {
            "description" : "Whether to build a distinguished name by adding a prefix and suffix. Specify true to build a distinguished name by adding a prefix and suffix to the user name. Specify false to build a query that searches a specified root directory\r\nfor the user.",
            "type" : "boolean"
          },
          "dnPrefix" : {
            "description" : "String that specifies the beginning of a DN to pass to the LDAP server.",
            "type" : "string"
          },
          "dnSuffix" : {
            "description" : "String that specifies the end of a DN to pass to the LDAP server.",
            "type" : "string"
          },
          "userID" : {
            "description" : "Identifies an LDAP userid, such as cn or uid.",
            "type" : "string"
          },
          "userRootDN" : {
            "description" : "The full distinguished name of the location at which Integration Server is to start searching on the LDAP server. Integration Server will issue a query that starts searching for users in the entered directory.",
            "type" : "string"
          },
          "userEmail" : {
            "description" : "Name of the attribute that contains the email address of the user in LDAP server.",
            "type" : "string"
          },
          "group" : {
            "description" : "Integration Server group with which the user is associated.",
            "type" : "string"
          },
          "memberAttribute" : {
            "description" : "Name of the attribute in a group's directory entry that identifies each member of the group.",
            "type" : "string"
          },
          "groupID" : {
            "description" : "Identifies an LDAP group, such as CN.",
            "type" : "string"
          },
          "groupRootDN" : {
            "description" : "The full distinguished name of the location at which Integration Server is to start searching on the LDAP server. Integration Server will issue a query that starts searching for the group in the entered directory.",
            "type" : "string"
          }
        }
      },
      "HttpPortInUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "diagnostic" : {
            "description" : "Indicates whether this port is the diagnostic port for Integration Server.",
            "type" : "boolean"
          },
          "packageName" : {
            "description" : "The package with which the port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port.",
            "type" : "string",
            "enum" : [ "basic", "digest", "requestKerberos", "requireKerberos" ]
          },
          "backlog" : {
            "description" : "When the port is suspended or receives requests faster than can be processed, indicates the maximum number of requests that can be queued.",
            "type" : "integer",
            "format" : "int32"
          },
          "keepAliveTimeout" : {
            "description" : "The length of time, in milliseconds, that idle client connections will be kept open on the port.",
            "type" : "integer",
            "format" : "int64"
          },
          "threadPool" : {
            "description" : "Whether the port has its own pool of threads.",
            "type" : "boolean"
          },
          "minThread" : {
            "description" : "If threadPool is true, the minimum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxThread" : {
            "description" : "If threadPool is true, the maximum number of threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "threadPriority" : {
            "description" : "If threadPool is true, the priority of the threads in the port thread pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "delay" : {
            "description" : "The number of milliseconds to delay before processing each request received on the port.",
            "type" : "integer",
            "format" : "int64"
          },
          "kerberos" : {
            "$ref" : "#/components/schemas/KerberosSettings"
          }
        }
      },
      "PasswordRestriction" : {
        "type" : "object",
        "properties" : {
          "changeEnabled" : {
            "description" : "Whether users can change their passwords.",
            "type" : "boolean"
          },
          "enforcementMode" : {
            "description" : "Whether Administrators can choose passwords that do not meet the password restriction settings. lax indicates password restrictions are not enforced for Administrators. strict indicates password restrictions are enforced for Administrators.",
            "type" : "string",
            "enum" : [ "lax", "strict" ]
          },
          "minLength" : {
            "description" : "Minimum number of characters.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxLength" : {
            "description" : "Maximum number of characters.",
            "type" : "integer",
            "format" : "int32"
          },
          "minUppercaseChars" : {
            "description" : "Minimum number of uppercase characters.",
            "type" : "integer",
            "format" : "int32"
          },
          "minLowercaseChars" : {
            "description" : "Minimum number of lowercase characters.",
            "type" : "integer",
            "format" : "int32"
          },
          "minDigits" : {
            "description" : "Minimum number of digits.",
            "type" : "integer",
            "format" : "int32"
          },
          "minSpecialChars" : {
            "description" : "Minimum number of special characters (neither alphabetic nor digits).",
            "type" : "integer",
            "format" : "int32"
          },
          "maxIdenticalChars" : {
            "description" : "Maximum number of identical characters in a row.",
            "type" : "integer",
            "format" : "int32"
          },
          "passwordHistoryLength" : {
            "description" : "Number of old passwords to remember per user.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EmailPortInOut" : {
        "type" : "object",
        "required" : [ "alias", "packageName", "host", "user", "interval" ],
        "properties" : {
          "alias" : {
            "description" : "An alias for the port that is unique for this Integration Server.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Package with which this port is associated.",
            "type" : "string"
          },
          "host" : {
            "description" : "Name of the machine on which the IMAP or POP3 mail server is running.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name that Integration Server must use to log on to the mail server.",
            "type" : "string"
          },
          "interval" : {
            "description" : "Frequency, in seconds, with which Integration Server checks the mail server for incoming email messages.",
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "type" : {
            "description" : "The type of mail server from which the email port will receive requests. Specify IMAP or POP3.",
            "type" : "string",
            "enum" : [ "IMAP", "POP3", "imap", "pop3" ],
            "default" : "IMAP"
          },
          "serverPort" : {
            "description" : "The port on which the mail server listens for requests.",
            "type" : "integer",
            "format" : "int32"
          },
          "authentication" : {
            "description" : "The type of authentication that Integration Server should use to connect to the specified e-mail server. Select Basic Authentication or OAuth",
            "type" : "string",
            "enum" : [ "Basic", "OAuth" ],
            "default" : "Basic"
          },
          "password" : {
            "description" : "The password the user name used to log on to the mail server.This field applies only to Basic Authentication.",
            "type" : "string"
          },
          "authURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request authorization code.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientID" : {
            "description" : "The unique public identifier that the OAuth server generates for Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The unique string that the OAuth server provides to Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "scope" : {
            "description" : "The e-mail server access permissions configured for Integration Server during registration. You can specify multiple scopes separated by a space.This field applies only to OAuth.",
            "type" : "string"
          },
          "accessTokenURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request an access token from the OAuth server.This field applies only to OAuth.",
            "type" : "string"
          },
          "redirectURL" : {
            "description" : "The URL that the OAuth server must use to send authentication responses to Integration Server.This field applies only to OAuth.",
            "type" : "string"
          },
          "tlsSettings" : {
            "description" : "The type of SSL encryption that Integration Server uses when communicating with an email server. You can configure the port to use None , Explicit, or Implicit.",
            "type" : "string",
            "enum" : [ "None", "Explicit", "Implicit" ],
            "default" : "None"
          },
          "trustStore" : {
            "description" : "Alias for the truststore that contains certificates presented by the email server to Integration Server.",
            "type" : "string"
          },
          "logout" : {
            "description" : "For use with IMAP and multi-threading only. Whether you want your server to log out after checking for mail.",
            "type" : "boolean",
            "default" : false
          },
          "runAsUser" : {
            "description" : "The user name under which requested services are to run.",
            "type" : "string"
          },
          "authenticateWithMessage" : {
            "description" : "When set to true, Integration Server checks for $user and $pass parameters in the Subject line of the email. The user name is the user under which the service is to run on Integration Server. When set to false, specify the user in the runAsUser field.",
            "type" : "boolean",
            "default" : true
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean",
            "default" : true
          },
          "globalService" : {
            "description" : "The service that you want Integration Server to execute for every email request.",
            "type" : "string"
          },
          "defaultService" : {
            "description" : "The service that you want Integration Server to execute if the email message does not supply a valid service in the subject line and the globalService field is blank.",
            "type" : "string"
          },
          "reply" : {
            "description" : "Whether you want Integration Server to send any output that the service generates to the original sender in an email attachment.",
            "type" : "boolean",
            "default" : false
          },
          "replyOnError" : {
            "description" : "Whether you want Integration Server to report errors to the original sender in the body portion of an email.",
            "type" : "boolean",
            "default" : false
          },
          "remove" : {
            "description" : "Whether you want Integration Server to delete a valid email from the IMAP server once Integration Server has successfully received the email.",
            "type" : "boolean",
            "default" : true
          },
          "deleteInvalid" : {
            "description" : "Whether you want Integration Server to delete invalid emails from the IMAP server.",
            "type" : "boolean",
            "default" : true
          },
          "multiThreaded" : {
            "description" : "Whether you want Integration Server to use multiple threads for this port.",
            "type" : "boolean",
            "default" : false
          },
          "numThreads" : {
            "description" : "The number of threads you want Integration Server to use for this port. This field is applicable only if multiThreaded is true.",
            "type" : "integer",
            "format" : "int32"
          },
          "invokePerPart" : {
            "description" : "Whether Integration Server invokes the service for each part of a multipart message or just once for the entire message.",
            "type" : "boolean",
            "default" : true
          },
          "includeHeaders" : {
            "description" : "Whether Integration Server includes the email headers when passing an email message to the content handler.",
            "type" : "boolean",
            "default" : false
          },
          "urlEncodedBody" : {
            "description" : "Whether the email body contains URL-encoded input parameters to be decoded into IData, placed in the pipeline, and passed to the service.",
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "EmailPortsOut" : {
        "type" : "object",
        "properties" : {
          "emailPorts" : {
            "description" : "All email ports",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/EmailPortInOut"
              } ]
            }
          }
        }
      },
      "Packages" : {
        "type" : "object",
        "properties" : {
          "packages" : {
            "description" : "All installed, activated packages.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/PackageInfoOut"
              } ]
            }
          }
        }
      },
      "AuditLoggerDataIn_Patch" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether the audit logger is enabled.",
            "type" : "boolean"
          },
          "database" : {
            "description" : "Whether the audit logger writes to a database instead of a file.",
            "type" : "boolean"
          },
          "asynchronous" : {
            "description" : "Whether the audit logger is asynchronous.",
            "type" : "boolean"
          },
          "guaranteed" : {
            "description" : "Whether the audit logger keeps the internal queue on disk.",
            "type" : "boolean"
          },
          "maxQueueSize" : {
            "description" : "Maximum number of log entries for the internal queue.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxRetries" : {
            "description" : "Maximum times the audit logger should retry writing the entry to the destination if the first attempt fails because of a transient error.",
            "type" : "integer",
            "format" : "int32"
          },
          "retryWait" : {
            "description" : "Number of seconds the audit logger waits between tries to connect to the database. ",
            "type" : "integer",
            "format" : "int64"
          },
          "level" : {
            "description" : "The log level for the audit logger. This applies to the messaging audit logger.",
            "type" : "string"
          },
          "connectionAlias" : {
            "description" : "Universal Messaging connection alias the audit logger uses to the audit logging queue on Universal Messaging.",
            "type" : "string"
          },
          "queueType" : {
            "description" : "Whether the audit logging queue for the audit logger is an internal, light-weight queue or a Universal Messaging queue.",
            "type" : "string",
            "enum" : [ "um", "lwq" ]
          },
          "readerThreads" : {
            "description" : "Number of threads that Integration Server uses to retrieve log entries from the Universal Messaging queue and then write the log entries to the audit logger destination.",
            "type" : "integer",
            "format" : "int32"
          },
          "securityCategories" : {
            "description" : "Security actions for which to log security-related events. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditLoggerCategories"
            }
          },
          "startup" : {
            "description" : "Whether the security audit logger writes security events that occur during Integration Server startup.",
            "type" : "string"
          },
          "logLevel" : {
            "description" : "The logging level for the messaging audit logger.",
            "type" : "string"
          }
        }
      },
      "HttpPortList" : {
        "type" : "object",
        "properties" : {
          "ports" : {
            "description" : "The list of HTTP ports.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PortLink"
              }, {
                "$ref" : "#/components/schemas/HttpPort"
              } ]
            }
          }
        }
      },
      "LicenseUpdateIn_Patch" : {
        "type" : "object",
        "properties" : {
          "licenseKeyFile" : {
            "description" : "The path to where the license key file is stored.",
            "type" : "string"
          },
          "terracottaLicenseFile" : {
            "description" : "The path to where the Terracotta license file is stored",
            "type" : "string"
          }
        }
      },
      "SessionIn" : {
        "type" : "object",
        "required" : [ "sessionTimeoutMinutes", "sessionLimitEnable", "sessionMax", "sessionWarningPercentage" ],
        "properties" : {
          "sessionTimeoutMinutes" : {
            "description" : "Number of minutes after which an idle user session times out.",
            "type" : "integer",
            "format" : "int64"
          },
          "sessionLimitEnable" : {
            "description" : "Whether Integration Server limits the number of concurrent stateful sessions.",
            "type" : "string"
          },
          "sessionMax" : {
            "description" : "Maximum number of concurrent stateful sessions allowed on Integration Server.",
            "type" : "integer",
            "format" : "int64"
          },
          "sessionWarningPercentage" : {
            "description" : "Threshold, expressed as a percentage of sessionMax, at which Integration Server starts to warn of insufficient available stateful sessions.",
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ScheduledTaskPutIn" : {
        "type" : "object",
        "required" : [ "type", "service", "runAsUser" ],
        "properties" : {
          "type" : {
            "description" : "Type of the task.",
            "type" : "string",
            "enum" : [ "once", "repeat", "complex" ]
          },
          "service" : {
            "description" : "Fully qualified name of the service that Integration Server executes.",
            "type" : "string"
          },
          "runAsUser" : {
            "description" : "User whose credentials are used to run the service.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the task.",
            "type" : "string"
          },
          "target" : {
            "description" : "Integration Server on which the task will run. Set to $any for any server connected to the database, $all for all servers in a cluster of Integration Servers, or the specific server name. ",
            "type" : "string"
          },
          "inputs" : {
            "description" : "Input to the service that Integration Server will execute.",
            "type" : "object"
          },
          "lateness" : {
            "description" : "The maximum number of minutes Integration Server waits before taking the specified latenessAction, if the task is overdue. This applies to simple repeating and complex repeating tasks.",
            "type" : "integer",
            "format" : "int32"
          },
          "latenessAction" : {
            "description" : "The action Integration Server performs if the task is overdue. Set to 0 for run immediately, 1 for run at next scheduled interval, 2 for suspend. This applies to simple repeating and complex repeating tasks.",
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 0, 1, 2 ]
          },
          "interval" : {
            "description" : "Execution interval in seconds. This applies to simple repeating tasks.",
            "type" : "integer",
            "format" : "int64"
          },
          "doNotOverlap" : {
            "description" : "Whether Integration Server waits for the previous execution of the service to complete before starting the next. This applies to simple repeating and complex repeating tasks.",
            "type" : "boolean"
          },
          "startDate" : {
            "description" : "Date of the first execution in the format YYYY/MM/DD. The startDate is required for a one-time task.",
            "type" : "string"
          },
          "startTime" : {
            "description" : "Time of the first execution in the format HH:MM:SS. The startTime is required for a one-time task.",
            "type" : "string"
          },
          "endDate" : {
            "description" : "Date of the last execution in the format YYYY/MM/D. This field applies to repeating tasks only.",
            "type" : "string"
          },
          "endTime" : {
            "description" : "Time of the last execution in the format HH:MM:SS. This field applies to repeating tasks only.",
            "type" : "string"
          },
          "delay" : {
            "description" : "Delay in seconds, if startDate is not specified for a repeating or complex task. If startDate is not provided, then Integration Server calculates the start date as system time plus delay value.",
            "type" : "integer",
            "format" : "int64"
          },
          "minuteList" : {
            "description" : "List of specific minutes when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "hourList" : {
            "description" : "List of specific hours when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dayOfMonthList" : {
            "description" : "List of specific dates (1 - 31) when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "monthList" : {
            "description" : "List of specific months when a complex repeating task will run.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]
            }
          },
          "dayOfWeekList" : {
            "description" : "List of specific days of the week when a complex task will run.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
            }
          }
        }
      },
      "UpdateRuleIn" : {
        "type" : "object",
        "required" : [ "ruleType", "ruleName" ],
        "properties" : {
          "ruleType" : {
            "description" : "Type of the rule.",
            "type" : "string",
            "enum" : [ "DENY", "ALERT" ]
          },
          "ruleName" : {
            "description" : "Enterprise Gateway rule name.",
            "type" : "string"
          },
          "ruleDescription" : {
            "description" : "Rule description.",
            "type" : "string"
          },
          "isRuleEnabled" : {
            "description" : "Whether rule is enabled or disabled.",
            "type" : "boolean",
            "enum" : [ false, true ],
            "default" : false
          },
          "requestType" : {
            "description" : "The rule will be applicable only for selected request types.",
            "type" : "string",
            "enum" : [ "ALL", "INVOKE", "REST", "SOAP" ],
            "default" : "ALL"
          },
          "resourcePath" : {
            "description" : "List of resources for which this rule will be applicable.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "customErrorMessage" : {
            "description" : "The custom error message to send to the clients, when the rule gets violated.",
            "type" : "string"
          },
          "action" : {
            "description" : "Action to be taken on rule violation.",
            "type" : "string",
            "enum" : [ "DENY", "ALERT" ],
            "default" : "DENY"
          },
          "filters" : {
            "$ref" : "#/components/schemas/FiltersInOut"
          }
        }
      },
      "MessagingConnectionAliasOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the webMethods messaging connection alias..",
            "type" : "string"
          },
          "connected" : {
            "description" : "Whether the webMethods messaging connection alias is connected.",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Whether the webMethods messaging connection alias is enabled.",
            "type" : "boolean"
          },
          "csqCount" : {
            "description" : "The number of messages in the client side queue (CSQ) for this alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "description" : "The type of webMethods messaging connection alias.",
            "type" : "string"
          },
          "hasTriggers" : {
            "description" : "Whether the webMethods messaging connection alias has triggers associated with it.",
            "type" : "boolean"
          },
          "isUpdated" : {
            "description" : "Whether the alias is updated. This is only applicable to an alias of type BROKER.",
            "type" : "boolean"
          },
          "lastError" : {
            "description" : "The most recent error related to the webMethods messaging connection alias.",
            "type" : "string"
          },
          "isDefault" : {
            "description" : "Whether this webMethods messaging  connection alias is the default alias.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of this alias.",
            "type" : "string"
          },
          "clientPrefix" : {
            "description" : "A string that identifies the Integration Server to the webMethods messaging provider (Universal Messaging or Broker).",
            "type" : "string"
          },
          "clientPrefixShared" : {
            "description" : "Whether Integration Server shares the client prefix with multiple Integration Servers and you want to prevent automatic updates, including deletions, to shared objects associated with this alias on Universal Messaging server or Broker.",
            "type" : "boolean"
          },
          "brokerHost" : {
            "description" : "Name (DNSname: port or ipaddress: port) of the machine on which the Broker Server resides. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "brokerName" : {
            "description" : "Name of the Broker as defined on the Broker Server. The default name is Broker #1. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "clientGroup" : {
            "description" : "Broker client group to which this Integration Server belongs. Applicable for type BROKER only.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication an Integration Server client will use to connect to the Broker.The value SSL is only applicable for an alias of type BROKER. The value CERTIFICATE_BASED is only applicable for aliases of type UM.",
            "type" : "string"
          },
          "user" : {
            "description" : "Username for basic authentication.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for basic authentication.",
            "type" : "string"
          },
          "useCsq" : {
            "description" : "Whether a client side queue is used with this Universal Messaging connection alias.Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "csqSize" : {
            "description" : "The maximum number of documents (messages) that can exist in the client side queue for this Universal Messaging connection alias.  Leave empty for a value of UNLIMITED. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32"
          },
          "csqDrainInOrder" : {
            "description" : "Whether Integration Server drains the client side queue for this alias by sending the messages to the Universal Messaging server in the same order in which Integration Server placed the messages in the client side queue. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "publishWaitTime" : {
            "description" : "Number of milliseconds that a publishing service using this Universal Messaging connection alias will wait for a connection to the Universal Messaging server to be re-established after the connection fails. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32"
          },
          "followTheMasterProducers" : {
            "description" : "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to send messages. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "enableRequestReply" : {
            "description" : "Whether a request/reply channel is created for this Universal Messaging connection alias on Universal Messaging and whether a listener for replies is created on Integration Server. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "followTheMasterConsumers" : {
            "description" : "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to retrieve messages. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "realmUrl" : {
            "description" : "The URL for the Universal Messaging server in the format nsp:// UM_host: UM_port (for example, nsp://127.0.0.1:9000 or nsp://localhost:9000). Applicable for type UM only.",
            "type" : "string"
          },
          "maxRetryAttempts" : {
            "description" : "Maximum number of reconnection attempts that Integration Server makes if the connection to Universal Messaging fails. The default is 5 attempts. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32"
          },
          "loggingType" : {
            "description" : "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this messaging connection alias to send and/or receive documents. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "enableProducerMessageTracking" : {
            "description" : "When set to true, indicates that Integration Server writes additional log messages when a message producer uses this connection alias to publish documents that are instances of the publishable document types listed in producerIncludedStrings. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "producerIncludedStrings" : {
            "description" : "Name of each channel that corresponds to a publishable document type for which Integration Server performs additional logging during publication. Use a semicolon (;) to separate each destination name. A value of [ALL] indicates that Integration Server performs enhanced logging for every channel to which this connection alias sends messages. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "enableConsumerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this messaging connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerIncludedStrings. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "consumerIncludedStrings" : {
            "description" : "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this connection alias to receive messages. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "keystore" : {
            "description" : "The full path to the keystore file for this Integration Server. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "keystoreType" : {
            "description" : "The file type of the keystore file for Integration Server. The file type can be either PKCS12. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "keystorePassword" : {
            "description" : "Password required to access the SSL certificate in the keystore file for Integration Server. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "encrypted" : {
            "description" : "Specifies whether or not to encrypt the connection between the Integration Server and the Broker. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "truststore" : {
            "description" : "The full path to the truststore file for the Integration Server client. Applicable if encrypted is true. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "truststoreType" : {
            "description" : "The file type of the truststore file for Integration Server. The file type is JKS. Applicable if encrypted is true. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "The alias for the keystore that contains the client certificates that you want Integration Server to use when connecting to the Universal Messaging port. You must set a keystoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "The alias to the key that contains the private key for connecting to the Universal Messaging port securely. The key alias must be in the keystore specified in field keystoreAlias. Applicable alias of for type UM only.",
            "type" : "string"
          },
          "truststoreAlias" : {
            "description" : "The alias for the truststore that contains the certificate authority (CA) certificates for the Universal Messaging server. You must set a truststoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. You must also set a truststoreAlias if the protocol specified for Realm URL is nsps or nhps. Applicable for alias of type UM only.",
            "type" : "string"
          }
        }
      },
      "RulesOut" : {
        "type" : "object",
        "properties" : {
          "denyRuleList" : {
            "description" : "List of deny rules.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RuleOut"
            }
          },
          "alertRuleList" : {
            "description" : "List of alert rules.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RuleOut"
            }
          }
        }
      },
      "SalesInformation" : {
        "type" : "object",
        "properties" : {
          "serialNumber" : {
            "description" : "License serial number. ",
            "type" : "integer",
            "format" : "int64"
          },
          "licenseKey" : {
            "description" : "License key for the license. ",
            "type" : "string"
          },
          "customerID" : {
            "description" : "Customer ID associated with the license.",
            "type" : "string"
          },
          "customerName" : {
            "description" : "Customer name on the license.",
            "type" : "string"
          },
          "contractDetails" : {
            "description" : "Contract details used for delivery.",
            "type" : "string"
          },
          "licenseTypeDetails" : {
            "description" : "License type, either external or internal.",
            "type" : "string"
          },
          "autoCallHome" : {
            "description" : "Whether auto call home is activated.",
            "type" : "boolean"
          }
        }
      },
      "PortList" : {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "description" : "If the response is for the list of ports in a package, this field identifies the package. If the response is for all ports in Integration Server, this field will not be present.",
            "type" : "string"
          },
          "ports" : {
            "description" : "The list of ports.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PortLink"
            }
          }
        }
      },
      "CommonOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Success or error message.",
            "type" : "string"
          },
          "status" : {
            "description" : "Success or error status.",
            "type" : "string"
          }
        }
      },
      "LoginAttemptFrequency" : {
        "type" : "object",
        "properties" : {
          "loginCount" : {
            "description" : "Number of incorrect login attempts allowed during the specified timeDuration before Integration Server locks the account.",
            "type" : "integer",
            "format" : "int32"
          },
          "timeDuration" : {
            "$ref" : "#/components/schemas/TimeDuration"
          }
        }
      },
      "JMSConnectionAliasIn" : {
        "type" : "object",
        "required" : [ "name", "description", "clientId", "connectionFactoryLookupName" ],
        "properties" : {
          "name" : {
            "description" : "Name of the JMS connection alias.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the JMS connection alias.",
            "type" : "string"
          },
          "transactionType" : {
            "description" : "The type of transaction for sessions that use this JMS connection alias. ",
            "type" : "string",
            "enum" : [ "NO_TRANSACTION", "LOCAL_TRANSACTION", "XA_TRANSACTION" ],
            "default" : "NO_TRANSACTION"
          },
          "clientId" : {
            "description" : "The JMS client identifier associated with the connections established by this JMS connection alias. The clientId must be specified when createConnectionUsing is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name required to acquire a connection from the connection factory.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password required to acquire a connection from the connection factory.",
            "type" : "string"
          },
          "createConnectionUsing" : {
            "description" : "How administered objects (connection factories and destinations) will be looked up.",
            "type" : "string",
            "enum" : [ "JNDI_LOOKUP", "NATIVE_WEBMETHODS_API" ],
            "default" : "JNDI_LOOKUP"
          },
          "jndiAliasName" : {
            "description" : "Alias to the JNDI provider that the JMS connection alias uses to look up administered objects. This field applies only when the JMS connection alias createConnectionUsing value is JNDI_LOOKUP.",
            "type" : "string"
          },
          "connectionFactoryLookupName" : {
            "description" : "Lookup name for the connection factory that you want to use to create a connection to the JMS provider specified in this JMS connection alias. This field applies only when the JMS connection alias createConnectionUsing value is JNDI_LOOKUP.",
            "type" : "string"
          },
          "createAdministeredObjectsOnDemand" : {
            "description" : "Whether Integration Server creates a connection factory or destination on the JNDI provider if the object is not found at the time Integration Server looks up the object. This field applies only when the JMS provider is Universal Messaging.",
            "type" : "boolean"
          },
          "enableFollowTheMaster" : {
            "description" : "Whether Integration Server always connects to the master realm server in the Universal Messaging cluster. This setting affects producer and consumer connections created using this JMS connection alias.",
            "type" : "boolean",
            "default" : true
          },
          "monitorWmConnectionFactory" : {
            "description" : "How Integration Server monitors the webMethods connection factory object on the JNDI server for changes where: NONE means no monitoring is done, CLIENT_POLL corresponds to specifying an interval for poll changes (connectionFactoryPollInterval) , JNDI_POLL corresponds to polling for changes with an interval defined by webMethods Connection Factory , and LISTENER corresponds to monitoring the connection factory by registering an event listener. This field applies only when the JMS connection alias createConnectionUsing value is JNDI_LOOKUP and Broker is the JMS provider.",
            "type" : "string",
            "enum" : [ "NONE", "CLIENT_POLL", "JNDI_POLL", "LISTENER" ],
            "default" : "NONE"
          },
          "connectionFactoryPollingInterval" : {
            "description" : "Number of minutes between polling attempts. The polling interval must be a positive integer. This field is required when monitorWmConnectionFactory is set to CLIENT_POLL. This field applies only when the createConnectionUsing value is JNDI_LOOKUP and the Broker is the JMS provider.",
            "type" : "integer",
            "format" : "int32",
            "default" : 60
          },
          "brokerHost" : {
            "description" : "Name (DNSname:port or ipaddress:port) of the machine on which the Broker Server acting as the JMS provider resides. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "default" : "localhost:6849"
          },
          "brokerName" : {
            "description" : "Name of the Broker as defined on the Broker Server. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "default" : "Broker #1"
          },
          "clientGroup" : {
            "description" : "Name of the client group to which you want Integration Server to belong when it acts as a JMS client. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "default" : "IS-JMS"
          },
          "brokerList" : {
            "description" : "Comma-delimited list of Broker Servers on which the connection between the Integration Server (acting as the JMS client) and the webMethods Broker can exist. Use the following format: {Broker Name]@<host>[:port]. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "keystore" : {
            "description" : "Full path to this Integration Server's keystore file. The keystore field is required only when configuring an SSL connection to the Broker. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "keystoreType" : {
            "description" : "File type of the Integration Server's keystore file. The keystoreType is required only when configuring an SSL connection to the Broker This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "enum" : [ "PKCS12", "JKS" ]
          },
          "truststore" : {
            "description" : "The full path to this Integration Server client's trust store file. The trustore field is required only when configuring an SSL connection to the Broker. This field applies only when the  createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "trustoreType" : {
            "description" : "The file type of the Integration Server's trust store file, which is JKS. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "string",
            "default" : "JKS"
          },
          "encrypted" : {
            "description" : "Whether the connection between the Integration Server and the Broker is encrypted. This field applies only when the createConnectionUsing value is NATIVE_WEBMETHODS_API.",
            "type" : "boolean"
          },
          "classLoader" : {
            "description" : "Name of the class loader used with this JMS connection alias.",
            "type" : "string",
            "default" : "INTEGRATION_SERVER"
          },
          "maximumCsqSize" : {
            "description" : "Maximum number of messages that can exist in the client side queue for this JMS connection alias. A value of -1 indicates there is no limit.",
            "type" : "integer",
            "format" : "int32",
            "default" : -1
          },
          "csqDrainInOrder" : {
            "description" : "Whether Integration Server drains the client side queue by sending the messages to the JMS provider in the same order in which Integration Server placed the messages in the client side queue.",
            "type" : "boolean",
            "default" : true
          },
          "createTemporaryQueue" : {
            "description" : "Whether Integration Server creates a temporary queue on the JMS provider to handle request-reply operations that do not specify a replyTo destination.",
            "type" : "boolean",
            "default" : true
          },
          "enableRequestReplyListener" : {
            "description" : "Whether or not Integration Server creates a single dedicated MessageConsumer for receiving synchronous replies sent to the temporary queue for this JMS connection alias.",
            "type" : "boolean",
            "default" : false
          },
          "manageDestinations" : {
            "description" : "Whether users can use Designer to modify Destinations on Broker or Universal Messaging",
            "type" : "boolean",
            "default" : true
          },
          "createNewConnectionPerTrigger" : {
            "description" : "Whether Integration Server creates a separate connection to the JMS provider for each trigger.",
            "type" : "boolean",
            "default" : false
          },
          "producerCachingMode" : {
            "description" : "Whether caching of JMS Session and MessageProducer objects is enabled for this JMS connection alias.",
            "type" : "string",
            "enum" : [ "DISABLED", "ENABLED_PER_DESTINATION" ],
            "default" : "DISABLED"
          },
          "minPoolSizePerUnspecifiedDestination" : {
            "description" : "The minimum number of entries (JMS Session objects) for the default session pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxPoolSizePerUnspecifiedDestination" : {
            "description" : "The maximum number of entries (JMS Session objects) for the default session pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "minPoolSizePerDestination" : {
            "description" : "The minimum number of entries (Message Producers) in each destination-specific pool.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxPoolSizePerDestination" : {
            "description" : "The maximum number of entries in each destination-specific pool. A value of 0 (or blank) indicates that Integration Server does not create separate pools for any of the destinations.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "cacheProducersQueueList" : {
            "description" : "A semicolon-delimited list of the queues for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API. ",
            "type" : "string"
          },
          "destinationLookupNames" : {
            "description" : "A semicolon delimited list of the lookup names for the destinations for which Integration Server creates destination pools. This field applies only when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing value is JNDI_LOOKUP.",
            "type" : "string"
          },
          "cacheProducersTopicList" : {
            "description" : "A semicolon-delimited list of the topics for which Integration Server creates destination pools. This field only applies when producerCachingMode is set to ENABLED_PER_DESTINATION and createConnectionUsing is set to NATIVE_WEBMETHODS_API.",
            "type" : "string"
          },
          "idleTimeout" : {
            "description" : "The number of milliseconds before an inactive pool entry will be removed from the pool. This setting applies to the default pool as well as each destination specific pool.\nA value of 0 indicates that pool entries never expire. A value of -1 indicates the system default will be used. The system default is defined by setting watt.server.jms.producer.pooledSession.timeout which has a default value of 60000 ms.",
            "type" : "integer",
            "format" : "int32"
          },
          "producerMaxRetryAttempts" : {
            "description" : "The maximum number of times Integration Server automatically retries a pub.jms:send service that fails because of a transient error. Set to 0 to disable automatic retry for implementations of the pub.jms:send service that use this JMS connection alias.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "producerRetryInterval" : {
            "description" : "The number of milliseconds that Integration Server waits between attempts to retry a pub.jms:send service that uses this JMS connection alias.",
            "type" : "integer",
            "format" : "int32",
            "default" : 1000
          },
          "loggingType" : {
            "description" : "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this JMS connection alias to send and/or receive messages.",
            "type" : "string",
            "enum" : [ "SERVER_LOG", "MESSAGING_AUDIT_LOG" ]
          },
          "enableProducerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages when a message producer uses this JMS connection alias to send messages to a destination in producerIncludedStrings.",
            "type" : "boolean"
          },
          "producerIncludedStrings" : {
            "description" : "The destination names for which Integration Server performs additional logging when sending messages to the destination. Use a semicolon (;) to separate each destination name. A value of [ALL] indicates that Integration Server performs enhanced logging for every destination to which this JMS connection alias sends messages.",
            "type" : "string",
            "default" : "[ALL]"
          },
          "enableConsumerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this JMS connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerMessageIncludedStrings.",
            "type" : "boolean"
          },
          "consumerIncludedStrings" : {
            "description" : "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this JMS connection alias to receive messages.",
            "type" : "string",
            "default" : "[ALL]"
          }
        }
      },
      "RemoteServerData" : {
        "type" : "object",
        "required" : [ "alias", "host", "port", "user", "password" ],
        "properties" : {
          "alias" : {
            "description" : "Name of the alias.",
            "type" : "string"
          },
          "host" : {
            "description" : "Host Name or IP address of the remote server. ",
            "type" : "string"
          },
          "port" : {
            "description" : "Port number to which requests will be sent on the remote server. ",
            "type" : "integer",
            "format" : "int32"
          },
          "user" : {
            "description" : "User name for submitting requests. ",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for user account. ",
            "type" : "string"
          },
          "ssl" : {
            "description" : "Whether to use SSL to connect to the remote server. ",
            "type" : "boolean"
          },
          "keystoreAlias" : {
            "description" : "Keystore alias for the keystore containing the private keys and certificates used for authentication with the remote server. ",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "Key alias for a private key and associated certificate chain. ",
            "type" : "string"
          },
          "acl" : {
            "description" : "Execute ACL that determines which user groups can use the remote server alias. ",
            "type" : "string"
          },
          "keepAlive" : {
            "description" : "Maximum number of client keep alive connections that can be retained for reuse with the remote server. ",
            "type" : "integer",
            "format" : "int32"
          },
          "timeout" : {
            "description" : "Keep alive timeout (minutes) for an idle connection to the remote server.",
            "type" : "number",
            "format" : "float"
          },
          "retryServer" : {
            "description" : "Host name or IP address of a remote server to connect to if the local Integration Server cannot connect to primary remote server. ",
            "type" : "string"
          }
        }
      },
      "SchedulerActionOut" : {
        "type" : "object",
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "description" : "Message regarding the scheduler action.",
            "type" : "string"
          }
        }
      },
      "SFTPServerAliasPostIn" : {
        "type" : "object",
        "required" : [ "alias", "version", "hostName", "port" ],
        "properties" : {
          "alias" : {
            "description" : "Alias for the SFTP Server alias.",
            "type" : "string"
          },
          "version" : {
            "description" : "Version of SFTP Client.",
            "type" : "string",
            "enum" : [ "v1", "v2" ]
          },
          "hostName" : {
            "description" : "The host name or IP address of the SFTP server.",
            "type" : "string"
          },
          "port" : {
            "description" : "The port number of the SFTP server. The port number must be within the range of 0 and 65535 (inclusive).",
            "type" : "integer",
            "format" : "int32"
          },
          "hostKeyLocation" : {
            "description" : "Public key of the SFTP server.",
            "type" : "string"
          },
          "preferredKeyExchangeAlgorithms" : {
            "description" : "The algorithms that Integration Server presents to the SFTP server for key exchange.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "proxyAlias" : {
            "description" : "The proxy alias through which the request to the SFTP server is to be routed.",
            "type" : "string"
          },
          "preferredMACS2C" : {
            "description" : "A list of preferred server-to-client Message Authentication Code (MAC) algorithms.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredMACC2S" : {
            "description" : "A list of preferred client-to-server Message Authentication Code (MAC) algorithms.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredCiphersS2C" : {
            "description" : "A list of preferred server-to-client ciphers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredCiphersC2S" : {
            "description" : "A list of preferred client-to-server ciphers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "minDHKeySize" : {
            "description" : "The minimum DH key size. The default value is 1024. This field applies when the SFTP client version is v2.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxDHKeySize" : {
            "description" : "The maximum DH key size. The default value is 8192. This field applies when the SFTP client version is v2.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "KerberosSettings" : {
        "type" : "object",
        "properties" : {
          "jaasContext" : {
            "description" : "The custom JAAS context used for Kerberos authentication.",
            "type" : "string"
          },
          "clientPrincipal" : {
            "description" : "The principal to use for Kerberos authentication.",
            "type" : "string"
          },
          "clientPassword" : {
            "description" : "The password for the principal used for Kerberos authentication.",
            "type" : "string"
          },
          "servicePrincipalForm" : {
            "description" : "Displays username, which indicates that the principal name of the service is represented as a named user defined in the LDAP or central user directory used for authentication.",
            "type" : "string"
          },
          "servicePrincipal" : {
            "description" : "Specifies the service that the Kerberos client wants to access.",
            "type" : "string"
          }
        }
      },
      "MQTTConnectionAliasActionOut" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "description" : "Descriptive success or failure message after performing an action on an MQTT connection alias.",
            "type" : "string"
          }
        }
      },
      "JournalLoggerFacCode" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "Facility code.",
            "type" : "string"
          },
          "id" : {
            "description" : "Facility code ID used in server log, such as ISS, ISP, or ISC.",
            "type" : "string"
          },
          "desc" : {
            "description" : "Facility code description.",
            "type" : "string"
          },
          "threshold" : {
            "description" : "Facility code logging level.",
            "type" : "string"
          }
        }
      },
      "ClientCertificateIn" : {
        "type" : "object",
        "required" : [ "filePath", "user", "usage" ],
        "properties" : {
          "filePath" : {
            "description" : "File path to the client certificate to import.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name to map to the client certificate.",
            "type" : "string"
          },
          "usage" : {
            "description" : "Purpose of the client certificate.",
            "type" : "string",
            "enum" : [ "SSL Authentication", "Verify", "Encrypt", "Verify and Encrypt", "Message Authentication" ]
          }
        }
      },
      "ScheduledTasksOut" : {
        "type" : "object",
        "properties" : {
          "scheduledTasks" : {
            "description" : "All scheduled user tasks",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/ScheduledTaskOut"
              } ]
            }
          }
        }
      },
      "ClientCertificateUpdateOut" : {
        "type" : "object",
        "properties" : {
          "oldUsage" : {
            "description" : "Previous usage for the client certificate.",
            "type" : "string"
          },
          "usage" : {
            "description" : "Current usage for the client certificate.",
            "type" : "string"
          },
          "message" : {
            "description" : "Descriptive message of the action performed.",
            "type" : "string"
          }
        }
      },
      "TerracottaConfig" : {
        "type" : "object",
        "properties" : {
          "clustered" : {
            "description" : "Whether the cache is clustered.",
            "type" : "boolean"
          },
          "consistency" : {
            "description" : "The cache's consistency policy",
            "type" : "string",
            "enum" : [ "EVENTUAL", "STRONG" ]
          },
          "synchronousWrites" : {
            "description" : "Whether writes to the cache are performed synchronously.",
            "type" : "boolean"
          },
          "nonStopConfiguration" : {
            "$ref" : "#/components/schemas/NonStopConfiguration"
          }
        }
      },
      "CacheManagerActionOut" : {
        "type" : "object",
        "required" : [ "status", "message" ],
        "properties" : {
          "status" : {
            "description" : "Status of cache manager action.",
            "type" : "string"
          },
          "message" : {
            "description" : "Message regarding the cache manager action.",
            "type" : "string"
          }
        }
      },
      "PackagesManagerArchiveIn" : {
        "type" : "object",
        "required" : [ "name", "version", "jvm_version" ],
        "properties" : {
          "fileList" : {
            "description" : "List of files within the specified package to be included in the archive.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "filter" : {
            "description" : "Type of filter to be used on the archive.",
            "type" : "string",
            "enum" : [ "include", "includeall", "exclude", "includepattern", "excludepattern" ],
            "default" : "includeall"
          },
          "includepattern" : {
            "description" : "String field that is used to archive only those files matching a particular pattern-matching string. You may use the * character to represent any sequence of characters (e.g., *.java would archive only the Java source files in the package).",
            "type" : "string"
          },
          "excludepattern" : {
            "description" : "String field that is used to archive all files except those matching a particular pattern-matching string. You may use the * character to represent any sequence of characters (e.g., *.java would archive everything except Java source files).",
            "type" : "string"
          },
          "files_to_delete" : {
            "description" : "String field used to identify files you want to delete from the target package.Separate each entry with a semicolon (;). When the server creates the archive file, it deletes the files you specified from the target package.",
            "type" : "string"
          },
          "type" : {
            "description" : "Specifies whether the archive is a complete or partial copy of the package.",
            "type" : "string",
            "enum" : [ "full", "patch" ],
            "default" : "full"
          },
          "name" : {
            "description" : "Name of the archive. The archive name is also the name of the zip file that the server generates and stores in the Integration Server_directory \\instances\\instance_name\\replicate\\outbound directory. Type a name that identifies this archive uniquely. Do not type an extension. The server appends the extension .zip to the name when it creates the archive file.",
            "type" : "string"
          },
          "description" : {
            "description" : "Brief comment describing the archive. You can use this field for any sort of descriptive information--for example, \"Week 001215 Backup\" or \"Preview version for training group.\" The description will appear on the Package Description Screen when this archive is reinstalled.",
            "type" : "string"
          },
          "version" : {
            "description" : "Version of the package that you are archiving. You must specify a version number in the form n.n.n (e.g., 2.0, 2.3, 2.3.1). Because the server assumes that version numbers increase over time, make sure every new version of a package has a version number that is greater than the previous one.",
            "type" : "string"
          },
          "build" : {
            "description" : "Number that you can use to distinguish different generations of the package within the same version. Must be a numeric value that increases over time.",
            "type" : "integer",
            "format" : "int32"
          },
          "patch_nums" : {
            "description" : "Describes which patches this archive includes. A patch can be identified with any name or number that is meaningful to your site and/or the users of the package. Typically, a patch is identified using a code (e.g., TMgr-031501 or FIX-10002) or a number (e.g., 100049) that represents a particular fix or set of fixes.",
            "type" : "string"
          },
          "target_server_version" : {
            "description" : "Version of the webMethods Integration Server that must be used with this release. (ex: 10.0)",
            "type" : "string"
          },
          "jvm_version" : {
            "description" : "Specifies the minimum version of the Java Virtual Machine that must be used with this release. (ex: 1.8)",
            "type" : "string"
          },
          "target_pkg_version" : {
            "description" : "If this archive contains a patch (partial package), the version number of the package that it modifies. The server will allow the patch to be applied only to the version you specify.",
            "type" : "string"
          }
        }
      },
      "ProductInformation" : {
        "type" : "object",
        "properties" : {
          "expirationDate" : {
            "description" : "The date the license expires.",
            "type" : "string"
          },
          "operatingSystem" : {
            "description" : "Operating systems on which Integration Server is licensed to run .",
            "type" : "string"
          },
          "productCode" : {
            "description" : "Software AG code for the product: PIE.",
            "type" : "string"
          },
          "productName" : {
            "description" : "Name of product.",
            "type" : "string"
          },
          "productVersion" : {
            "description" : "Version of product.",
            "type" : "number",
            "format" : "float"
          },
          "usage" : {
            "description" : "The environment on which the licensed server will be used. For example Production.",
            "type" : "string"
          },
          "renewalDate" : {
            "description" : "Renewal date which is the expirationDate minus 28 days.",
            "type" : "string"
          },
          "higherLevPosNr" : {
            "description" : "Higher level Pos. Nr., if license key is for bundled component.",
            "type" : "string"
          },
          "higherLevProdCode" : {
            "description" : "Higher level product code, if license key is for bundled component.",
            "type" : "string"
          },
          "higherLevProdName" : {
            "description" : "Name of bundle, if license key is for bundled component.",
            "type" : "string"
          }
        }
      },
      "SFTPUserAliasPutIn" : {
        "type" : "object",
        "required" : [ "userName", "authenticationType", "sftpServerAlias" ],
        "properties" : {
          "userName" : {
            "description" : "The user name for the SFTP user account.",
            "type" : "string"
          },
          "authenticationType" : {
            "description" : "The type of authentication that Integration Server uses to authenticate itself to the SFTP server.",
            "type" : "string",
            "enum" : [ "password", "publicKey" ]
          },
          "sftpServerAlias" : {
            "description" : "The alias of the SFTP server to which you want the specified user to connect.",
            "type" : "string"
          },
          "password" : {
            "description" : "The password for the specified SFTP user. This field applies when authenticationType is set to password.",
            "type" : "string"
          },
          "passPhrase" : {
            "description" : "The passphrase for the private key for the specified SFTP user. Supply a passPhrase only if the private key specified in privateKeLocation requires a passphrase. This field applies when authenticationType is set to publicKey.",
            "type" : "string"
          },
          "privateKeyFileLocation" : {
            "description" : "The location of the private key of the specified SFTP user. This field applies when authenticationType is set to publicKey.",
            "type" : "string"
          },
          "maximumRetries" : {
            "description" : "The number of times Integration Server attempts to connect to the SFTP server. The maximum allowed value is 6. The minimum allowed value is 1. The default is 6 retries. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
            "type" : "integer",
            "format" : "int32",
            "default" : 6
          },
          "connectionTimeout" : {
            "description" : "The number of  seconds that Integration Server waits for a response from the SFTP server before timing out and terminating the request. The default is 0, which indicates that the session never times out. ",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "sessionTimeout" : {
            "description" : "The number of minutes Integration Server waits before terminating an idle session. The default is 10 minutes.",
            "type" : "integer",
            "format" : "int32"
          },
          "compression" : {
            "description" : "The compression algorithm for the data.",
            "type" : "string",
            "enum" : [ "none", "zlib" ]
          },
          "compressionLevel" : {
            "description" : "The compression level to use if you set the compression field to zlib. The minimum allowed value is 1. The maximum is 6. The default is 6. This field applies when the specified sftpServerAlias uses the v1 version of the SFTP client.",
            "type" : "integer",
            "format" : "int32",
            "default" : 6
          },
          "strictHostKeyChecking" : {
            "description" : "Whether Integration Server verifies the host key of the SFTP server before establishing a connection to the SFTP server.",
            "type" : "string",
            "default" : "yes"
          }
        }
      },
      "KerberosData" : {
        "type" : "object",
        "required" : [ "kerberosConfig" ],
        "properties" : {
          "kerberosRealm" : {
            "description" : "The domain name of the Kerberos server, in all uppercase letters.",
            "type" : "string"
          },
          "kerberosKDC" : {
            "description" : "The host name of the machine on which the KDC resides.",
            "type" : "string"
          },
          "kerberosConfig" : {
            "description" : "The location of the Kerberos configuration file that contains the Kerberos configuration information.",
            "type" : "string"
          },
          "useSubjectCreds" : {
            "description" : "Whether to use a Kerberos V5 Generic Security Services (GSS) mechanism to obtain the necessary credentials from an existing subject set up by the JAAS authentication module.",
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "HttpsPortList" : {
        "type" : "object",
        "properties" : {
          "ports" : {
            "description" : "The list of HTTPS ports.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PortLink"
              }, {
                "$ref" : "#/components/schemas/HttpsPort"
              } ]
            }
          }
        }
      },
      "ExtendedSettingPostInput" : {
        "type" : "object",
        "properties" : {
          "settingNames" : {
            "description" : "List of extended settings to reset to default values.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ServicePermissions" : {
        "type" : "object",
        "properties" : {
          "enforceInternalAclChecks" : {
            "description" : "Enforce internal ACL checks.",
            "type" : "boolean"
          },
          "aclBrowse" : {
            "$ref" : "#/components/schemas/AssignedACL"
          },
          "aclRead" : {
            "$ref" : "#/components/schemas/AssignedACL"
          },
          "aclWrite" : {
            "$ref" : "#/components/schemas/AssignedACL"
          },
          "aclExecute" : {
            "$ref" : "#/components/schemas/AssignedACL"
          }
        }
      },
      "GrpcChannelMethodOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the method.",
            "type" : "string"
          }
        }
      },
      "ClientRegistrationOutput" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "The name of the client. The name cannot contain the following characters: & ( ) \\ ; , / \" : ' < >",
            "type" : "string"
          },
          "version" : {
            "description" : "Specifies the version number of the client.",
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "description" : "Type of client as described in RFC 6749.",
            "type" : "string",
            "enum" : [ "Confidential", "Public" ]
          },
          "description" : {
            "description" : "Description of the client.",
            "type" : "string"
          },
          "redirect_uris" : {
            "description" : "The client's redirection endpoints.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "scopes" : {
            "description" : "List of scopes attached to the client.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "authorizationCodeGrant" : {
            "description" : "Indicates whether client can use the authorization code grant.",
            "type" : "boolean",
            "default" : false
          },
          "implicitGrant" : {
            "description" : "Indicates whether client can use the implicit grant",
            "type" : "boolean",
            "default" : false
          },
          "clientCredentialsGrant" : {
            "description" : "Indicates whether client can use the client credentials grant.",
            "type" : "boolean",
            "default" : false
          },
          "resourceOwnerCredentialsGrant" : {
            "description" : "",
            "type" : "boolean",
            "default" : false
          },
          "tokenLifetime" : {
            "description" : "Specifies the length of time (in seconds) that the access token is valid",
            "type" : "integer",
            "format" : "int64"
          },
          "tokenRefreshCount" : {
            "description" : "Specifies the number of times the access token can be refreshed.",
            "type" : "integer",
            "format" : "int32"
          },
          "enabled" : {
            "description" : "Indicates whether client is enabled. If true, client can request authorization and use access tokens.",
            "type" : "boolean",
            "default" : true
          },
          "client_secret" : {
            "description" : "Secret for confidential clients.",
            "type" : "string"
          },
          "client_id" : {
            "description" : "Identifier for the client.",
            "type" : "string"
          },
          "registrationClientUri" : {
            "description" : "",
            "type" : "string"
          },
          "registrationAccessToken" : {
            "description" : "",
            "type" : "string"
          }
        }
      },
      "HealthGaugeUpdateIn_Patch" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "description" : "An array of the properties to update for the indicator.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HealthIndicatorProperty"
            }
          }
        }
      },
      "UserPutIn" : {
        "type" : "object",
        "properties" : {
          "password" : {
            "description" : "Password",
            "type" : "string"
          },
          "openIDprovider" : {
            "description" : "OpenID provider that authenticates an OpenID Provider user.",
            "type" : "string"
          },
          "allowDigestAuth" : {
            "description" : "Whether to allow password digest as an authentication option.",
            "type" : "boolean"
          },
          "groups" : {
            "description" : "Groups to which the user belongs.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JWTIssuer" : {
        "type" : "object",
        "required" : [ "issuer" ],
        "properties" : {
          "issuer" : {
            "description" : "Name of trusted issuer.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description for trusted issuer.",
            "type" : "string"
          },
          "maxIssuerSkew" : {
            "description" : "Maximum number of seconds by which the JWT issuer and Integration Server clocks can differ and still allow JWT expiry (exp) and not before (nbf) validations to succeed.",
            "type" : "integer",
            "format" : "int32"
          },
          "issuerCertificateMappings" : {
            "description" : "List of all issuer-certificate mappings.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IssuerCertMappingsData"
            }
          }
        }
      },
      "LicenseInformation" : {
        "type" : "object",
        "properties" : {
          "priceUnit" : {
            "description" : "The number of core processors per CPU that this Integration Server is licensed to run on.",
            "type" : "string"
          },
          "priceQuantity" : {
            "description" : "The number of CPUs that this Integration Server is licensed to run on.",
            "type" : "integer",
            "format" : "int64"
          },
          "typeOfInstallation" : {
            "description" : "Environment used for the installation. For example, Production. ",
            "type" : "string"
          },
          "licenseType" : {
            "description" : "Whether the license type is Standard or Limited.",
            "type" : "string"
          },
          "extendedRights" : {
            "description" : "Shows what the extnded right are. For example, Virtual Machine",
            "type" : "string"
          },
          "licenseVersion" : {
            "description" : "Version number of the license.",
            "type" : "number",
            "format" : "float"
          },
          "metering" : {
            "description" : "Indicates if license is metered, and if yes, what kind of metering.",
            "type" : "string"
          }
        }
      },
      "SecurityProviderOut" : {
        "type" : "object",
        "required" : [ "providerNames" ],
        "properties" : {
          "providerNames" : {
            "description" : "Names of Security Providers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Truststores" : {
        "type" : "object",
        "required" : [ "truststoreLinks" ],
        "properties" : {
          "truststoreLinks" : {
            "description" : "Alias for the truststore.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "truststoreAliases" : {
            "description" : "Description of the truststore alias. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeystoreIn"
            }
          }
        }
      },
      "ProxyServerUpdate" : {
        "type" : "object",
        "required" : [ "host", "port", "protocol" ],
        "properties" : {
          "newAlias" : {
            "description" : "New alias name for the proxy server.",
            "type" : "string"
          },
          "host" : {
            "description" : "Host Name or IP address of the proxy server. ",
            "type" : "string"
          },
          "port" : {
            "description" : "Port number of the proxy server. ",
            "type" : "integer",
            "format" : "int32"
          },
          "username" : {
            "description" : "User name Integration Server must use to access the proxy server. ",
            "type" : "string"
          },
          "password" : {
            "description" : "Password Integration Server must use to access the proxy server. ",
            "type" : "string"
          },
          "isDefault" : {
            "description" : "Whether the proxy server is the default proxy server for a particular protocol. ",
            "type" : "boolean",
            "default" : false
          },
          "protocol" : {
            "description" : "Protocol to be used for the proxy server. Supported protocols are: HTTP, HTTPS, FTP, or SOCKS. ",
            "type" : "string",
            "enum" : [ "HTTP", "HTTPS", "FTP", "SOCKS" ]
          },
          "ftpType" : {
            "description" : "If FTP is used, specifies the type of command Integration Server must use to issue an outbound request to the FTP proxy server. Valid values are 0-7 where the values are mapped as follows: 0:No proxy, 1:ftp_user@ftp_host no proxy auth, 2:ftp_user@ftp_host proxy auth, 3:site command, 4:open command, 5:ftp_user@proxy_user@ftp_host, 6:proxy_user@ftp_host, 7:ftp_user@ftp_host proxy_user",
            "type" : "integer",
            "format" : "int32"
          },
          "socksVersion" : {
            "description" : "If SOCKS is used, specifies the version of SOCKS protocol Integration Server will use to connect to the proxy server. Valid values are 4 and 5 where the values are mapped as follows:  4:SOCKS v4, 5:SOCKS v5",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "OAuthGlobalSetting" : {
        "type" : "object",
        "properties" : {
          "requireHTTPS" : {
            "description" : "Indicates whether the authorization server should require an HTTPS connection to authorize requests",
            "type" : "boolean",
            "default" : true
          },
          "authCodeLifetimeSeconds" : {
            "description" : "Specifies the length of time (in seconds) that the authorization code issued by the authorization server is valid",
            "type" : "integer",
            "format" : "int32",
            "default" : 600
          },
          "accessTokenLifetimeSeconds" : {
            "description" : "Specifies the length of time that access tokens issued by the authorization server are valid. If set to -1, it will be set to never expire.",
            "type" : "integer",
            "format" : "int32",
            "default" : 3600
          },
          "authServerAlias" : {
            "description" : "Name of the external authorization server to ask whether or not an access token is valid",
            "type" : "string"
          },
          "tokenEndpointAuth" : {
            "description" : "Specifies whether the token endpoint accepts an existing session or requires credentials for authentication.",
            "type" : "string",
            "default" : "session"
          },
          "requirePKCE" : {
            "description" : "Indicates whether clients must use PKCE (Proof Key for Code Exchange) with the authorization code grant.",
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "AuditLoggerDataIn" : {
        "type" : "object",
        "required" : [ "enabled", "database", "asynchronous", "guaranteed", "maxQueueSize", "maxRetries", "retryWait", "queueType" ],
        "properties" : {
          "enabled" : {
            "description" : "Whether the audit logger is enabled.",
            "type" : "boolean"
          },
          "database" : {
            "description" : "Whether the audit logger writes to a database instead of a file.",
            "type" : "boolean"
          },
          "asynchronous" : {
            "description" : "Whether the audit logger is asynchronous.",
            "type" : "boolean"
          },
          "guaranteed" : {
            "description" : "Whether the audit logger keeps the internal queue on disk.",
            "type" : "boolean"
          },
          "maxQueueSize" : {
            "description" : "Maximum number of log entries for the internal queue.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxRetries" : {
            "description" : "Maximum times the audit logger should retry writing the entry to the destination if the first attempt fails because of a transient error.",
            "type" : "integer",
            "format" : "int32"
          },
          "retryWait" : {
            "description" : "Number of seconds the audit logger waits between tries to connect to the database. ",
            "type" : "integer",
            "format" : "int64"
          },
          "level" : {
            "description" : "The log level for the audit logger. This applies to the messaging audit logger.",
            "type" : "string"
          },
          "connectionAlias" : {
            "description" : "Universal Messaging connection alias the audit logger uses to the audit logging queue on Universal Messaging.",
            "type" : "string"
          },
          "queueType" : {
            "description" : "Whether the audit logging queue for the audit logger is an internal, light-weight queue or a Universal Messaging queue.",
            "type" : "string",
            "enum" : [ "um", "lwq" ]
          },
          "readerThreads" : {
            "description" : "Number of threads that Integration Server uses to retrieve log entries from the Universal Messaging queue and then write the log entries to the audit logger destination.",
            "type" : "integer",
            "format" : "int32"
          },
          "securityCategories" : {
            "description" : "Security actions for which to log security-related events. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditLoggerCategories"
            }
          },
          "startup" : {
            "description" : "Whether the security audit logger writes security events that occur during Integration Server startup.",
            "type" : "string"
          },
          "logLevel" : {
            "description" : "The logging level for the messaging audit logger.",
            "type" : "string"
          }
        }
      },
      "MessagingConnectionAliasOut_Patch" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the webMethods messaging connection alias..",
            "type" : "string"
          },
          "connected" : {
            "description" : "Whether the webMethods messaging connection alias is connected.",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Whether the webMethods messaging connection alias is enabled.",
            "type" : "boolean"
          },
          "csqCount" : {
            "description" : "The number of messages in the client side queue (CSQ) for this alias.",
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "description" : "The type of webMethods messaging connection alias.",
            "type" : "string"
          },
          "hasTriggers" : {
            "description" : "Whether the webMethods messaging connection alias has triggers associated with it.",
            "type" : "boolean"
          },
          "isUpdated" : {
            "description" : "Whether the alias is updated. This is only applicable to an alias of type BROKER.",
            "type" : "boolean"
          },
          "lastError" : {
            "description" : "The most recent error related to the webMethods messaging connection alias.",
            "type" : "string"
          },
          "isDefault" : {
            "description" : "Whether this webMethods messaging  connection alias is the default alias.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of this alias.",
            "type" : "string"
          },
          "clientPrefix" : {
            "description" : "A string that identifies the Integration Server to the webMethods messaging provider (Universal Messaging or Broker).",
            "type" : "string"
          },
          "clientPrefixShared" : {
            "description" : "Whether Integration Server shares the client prefix with multiple Integration Servers and you want to prevent automatic updates, including deletions, to shared objects associated with this alias on Universal Messaging server or Broker.",
            "type" : "boolean"
          },
          "brokerHost" : {
            "description" : "Name (DNSname: port or ipaddress: port) of the machine on which the Broker Server resides. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "brokerName" : {
            "description" : "Name of the Broker as defined on the Broker Server. The default name is Broker #1. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "clientGroup" : {
            "description" : "Broker client group to which this Integration Server belongs. Applicable for type BROKER only.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication an Integration Server client will use to connect to the Broker.The value SSL is only applicable for an alias of type BROKER. The value CERTIFICATE_BASED is only applicable for aliases of type UM.",
            "type" : "string"
          },
          "user" : {
            "description" : "Username for basic authentication.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for basic authentication.",
            "type" : "string"
          },
          "useCsq" : {
            "description" : "Whether a client side queue is used with this Universal Messaging connection alias.Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "csqSize" : {
            "description" : "The maximum number of documents (messages) that can exist in the client side queue for this Universal Messaging connection alias.  Leave empty for a value of UNLIMITED. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32"
          },
          "csqDrainInOrder" : {
            "description" : "Whether Integration Server drains the client side queue for this alias by sending the messages to the Universal Messaging server in the same order in which Integration Server placed the messages in the client side queue. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "publishWaitTime" : {
            "description" : "Number of milliseconds that a publishing service using this Universal Messaging connection alias will wait for a connection to the Universal Messaging server to be re-established after the connection fails. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32"
          },
          "followTheMasterProducers" : {
            "description" : "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to send messages. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "enableRequestReply" : {
            "description" : "Whether a request/reply channel is created for this Universal Messaging connection alias on Universal Messaging and whether a listener for replies is created on Integration Server. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "followTheMasterConsumers" : {
            "description" : "Whether Integration Server always connects to the master realm server in a Universal Messaging cluster when Integration Server uses this Universal Messaging connection alias to retrieve messages. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "realmUrl" : {
            "description" : "The URL for the Universal Messaging server in the format nsp:// UM_host: UM_port (for example, nsp://127.0.0.1:9000 or nsp://localhost:9000). Applicable for type UM only.",
            "type" : "string"
          },
          "maxRetryAttempts" : {
            "description" : "Maximum number of reconnection attempts that Integration Server makes if the connection to Universal Messaging fails. The default is 5 attempts. Applicable for alias of type UM only.",
            "type" : "integer",
            "format" : "int32"
          },
          "loggingType" : {
            "description" : "Where Integration Server writes log messages when enhanced logging is enabled for the message producers and/or consumers that use this messaging connection alias to send and/or receive documents. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "enableProducerMessageTracking" : {
            "description" : "When set to true, indicates that Integration Server writes additional log messages when a message producer uses this connection alias to publish documents that are instances of the publishable document types listed in producerIncludedStrings. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "producerIncludedStrings" : {
            "description" : "Name of each channel that corresponds to a publishable document type for which Integration Server performs additional logging during publication. Use a semicolon (;) to separate each destination name. A value of [ALL] indicates that Integration Server performs enhanced logging for every channel to which this connection alias sends messages. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "enableConsumerMessageTracking" : {
            "description" : "Whether Integration Server writes additional log messages for messaging consumers (triggers) that use this messaging connection alias to receive messages. Integration Server writes additional log message for the triggers listed in consumerIncludedStrings. Applicable for alias of type UM only.",
            "type" : "boolean"
          },
          "consumerIncludedStrings" : {
            "description" : "The fully qualified name of the triggers for which Integration Server performs additional logging during trigger processing. Use a semicolon (;) to separate each trigger name. A value of [ALL] indicates that Integration Server performs enhanced logging for every trigger that uses this connection alias to receive messages. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "keystore" : {
            "description" : "The full path to the keystore file for this Integration Server. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "keystoreType" : {
            "description" : "The file type of the keystore file for Integration Server. The file type can be either PKCS12. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "keystorePassword" : {
            "description" : "Password required to access the SSL certificate in the keystore file for Integration Server. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "encrypted" : {
            "description" : "Specifies whether or not to encrypt the connection between the Integration Server and the Broker. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "truststore" : {
            "description" : "The full path to the truststore file for the Integration Server client. Applicable if encrypted is true. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "truststoreType" : {
            "description" : "The file type of the truststore file for Integration Server. The file type is JKS. Applicable if encrypted is true. Applicable for alias of type BROKER only.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "The alias for the keystore that contains the client certificates that you want Integration Server to use when connecting to the Universal Messaging port. You must set a keystoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. Applicable for alias of type UM only.",
            "type" : "string"
          },
          "keyAlias" : {
            "description" : "The alias to the key that contains the private key for connecting to the Universal Messaging port securely. The key alias must be in the keystore specified in field keystoreAlias. Applicable alias of for type UM only.",
            "type" : "string"
          },
          "truststoreAlias" : {
            "description" : "The alias for the truststore that contains the certificate authority (CA) certificates for the Universal Messaging server. You must set a truststoreAlias if the Universal Messaging port is configured for certificate-based authentication, i.e. when value of clientAuth is CERTIFICATE_BASED. You must also set a truststoreAlias if the protocol specified for Realm URL is nsps or nhps. Applicable for alias of type UM only.",
            "type" : "string"
          }
        }
      },
      "HotDeploymentData" : {
        "type" : "object",
        "required" : [ "enable", "timeout", "autoRecover" ],
        "properties" : {
          "enable" : {
            "description" : "Whether hot deployment of custom packages is enabled on this Integration Server.",
            "type" : "boolean"
          },
          "timeout" : {
            "description" : "Maximum number of seconds that Integration Server waits for in-flight processing to complete before attempting hot deployment.",
            "type" : "integer",
            "format" : "int32"
          },
          "autoRecover" : {
            "description" : "Whether Integration Server reverts to the previous version of a package when the deployment of a new version of the package fails.",
            "type" : "boolean"
          }
        }
      },
      "IntegrationServer" : {
        "type" : "object",
        "properties" : {
          "productCode" : {
            "description" : "Software AG code for this product: PIE.",
            "type" : "string"
          },
          "productVersion" : {
            "description" : "Software AG product version number.",
            "type" : "number",
            "format" : "float"
          },
          "concurrentSessions" : {
            "description" : "Maximum number of concurrent sessions licensed for the server.",
            "type" : "string"
          },
          "clustering" : {
            "description" : "Whether clustering is licensed. ",
            "type" : "boolean"
          },
          "publishOrSubscribe" : {
            "description" : "Whether publish-subscribe is licensed.",
            "type" : "boolean"
          },
          "adapterRuntime" : {
            "description" : "Whether the Adapter Runtime is licensed.",
            "type" : "boolean"
          },
          "remoteInvoke" : {
            "description" : "Whether remote invoke is licensed.",
            "type" : "boolean"
          },
          "guaranteedDelivery" : {
            "description" : "Whether guaranteed delivery is licensed.",
            "type" : "boolean"
          },
          "securityAuditing" : {
            "description" : "Whether security auditing is licensed.",
            "type" : "boolean"
          },
          "distributedCache" : {
            "description" : "Whether a distributed cache is licensed.",
            "type" : "boolean"
          },
          "enterpriseGateway" : {
            "description" : "Whether Enterprise Gateway is licensed.",
            "type" : "boolean"
          },
          "microservices" : {
            "description" : "Whether Microservices is licensed.",
            "type" : "boolean"
          }
        }
      },
      "EnterpriseGatewayPortLink" : {
        "type" : "object",
        "properties" : {
          "externalPort" : {
            "$ref" : "#/components/schemas/PortLink"
          },
          "registrationPort" : {
            "$ref" : "#/components/schemas/PortLink"
          }
        }
      },
      "Message" : {
        "type" : "object",
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "description" : "Message regarding the requested operation.",
            "type" : "string"
          }
        }
      },
      "HealthGauge" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "description" : "Health indicator name.",
            "type" : "string",
            "enum" : [ "Adapters", "JDBC", "JMS", "JNDIAliases", "RemoteServers", "SFTPServers", "UMAliases", "Cluster", "Diskspace", "Memory", "ServiceThread", "Sessions" ]
          },
          "enabled" : {
            "description" : "Whether the health indicator is enabled.",
            "type" : "boolean",
            "enum" : [ true, false ]
          },
          "properties" : {
            "description" : "Health indicator properties.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HealthIndicatorProperty"
            }
          }
        }
      },
      "CustomFilterInOut" : {
        "type" : "object",
        "required" : [ "isCustomFilterEnabled", "customServiceName", "runAsUser" ],
        "properties" : {
          "isCustomFilterEnabled" : {
            "description" : "Whether Enterprise Gateway Server is to invoke the custom service for incoming requests.",
            "type" : "boolean",
            "enum" : [ false, true ]
          },
          "customServiceName" : {
            "description" : "Fully qualified name of the service that needs to be invoked",
            "type" : "string"
          },
          "runAsUser" : {
            "description" : "The user name that the Enterprise Gateway Server use to run the service.",
            "type" : "string"
          },
          "payloadClone" : {
            "description" : "Whether the incoming payload will be cloned and will be passed in custom service input.",
            "type" : "boolean",
            "enum" : [ false, true ]
          }
        }
      },
      "MessagingConnectionAliases" : {
        "type" : "object",
        "properties" : {
          "aliases" : {
            "description" : "All webMethods messaging connection aliases.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/MessagingConnectionAliasOut"
              } ]
            }
          }
        }
      },
      "JDBCFunctionAlias" : {
        "type" : "object",
        "required" : [ "name", "autocommit", "cache", "isolationLevel", "description" ],
        "properties" : {
          "name" : {
            "description" : "Name of the function to point to a connection pool.",
            "type" : "string"
          },
          "pool" : {
            "description" : "Alias of the connection pool at which to point the function.",
            "type" : "string"
          },
          "autocommit" : {
            "description" : "SQL Autocommit. When active, each SQL statement is executed in its own transaction and automatically committed. Cannot be modified.",
            "type" : "string",
            "enum" : [ "active", "inactive" ]
          },
          "cache" : {
            "description" : "SQL Statement cache enabled. Cannot be modified.",
            "type" : "string",
            "enum" : [ "active", "inactive" ]
          },
          "isolationLevel" : {
            "description" : "SQL Transaction Isolation Level that defines the degree to which one transaction must be isolated from resource or data modifications made by other transactions. Cannot be modified.",
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "description" : "Description of the function.",
            "type" : "string"
          },
          "inFailFastMode" : {
            "description" : "Whether the function is currently in fail-fast mode. Cannot be modified.",
            "type" : "boolean"
          },
          "failFastMode" : {
            "description" : "Whether fail-fast mode is enabled for the function.",
            "type" : "boolean"
          }
        }
      },
      "IPAccessIn" : {
        "type" : "object",
        "required" : [ "accessMode", "allowList", "denyList" ],
        "properties" : {
          "accessMode" : {
            "description" : "The IP access mode is used to determine which hosts are permitted on the port. When you explicitly assign IP access settings to a port, those settings override the global settings for Integration Server. If you do not assign IP access settings to a port or delete a IP access settings for a port, the port uses the global settings. \"allowByDefault\" accepts all hosts except those in the denyList. \"denyByDefault\" rejects all hosts except those in the allowList.",
            "type" : "string",
            "enum" : [ "allowByDefault", "denyByDefault" ]
          },
          "allowList" : {
            "description" : "An allow list to specify hosts that are permitted to access this port when accessMode is \"denyByDefault\". The values in this list may be host names or IP addresses. Values may be wildcarded such as \"*.some-company.com\" and \"123.45.6.*\".",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "denyList" : {
            "description" : "A deny list to specify hosts that are prohibited from accessing this port when accessMode is \"allowByDefault\". The values in this list may be host names or IP addresses. Values may be wildcarded such as \"*.some-company.com\" and \"123.45.6.*\".",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JDBCPoolAliasPutIn" : {
        "type" : "object",
        "required" : [ "url", "uid", "password", "driver" ],
        "properties" : {
          "minConnections" : {
            "description" : "Minimum number of connections the pool must keep open at all times.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "maxConnections" : {
            "description" : "Maximum number of connections the pool can have open at one time.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "idleMilliseconds" : {
            "description" : "Number of milliseconds the pool can keep an unused connection open.",
            "type" : "integer",
            "format" : "int32",
            "default" : 60000
          },
          "url" : {
            "description" : "URL for the database server.",
            "type" : "string"
          },
          "uid" : {
            "description" : "Database user for Integration Server to use to connect to the database.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for Integration Server to use to connect to the database.",
            "type" : "string"
          },
          "driver" : {
            "description" : "Database driver alias for Integration Server to use to connect to the pool.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JDBC connection pool.",
            "type" : "string"
          },
          "spyParms" : {
            "description" : "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Spy diagnostic feature. This parameter also defines DataDirect Spy attributes.",
            "type" : "string",
            "default" : "SpyAttributes=(log=(file)logs/spy/<alias_name>.log;logTName=yes;timestamp=yes)"
          },
          "snoopParms" : {
            "description" : "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Snoop tool. This parameter also defines DataDirect Snoop tool attributes.",
            "type" : "string",
            "default" : "ddtdbg.ProtocolTraceEnable=true;ddtdbg.ProtocolTraceMaxline=16;ddtdbg.ProtocolTraceLocation=logs/snoop/<alias_name>.log;ddtdbg.ProtocolTraceShowTime=true"
          },
          "spyEnabled" : {
            "description" : "Whether the DataDirect Spy diagnostic feature for DataDirect Connect JDBC drivers is enabled.",
            "type" : "boolean",
            "default" : false
          },
          "snoopEnabled" : {
            "description" : "Whether the DataDirect Snoop tool for DataDirect Connect JDBC drivers is enabled. ",
            "type" : "boolean",
            "default" : false
          },
          "poolThresholdPercentage" : {
            "description" : "Number of connections, expressed as a percentage of maxConnections, that should be available in the pool at all times.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "waitingThread" : {
            "description" : "Maximum number of requests for connection that can be waiting at one time.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }
      },
      "FilterListOut" : {
        "type" : "object",
        "properties" : {
          "filters" : {
            "description" : "List of filters which can be configured for a rule.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SystemAttrs" : {
        "type" : "object",
        "properties" : {
          "currentUser" : {
            "description" : "Name of the current user.",
            "type" : "string"
          },
          "dataDirectVersion" : {
            "description" : "Version of the DataDirect Connect drivers used by Integration Server.",
            "type" : "string"
          },
          "javaBuildInfo" : {
            "description" : "Details about the Java VM's build.",
            "type" : "string"
          },
          "javaClasspath" : {
            "description" : "The Java classpath.",
            "type" : "string"
          },
          "javaDataModel" : {
            "description" : "The Java data model.",
            "type" : "string"
          },
          "javaEntrustToolkitVersion" : {
            "description" : "The Entrust Toolkit version.",
            "type" : "string"
          },
          "javaHome" : {
            "description" : "The Java home directory.",
            "type" : "string"
          },
          "javaVmName" : {
            "description" : "Name of the Java VM.",
            "type" : "string"
          },
          "javaVendor" : {
            "description" : "Java VM manufacturer.",
            "type" : "string"
          },
          "javaVersion" : {
            "description" : "Java version.",
            "type" : "string"
          },
          "serverClasspath" : {
            "description" : "Integration Server classpath.",
            "type" : "string"
          },
          "serverInstanceName" : {
            "description" : "Name of Integration Server instance.",
            "type" : "string"
          },
          "serverProcessId" : {
            "description" : "Operation system process ID of this Integration Server instance.",
            "type" : "string"
          },
          "workingDir" : {
            "description" : "Home directory of the Integration Server instance.",
            "type" : "string"
          },
          "updates" : {
            "description" : "URL that returns the updates installed on this Integration Server instance.",
            "type" : "string"
          }
        }
      },
      "MobileApplicationInOut" : {
        "type" : "object",
        "properties" : {
          "applicationName" : {
            "description" : "Name of the mobile application that sent the request.",
            "type" : "string"
          },
          "deviceType" : {
            "description" : "Type of mobile device from which the request was sent.",
            "type" : "string"
          },
          "condition" : {
            "description" : "An operator that helps define which versions of the mobile application you want to deny or send an alert.",
            "type" : "string"
          },
          "applicationVersion" : {
            "description" : "Mobile application version that you want to check for. The version must use this format: major-version.[minor-version.[sub-minor-version.[patch]]]",
            "type" : "string"
          }
        }
      },
      "FtpPort" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "protocol" : {
            "description" : "The protocol for the port.",
            "type" : "string",
            "enum" : [ "FTP" ]
          },
          "packageName" : {
            "description" : "The package associated with the port.",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Indicates whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "pasvAddr" : {
            "description" : "Specifies the address that should be sent by the PORT command.",
            "type" : "string"
          },
          "ipAccess" : {
            "$ref" : "#/components/schemas/IPAccess"
          },
          "resourceAccess" : {
            "$ref" : "#/components/schemas/ResourceAccess"
          },
          "message" : {
            "description" : "Information about the operation that just completed.",
            "type" : "string"
          }
        }
      },
      "UrlAliasIn" : {
        "type" : "object",
        "required" : [ "alias", "packageName", "association" ],
        "properties" : {
          "alias" : {
            "description" : "Name of the URL alias.",
            "type" : "string"
          },
          "urlPath" : {
            "description" : "Specifies the path to the resource on Integration Server.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Indicates name of the package with which alias is associated.",
            "type" : "string"
          },
          "association" : {
            "description" : "The contents indicate the tool used to create the URL alias.",
            "type" : "string"
          },
          "isEmptyAlias" : {
            "description" : "Indicates name of the alias as empty alias.",
            "type" : "boolean"
          },
          "portList" : {
            "description" : "Indicates single URL alias can be used with multiple destinations.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PortDetail"
            }
          }
        }
      },
      "MasterPasswordExpirationDetails" : {
        "type" : "object",
        "properties" : {
          "expirationInterval" : {
            "description" : "Number of days after which a password expires.",
            "type" : "integer",
            "format" : "int32"
          },
          "daysToExpire" : {
            "description" : "Number of days left till password expiry.",
            "type" : "integer",
            "format" : "int32"
          },
          "lastChangeDate" : {
            "description" : "Date when password was changed last time.",
            "type" : "string"
          },
          "expirationDate" : {
            "description" : "Date when password expires.",
            "type" : "string"
          },
          "statusMessage" : {
            "description" : "States if password still active.",
            "type" : "string"
          }
        }
      },
      "JNDIConnectionAliasOut" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Name of the JNDI connection alias.",
            "type" : "string"
          },
          "providerURL" : {
            "description" : "The URL of the initial context for sessions with the JNDI provider.",
            "type" : "string"
          },
          "initialContextFactory" : {
            "description" : "The class name of the JNDI provider. The initial context is the starting point that the JNDI provider users to resolve names for naming and directory operations.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JNDI connection alias.",
            "type" : "string"
          },
          "otherProperties" : {
            "description" : "The additional properties for JNDI configuration required by the JNDI provider.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "The alias for the keystore that contains the client certificates for Integration Server to use when connecting to the JNDI provider.",
            "type" : "string"
          },
          "keystoreFormatPropertyName" : {
            "description" : "The JNDI property name for storing the keystore format.",
            "type" : "string"
          },
          "keystoreKeyAlias" : {
            "description" : "The alias to the key that contains the private key for connecting to the JNDI provider.",
            "type" : "string"
          },
          "keystorePasswordPropertyName" : {
            "description" : "The JNDI property name for storing the keystore password.",
            "type" : "string"
          },
          "keystorePropertyName" : {
            "description" : "The JNDI property name for storing the keystore location.",
            "type" : "string"
          },
          "privateKeyPropertyName" : {
            "description" : "The JNDI property name for storing the private key name.",
            "type" : "string"
          },
          "providerURLFailoverList" : {
            "description" : "One or more provider URLs that Integration Server should use if the connection to the primary JNDI provider fails.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "securityCredentials" : {
            "description" : "The security credentials that the JMS administrator provides to the JNDI provider.",
            "type" : "string"
          },
          "securityPrincipal" : {
            "description" : "The name of the security principal that the JMS administrator provides to the JNDI provider.",
            "type" : "string"
          },
          "trustoreAlias" : {
            "description" : "The alias for the truststore that contains the certificates of the Certificate Authority (CA) for the JNDI provider.",
            "type" : "string"
          },
          "truststorePasswordPropertyName" : {
            "description" : "The JNDI property name for storing the truststore password.",
            "type" : "string"
          },
          "truststorePropertyName" : {
            "description" : "The JNDI property name for storing the truststore location.",
            "type" : "string"
          },
          "useSSL" : {
            "description" : "Whether SSL is used to connect to the JNDI provider.",
            "type" : "boolean"
          }
        }
      },
      "MobileAppProtectionFilterInOut" : {
        "type" : "object",
        "required" : [ "isMobileAppProtectionFilterEnabled", "mobileApplications" ],
        "properties" : {
          "isMobileAppProtectionFilterEnabled" : {
            "description" : "Whether Enterprise Gateway Server is to check the requests from mobile applications for application name and version, and the type of device from which the request was sent.",
            "type" : "boolean",
            "enum" : [ false, true ]
          },
          "mobileApplications" : {
            "description" : "List of conditions for mobile applications.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MobileApplicationInOut"
            }
          }
        }
      },
      "CacheManagerInUpdate" : {
        "type" : "object",
        "properties" : {
          "tsaURL" : {
            "description" : "Comma-separated list of URLs for the servers in a Terracotta Server Array.",
            "type" : "string"
          },
          "rejoin" : {
            "description" : "Whether to automatically rejoin a cluster if disconnected.",
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "UserIn" : {
        "type" : "object",
        "required" : [ "username" ],
        "properties" : {
          "username" : {
            "description" : "Username",
            "type" : "string"
          },
          "password" : {
            "description" : "Password",
            "type" : "string"
          },
          "openIDprovider" : {
            "description" : "OpenID provider that authenticates an OpenID provider user.",
            "type" : "string"
          },
          "allowDigestAuth" : {
            "description" : "Whether to allow password digest as an authentication option. ",
            "type" : "boolean"
          },
          "groups" : {
            "description" : "Groups to which the user belongs.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JWTIssuerUpdateIn_Patch" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "description" : "Description for trusted issuer.",
            "type" : "string"
          },
          "maxIssuerSkew" : {
            "description" : "Maximum number of seconds by which the JWT issuer and Integration Server clocks can differ and still allow JWT expiry (exp) and not before (nbf) validations to succeed.",
            "type" : "integer",
            "format" : "int32"
          },
          "issuerCertificateMappings" : {
            "description" : "List of all issuer-certificate mappings.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IssuerCertMappingsData"
            }
          }
        }
      },
      "ClientCertificateDetails" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "description" : "User mapped to the certificate.",
            "type" : "string"
          },
          "usage" : {
            "description" : "Purpose of the certificate.",
            "type" : "string"
          },
          "certifcateInfo" : {
            "$ref" : "#/components/schemas/CertificateDetail"
          }
        }
      },
      "SchedulerDetail" : {
        "type" : "object",
        "required" : [ "state" ],
        "properties" : {
          "state" : {
            "description" : "Scheduler State",
            "type" : "string",
            "enum" : [ "paused", "running" ]
          },
          "scheduledTasks" : {
            "description" : "Link to Scheduled Tasks",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "TruststoreInUpdate" : {
        "type" : "object",
        "properties" : {
          "keyStoreDescription" : {
            "description" : "Description of the truststore alias. ",
            "type" : "string"
          },
          "keyStoreType" : {
            "description" : "Certificate file format of the truststore.",
            "type" : "string"
          },
          "keyStoreProvider" : {
            "description" : "Provider that is used for the truststore.",
            "type" : "string"
          },
          "keyStoreLocation" : {
            "description" : "Location of the truststore file on the server. This can be the full pathname, or a relative path in relation to the Integration Server.",
            "type" : "string"
          },
          "keyStorePassword" : {
            "description" : "Password for the truststore file associated with this alias.",
            "type" : "string"
          }
        }
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "className" : {
            "description" : "Exception class name. Returned when watt.adminapi.returnExceptions is true.",
            "type" : "string"
          },
          "message" : {
            "description" : "Error message",
            "type" : "string"
          },
          "stackTrace" : {
            "description" : "Exception stack trace. Returned when watt.adminapi.returnExceptions is true.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cause" : {
            "$ref" : "#/components/schemas/Error"
          }
        }
      },
      "DeniedIPOut" : {
        "type" : "object",
        "properties" : {
          "deniedIPList" : {
            "description" : "List denied IP addresses.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SFTPServerAliases" : {
        "type" : "object",
        "required" : [ "sftpServerAliasLinks" ],
        "properties" : {
          "sftpServerAliasLinks" : {
            "description" : "Alias for the SFTP server.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "sftpServerAliases" : {
            "description" : "Description of the SFTP server alias. ",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SFTPServerAliasOut"
            }
          }
        }
      },
      "ExtendedResourceValueInput_Patch" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "description" : "The updated value for the extended setting.",
            "type" : "string"
          }
        }
      },
      "JDBCPoolAlias" : {
        "type" : "object",
        "required" : [ "name", "url", "uid", "password", "driver" ],
        "properties" : {
          "name" : {
            "description" : "Alias name for JDBC connection pool.",
            "type" : "string"
          },
          "minConnections" : {
            "description" : "Minimum number of connections the pool must keep open at all times.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "maxConnections" : {
            "description" : "Maximum number of connections the pool can have open at one time.",
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          },
          "idleMilliseconds" : {
            "description" : "Number of milliseconds the pool can keep an unused connection open.",
            "type" : "integer",
            "format" : "int32",
            "default" : 60000
          },
          "url" : {
            "description" : "URL for the database server.",
            "type" : "string"
          },
          "uid" : {
            "description" : "Database user for Integration Server to use to connect to the database.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for Integration Server to use to connect to the database.",
            "type" : "string"
          },
          "driver" : {
            "description" : "Database driver alias for Integration Server to use to connect to the pool.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JDBC connection pool.",
            "type" : "string"
          },
          "spyParms" : {
            "description" : "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Spy diagnostic feature. This parameter also defines DataDirect Spy attributes.",
            "type" : "string",
            "default" : "SpyAttributes=(log=(file)logs/spy/<alias_name>.log;logTName=yes;timestamp=yes)"
          },
          "snoopParms" : {
            "description" : "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Snoop tool. This parameter also defines DataDirect Snoop tool attributes.",
            "type" : "string",
            "default" : "ddtdbg.ProtocolTraceEnable=true;ddtdbg.ProtocolTraceMaxline=16;ddtdbg.ProtocolTraceLocation=logs/snoop/<alias_name>.log;ddtdbg.ProtocolTraceShowTime=true"
          },
          "spyEnabled" : {
            "description" : "Whether the DataDirect Spy diagnostic feature for DataDirect Connect JDBC drivers is enabled.",
            "type" : "boolean",
            "default" : false
          },
          "snoopEnabled" : {
            "description" : "Whether the DataDirect Snoop tool for DataDirect Connect JDBC drivers is enabled. ",
            "type" : "boolean",
            "default" : false
          },
          "poolThresholdPercentage" : {
            "description" : "Number of connections, expressed as a percentage of maxConnections, that should be available in the pool at all times.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          },
          "waitingThread" : {
            "description" : "Maximum number of requests for connection that can be waiting at one time.",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }
      },
      "UrlAliasIn_Patch" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "Name of the URL alias.",
            "type" : "string"
          },
          "urlPath" : {
            "description" : "Specifies the path to the resource on Integration Server.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Indicates name of the package with which alias is associated.",
            "type" : "string"
          },
          "association" : {
            "description" : "The contents indicate the tool used to create the URL alias.",
            "type" : "string"
          },
          "isEmptyAlias" : {
            "description" : "Indicates name of the alias as empty alias.",
            "type" : "boolean"
          },
          "portList" : {
            "description" : "Indicates single URL alias can be used with multiple destinations.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PortDetail"
            }
          }
        }
      },
      "MQTTConnectionAliases" : {
        "type" : "object",
        "properties" : {
          "aliases" : {
            "description" : "All MQTT connection aliases.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/MQTTConnectionAliasOut"
              } ]
            }
          }
        }
      },
      "ExtendedSettingOutput" : {
        "type" : "object",
        "properties" : { }
      },
      "GrpcProviderDescriptorsOut" : {
        "type" : "object",
        "properties" : {
          "grpcProviderDescriptors" : {
            "description" : "All Grpc provider descriptors in the channels.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Link"
              }, {
                "$ref" : "#/components/schemas/GrpcProviderDescriptorOut"
              } ]
            }
          }
        }
      },
      "SFTPServerAliasOut" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "Alias for the SFTP server.",
            "type" : "string"
          },
          "version" : {
            "description" : "Version of the SFTP Client.",
            "type" : "string"
          },
          "hostName" : {
            "description" : "The host name or IP address of the SFTP server.",
            "type" : "string"
          },
          "port" : {
            "description" : "The port number of the SFTP server. The port number must be within the range of 0 and 65535 (inclusive).",
            "type" : "integer",
            "format" : "int32"
          },
          "preferredKeyExchangeAlgorithms" : {
            "description" : "The algorithms that Integration Server presents to the SFTP server for key exchange.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "proxyAlias" : {
            "description" : "The proxy alias through which the request to the SFTP server is to be routed.",
            "type" : "string"
          },
          "preferredMACS2C" : {
            "description" : "The list of preferred server-to-client Message Authentication Code (MAC) algorithms.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredMACC2S" : {
            "description" : "The list of preferred client-to-server Message Authentication Code (MAC) algorithms.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredCiphersS2C" : {
            "description" : "A list of preferred server-to-client ciphers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preferredCiphersC2S" : {
            "description" : "A list of preferred client-to-server ciphers.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "minDHKeySize" : {
            "description" : "The minimum DH key size. The default value is 1024. This field applies when the SFTP client version is v2.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxDHKeySize" : {
            "description" : "The maximum DH key size. The default value is 8192. This field applies when the SFTP client version is v2.",
            "type" : "integer",
            "format" : "int32"
          },
          "fingerprint" : {
            "description" : "Fingerprint of the host key. ",
            "type" : "string"
          },
          "hostKeyLocation" : {
            "description" : "Public key of the SFTP server.",
            "type" : "string"
          }
        }
      },
      "GlobalVariablesOut" : {
        "type" : "object",
        "properties" : {
          "globalVariables" : {
            "description" : "All global variables.",
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/GlobalVariableInOut"
              } ]
            }
          }
        }
      },
      "UserPutIn_Patch" : {
        "type" : "object",
        "properties" : {
          "password" : {
            "description" : "Password",
            "type" : "string"
          },
          "openIDprovider" : {
            "description" : "OpenID provider that authenticates an OpenID Provider user.",
            "type" : "string"
          },
          "allowDigestAuth" : {
            "description" : "Whether to allow password digest as an authentication option.",
            "type" : "boolean"
          },
          "groups" : {
            "description" : "Groups to which the user belongs.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "QuiescePortDetails" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "Alias for the port.",
            "type" : "string"
          },
          "key" : {
            "description" : "Key for the port where the key is a combination of the protocol and port such as HTTPListener@5555.",
            "type" : "string"
          },
          "portPackage" : {
            "description" : "The package in which the quiesce port resides.",
            "type" : "string"
          }
        }
      },
      "JNDIConnectionAliasIn" : {
        "type" : "object",
        "required" : [ "name", "providerURL", "initialContextFactory", "description" ],
        "properties" : {
          "name" : {
            "description" : "Name of the JNDI connection alias.",
            "type" : "string"
          },
          "providerURL" : {
            "description" : "The URL of the initial context for sessions with the JNDI provider.",
            "type" : "string"
          },
          "initialContextFactory" : {
            "description" : "The class name of the JNDI provider. The initial context is the starting point that the JNDI provider uses to resolve names for naming and directory operations.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JNDI connection alias.",
            "type" : "string"
          },
          "otherProperties" : {
            "description" : "The additional properties for JNDI configuration required by the JNDI provider.",
            "type" : "string"
          },
          "keystoreAlias" : {
            "description" : "The alias for the keystore that contains the client certificates for Integration Server to use when connecting to the JNDI provider.",
            "type" : "string"
          },
          "keystoreFormatPropertyName" : {
            "description" : "The JNDI property name for storing the keystore format. ",
            "type" : "string"
          },
          "keystoreKeyAlias" : {
            "description" : "The alias to the key that contains the private key for connecting to the JNDI provider.The key alias must be in the keystore specified in keystoreAlias.",
            "type" : "string"
          },
          "keystorePasswordPropertyName" : {
            "description" : "The JNDI property name for storing the keystore password. This field is required if you set a keystoreAlias.",
            "type" : "string"
          },
          "keystorePropertyName" : {
            "description" : "The JNDI property name for storing the keystore location. This field is required if you set a keystoreAlias.",
            "type" : "string"
          },
          "privateKeyPropertyName" : {
            "description" : "The JNDI property name for storing the private key name.",
            "type" : "string"
          },
          "providerURLFailoverList" : {
            "description" : "One or more provider URLs that Integration Server should use if the connection to the primary JNDI provider fails.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "securityCredentials" : {
            "description" : "The security credentials that the JMS administrator provides to the JNDI provider.",
            "type" : "string"
          },
          "securityPrincipal" : {
            "description" : "The name of the security principal that the JMS administrator provides to the JNDI provider.",
            "type" : "string"
          },
          "trustoreAlias" : {
            "description" : "The alias for the truststore that contains the certificates of the Certificate Authority (CA) for the JNDI provider.",
            "type" : "string"
          },
          "truststorePasswordPropertyName" : {
            "description" : "The JNDI property name for storing the truststore password. This field is required if you set a truststoreAlias.",
            "type" : "string"
          },
          "truststorePropertyName" : {
            "description" : "The JNDI property name for storing the truststore location. This field is required if you set a truststoreAlias.",
            "type" : "string"
          },
          "useSSL" : {
            "description" : "Whether to use SSL to connect to the JNDI provider.",
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "EmailPortPostIn" : {
        "type" : "object",
        "required" : [ "alias", "packageName", "host", "user", "interval" ],
        "properties" : {
          "alias" : {
            "description" : "An alias for the port that is unique for this Integration Server.",
            "type" : "string"
          },
          "packageName" : {
            "description" : "Package with which this port is associated.",
            "type" : "string"
          },
          "host" : {
            "description" : "Name of the machine on which the IMAP or POP3 mail server is running.",
            "type" : "string"
          },
          "user" : {
            "description" : "User name that Integration Server must use to log on to the mail server.",
            "type" : "string"
          },
          "interval" : {
            "description" : "Frequency, in seconds, with which Integration Server checks the mail server for incoming email messages.",
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "type" : {
            "description" : "The type of mail server from which the email port will receive requests. Specify IMAP or POP3.",
            "type" : "string",
            "enum" : [ "IMAP", "POP3", "imap", "pop3" ],
            "default" : "IMAP"
          },
          "serverPort" : {
            "description" : "The port on which the mail server listens for requests.",
            "type" : "integer",
            "format" : "int32"
          },
          "authentication" : {
            "description" : "The type of authentication that Integration Server should use to connect to the specified e-mail server. Select Basic Authentication or OAuth",
            "type" : "string",
            "enum" : [ "Basic", "OAuth" ],
            "default" : "Basic"
          },
          "password" : {
            "description" : "The password the user name used to log on to the mail server.This field applies only to Basic Authentication.",
            "type" : "string"
          },
          "authURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request authorization code.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientID" : {
            "description" : "The unique public identifier that the OAuth server generates for Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The unique string that the OAuth server provides to Integration Server during registration.This field applies only to OAuth.",
            "type" : "string"
          },
          "scope" : {
            "description" : "The e-mail server access permissions configured for Integration Server during registration. You can specify multiple scopes separated by a space.This field applies only to OAuth.",
            "type" : "string"
          },
          "accessTokenURL" : {
            "description" : "The URL of the endpoint that Integration Server must use to request an access token from the OAuth server.This field applies only to OAuth.",
            "type" : "string"
          },
          "redirectURL" : {
            "description" : "The URL that the OAuth server must use to send authentication responses to Integration Server.This field applies only to OAuth.",
            "type" : "string"
          },
          "tlsSettings" : {
            "description" : "The type of SSL encryption that Integration Server uses when communicating with an email server. You can configure the port to use None , Explicit, or Implicit.",
            "type" : "string",
            "enum" : [ "None", "Explicit", "Implicit" ],
            "default" : "None"
          },
          "trustStore" : {
            "description" : "Alias for the truststore that contains certificates presented by the email server to Integration Server.",
            "type" : "string"
          },
          "logout" : {
            "description" : "For use with IMAP and multi-threading only. Whether you want your server to log out after checking for mail.",
            "type" : "boolean",
            "default" : false
          },
          "runAsUser" : {
            "description" : "The user name under which requested services are to run.",
            "type" : "string"
          },
          "authenticateWithMessage" : {
            "description" : "When set to true, Integration Server checks for $user and $pass parameters in the Subject line of the email. The user name is the user under which the service is to run on Integration Server. When set to false, specify the user in the runAsUser field.",
            "type" : "boolean",
            "default" : true
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean",
            "default" : true
          },
          "globalService" : {
            "description" : "The service that you want Integration Server to execute for every email request.",
            "type" : "string"
          },
          "defaultService" : {
            "description" : "The service that you want Integration Server to execute if the email message does not supply a valid service in the subject line and the globalService field is blank.",
            "type" : "string"
          },
          "reply" : {
            "description" : "Whether you want Integration Server to send any output that the service generates to the original sender in an email attachment.",
            "type" : "boolean",
            "default" : false
          },
          "replyOnError" : {
            "description" : "Whether you want Integration Server to report errors to the original sender in the body portion of an email.",
            "type" : "boolean",
            "default" : false
          },
          "remove" : {
            "description" : "Whether you want Integration Server to delete a valid email from the IMAP server once Integration Server has successfully received the email.",
            "type" : "boolean",
            "default" : true
          },
          "deleteInvalid" : {
            "description" : "Whether you want Integration Server to delete invalid emails from the IMAP server.",
            "type" : "boolean",
            "default" : true
          },
          "multiThreaded" : {
            "description" : "Whether you want Integration Server to use multiple threads for this port.",
            "type" : "boolean",
            "default" : false
          },
          "numThreads" : {
            "description" : "The number of threads you want Integration Server to use for this port. This field is applicable only if multiThreaded is true.",
            "type" : "integer",
            "format" : "int32"
          },
          "invokePerPart" : {
            "description" : "Whether Integration Server invokes the service for each part of a multipart message or just once for the entire message.",
            "type" : "boolean",
            "default" : true
          },
          "includeHeaders" : {
            "description" : "Whether Integration Server includes the email headers when passing an email message to the content handler.",
            "type" : "boolean",
            "default" : false
          },
          "urlEncodedBody" : {
            "description" : "Whether the email body contains URL-encoded input parameters to be decoded into IData, placed in the pipeline, and passed to the service.",
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "EGRegPort" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "description" : "A unique name that identifies the port.",
            "type" : "string"
          },
          "number" : {
            "description" : "The port number.",
            "type" : "integer",
            "format" : "int32"
          },
          "packageName" : {
            "description" : "The package with which port is associated.",
            "type" : "string"
          },
          "description" : {
            "description" : "A description of the port.",
            "type" : "string"
          },
          "protocol" : {
            "description" : "The protocol for the port. ",
            "type" : "string",
            "enum" : [ "HTTP", "HTTPS" ]
          },
          "enabled" : {
            "description" : "Whether the port is enabled. When the port is enabled, it is accepting requests.",
            "type" : "boolean"
          },
          "bindAddress" : {
            "description" : "If the computer has more than one network interface, this field identifies which interface the port uses. The value can be an IPv4 or IPv6 address.",
            "type" : "string"
          },
          "clientAuth" : {
            "description" : "The type of authentication used by this port",
            "type" : "string"
          },
          "useJSSE" : {
            "description" : "Whether the port will be created using the Java Secure Socket Extension.",
            "type" : "boolean"
          },
          "keyAlias" : {
            "description" : "Key alias for the private key associated with the keystore alias.",
            "type" : "string"
          },
          "keyStore" : {
            "description" : "Keystore alias, which contains private keys and certificates for an Integration Server, partner application, or Integration Server component.",
            "type" : "string"
          },
          "trustStore" : {
            "description" : "Truststore alias for the truststore, which contains the trusted root of a certificate or signing authority (CA).",
            "type" : "string"
          }
        }
      },
      "FiltersInOut" : {
        "type" : "object",
        "properties" : {
          "oAuthFilter" : {
            "$ref" : "#/components/schemas/OAuthFilterInOut"
          },
          "msgSizeLimitFilter" : {
            "$ref" : "#/components/schemas/MessageSizeLimitFilterInOut"
          },
          "mobileAppProtectionFilter" : {
            "$ref" : "#/components/schemas/MobileAppProtectionFilterInOut"
          },
          "sqlInjectionFilter" : {
            "$ref" : "#/components/schemas/SQLInjectionFilterInOut"
          },
          "antiVirusFilter" : {
            "$ref" : "#/components/schemas/AntiVirusFilterInOut"
          },
          "customFilter" : {
            "$ref" : "#/components/schemas/CustomFilterInOut"
          }
        }
      },
      "JDBCPoolAliasUpdate_Patch" : {
        "type" : "object",
        "properties" : {
          "minConnections" : {
            "description" : "Minimum number of connections the pool must keep open at all times.",
            "type" : "integer",
            "format" : "int32"
          },
          "maxConnections" : {
            "description" : "Maximum number of connections the pool can have open at one time.",
            "type" : "integer",
            "format" : "int32"
          },
          "idleMilliseconds" : {
            "description" : "Number of milliseconds the pool can keep an unused connection open.",
            "type" : "integer",
            "format" : "int32"
          },
          "url" : {
            "description" : "URL for the database server.",
            "type" : "string"
          },
          "uid" : {
            "description" : "Database user for Integration Server to use to connect to the database.",
            "type" : "string"
          },
          "password" : {
            "description" : "Password for Integration Server to use to connect to the database.",
            "type" : "string"
          },
          "driver" : {
            "description" : "Database driver alias for Integration Server to use to connect to the pool.e",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the JDBC connection pool.",
            "type" : "string"
          },
          "spyParms" : {
            "description" : "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Spy diagnostic feature. This parameter also defines DataDirect Spy attributes.",
            "type" : "string"
          },
          "snoopParms" : {
            "description" : "Name and location of the log file where Integration Server will log diagnostic data collected by the DataDirect Snoop tool. This parameter also defines DataDirect Snoop tool attributes.",
            "type" : "string"
          },
          "spyEnabled" : {
            "description" : "Whether the DataDirect Spy diagnostic feature for DataDirect Connect JDBC drivers is enabled.",
            "type" : "boolean"
          },
          "snoopEnabled" : {
            "description" : "Whether the DataDirect Snoop tool for DataDirect Connect JDBC drivers is enabled.",
            "type" : "boolean"
          },
          "poolThresholdPercentage" : {
            "description" : "Number of connections, expressed as a percentage of maxConnections, that should be available in the pool at all times.",
            "type" : "integer",
            "format" : "int32"
          },
          "waitingThread" : {
            "description" : "Maximum number of requests for connection that can be waiting at one time.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "OAuthFilterInOut" : {
        "type" : "object",
        "required" : [ "isOAuthFilterEnabled", "isRequireOAuthCredentials" ],
        "properties" : {
          "isOAuthFilterEnabled" : {
            "description" : "Whether OAuth filter is enabled or disabled.",
            "type" : "boolean",
            "enum" : [ false, true ]
          },
          "isRequireOAuthCredentials" : {
            "description" : "Whether Enterprise Gateway Server requires requests to contain an OAuth token in the authorization header of the request.",
            "type" : "boolean",
            "enum" : [ false, true ]
          }
        }
      }
    }
  }
}